# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: anki/decks.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import generic_pb2 as anki_dot_generic__pb2
from anki import collection_pb2 as anki_dot_collection__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='anki/decks.proto',
  package='anki.decks',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x10\x61nki/decks.proto\x12\nanki.decks\x1a\x12\x61nki/generic.proto\x1a\x15\x61nki/collection.proto\"\x15\n\x06\x44\x65\x63kId\x12\x0b\n\x03\x64id\x18\x01 \x01(\x03\"\x17\n\x07\x44\x65\x63kIds\x12\x0c\n\x04\x64ids\x18\x01 \x03(\x03\"\xaa\x08\n\x04\x44\x65\x63k\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x12\n\nmtime_secs\x18\x03 \x01(\x03\x12\x0b\n\x03usn\x18\x04 \x01(\x05\x12\'\n\x06\x63ommon\x18\x05 \x01(\x0b\x32\x17.anki.decks.Deck.Common\x12)\n\x06normal\x18\x06 \x01(\x0b\x32\x17.anki.decks.Deck.NormalH\x00\x12-\n\x08\x66iltered\x18\x07 \x01(\x0b\x32\x19.anki.decks.Deck.FilteredH\x00\x1a\xd1\x01\n\x06\x43ommon\x12\x17\n\x0fstudy_collapsed\x18\x01 \x01(\x08\x12\x19\n\x11\x62rowser_collapsed\x18\x02 \x01(\x08\x12\x18\n\x10last_day_studied\x18\x03 \x01(\r\x12\x13\n\x0bnew_studied\x18\x04 \x01(\x05\x12\x16\n\x0ereview_studied\x18\x05 \x01(\x05\x12\x1c\n\x14milliseconds_studied\x18\x07 \x01(\x05\x12\x18\n\x10learning_studied\x18\x06 \x01(\x05\x12\x0e\n\x05other\x18\xff\x01 \x01(\x0cJ\x04\x08\x08\x10\x0e\x1a\x7f\n\x06Normal\x12\x11\n\tconfig_id\x18\x01 \x01(\x03\x12\x12\n\nextend_new\x18\x02 \x01(\r\x12\x15\n\rextend_review\x18\x03 \x01(\r\x12\x13\n\x0b\x64\x65scription\x18\x04 \x01(\t\x12\x1c\n\x14markdown_description\x18\x05 \x01(\x08J\x04\x08\x06\x10\x0c\x1a\x93\x03\n\x08\x46iltered\x12\x12\n\nreschedule\x18\x01 \x01(\x08\x12:\n\x0csearch_terms\x18\x02 \x03(\x0b\x32$.anki.decks.Deck.Filtered.SearchTerm\x12\x0e\n\x06\x64\x65lays\x18\x03 \x03(\x02\x12\x15\n\rpreview_delay\x18\x04 \x01(\r\x1a\x8f\x02\n\nSearchTerm\x12\x0e\n\x06search\x18\x01 \x01(\t\x12\r\n\x05limit\x18\x02 \x01(\r\x12\x39\n\x05order\x18\x03 \x01(\x0e\x32*.anki.decks.Deck.Filtered.SearchTerm.Order\"\xa6\x01\n\x05Order\x12\x19\n\x15OLDEST_REVIEWED_FIRST\x10\x00\x12\n\n\x06RANDOM\x10\x01\x12\x17\n\x13INTERVALS_ASCENDING\x10\x02\x12\x18\n\x14INTERVALS_DESCENDING\x10\x03\x12\n\n\x06LAPSES\x10\x04\x12\t\n\x05\x41\x44\x44\x45\x44\x10\x05\x12\x07\n\x03\x44UE\x10\x06\x12\x11\n\rREVERSE_ADDED\x10\x07\x12\x10\n\x0c\x44UE_PRIORITY\x10\x08\x1aq\n\rKindContainer\x12)\n\x06normal\x18\x01 \x01(\x0b\x32\x17.anki.decks.Deck.NormalH\x00\x12-\n\x08\x66iltered\x18\x02 \x01(\x0b\x32\x19.anki.decks.Deck.FilteredH\x00\x42\x06\n\x04kindB\x06\n\x04kind\"L\n\x1c\x41\x64\x64OrUpdateDeckLegacyRequest\x12\x0c\n\x04\x64\x65\x63k\x18\x01 \x01(\x0c\x12\x1e\n\x16preserve_usn_and_mtime\x18\x02 \x01(\x08\"3\n\x0f\x44\x65\x63kTreeRequest\x12\x0b\n\x03now\x18\x01 \x01(\x03\x12\x13\n\x0btop_deck_id\x18\x02 \x01(\x03\"\xf2\x02\n\x0c\x44\x65\x63kTreeNode\x12\x0f\n\x07\x64\x65\x63k_id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\r\n\x05level\x18\x04 \x01(\r\x12\x11\n\tcollapsed\x18\x05 \x01(\x08\x12\x14\n\x0creview_count\x18\x06 \x01(\r\x12\x13\n\x0blearn_count\x18\x07 \x01(\r\x12\x11\n\tnew_count\x18\x08 \x01(\r\x12\x19\n\x11intraday_learning\x18\t \x01(\r\x12\"\n\x1ainterday_learning_uncapped\x18\n \x01(\r\x12\x14\n\x0cnew_uncapped\x18\x0b \x01(\r\x12\x17\n\x0freview_uncapped\x18\x0c \x01(\r\x12\x15\n\rtotal_in_deck\x18\r \x01(\r\x12 \n\x18total_including_children\x18\x0e \x01(\r\x12\x10\n\x08\x66iltered\x18\x10 \x01(\x08\x12*\n\x08\x63hildren\x18\x03 \x03(\x0b\x32\x18.anki.decks.DeckTreeNode\"\x9b\x01\n\x17SetDeckCollapsedRequest\x12\x0f\n\x07\x64\x65\x63k_id\x18\x01 \x01(\x03\x12\x11\n\tcollapsed\x18\x02 \x01(\x08\x12\x38\n\x05scope\x18\x03 \x01(\x0e\x32).anki.decks.SetDeckCollapsedRequest.Scope\"\"\n\x05Scope\x12\x0c\n\x08REVIEWER\x10\x00\x12\x0b\n\x07\x42ROWSER\x10\x01\"K\n\x13GetDeckNamesRequest\x12\x1a\n\x12skip_empty_default\x18\x01 \x01(\x08\x12\x18\n\x10include_filtered\x18\x02 \x01(\x08\"4\n\tDeckNames\x12\'\n\x07\x65ntries\x18\x01 \x03(\x0b\x32\x16.anki.decks.DeckNameId\"&\n\nDeckNameId\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\"<\n\x14ReparentDecksRequest\x12\x10\n\x08\x64\x65\x63k_ids\x18\x01 \x03(\x03\x12\x12\n\nnew_parent\x18\x02 \x01(\x03\"6\n\x11RenameDeckRequest\x12\x0f\n\x07\x64\x65\x63k_id\x18\x01 \x01(\x03\x12\x10\n\x08new_name\x18\x02 \x01(\t\"\\\n\x15\x46ilteredDeckForUpdate\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\x12)\n\x06\x63onfig\x18\x03 \x01(\x0b\x32\x19.anki.decks.Deck.Filtered2\x89\x0c\n\x0c\x44\x65\x63ksService\x12\x45\n\rAddDeckLegacy\x12\x12.anki.generic.Json\x1a .anki.collection.OpChangesWithId\x12U\n\x15\x41\x64\x64OrUpdateDeckLegacy\x12(.anki.decks.AddOrUpdateDeckLegacyRequest\x1a\x12.anki.decks.DeckId\x12\x41\n\x08\x44\x65\x63kTree\x12\x1b.anki.decks.DeckTreeRequest\x1a\x18.anki.decks.DeckTreeNode\x12\x39\n\x0e\x44\x65\x63kTreeLegacy\x12\x13.anki.generic.Empty\x1a\x12.anki.generic.Json\x12<\n\x11GetAllDecksLegacy\x12\x13.anki.generic.Empty\x1a\x12.anki.generic.Json\x12;\n\x0fGetDeckIdByName\x12\x14.anki.generic.String\x1a\x12.anki.decks.DeckId\x12/\n\x07GetDeck\x12\x12.anki.decks.DeckId\x1a\x10.anki.decks.Deck\x12:\n\nUpdateDeck\x12\x10.anki.decks.Deck\x1a\x1a.anki.collection.OpChanges\x12\x42\n\x10UpdateDeckLegacy\x12\x12.anki.generic.Json\x1a\x1a.anki.collection.OpChanges\x12S\n\x10SetDeckCollapsed\x12#.anki.decks.SetDeckCollapsedRequest\x1a\x1a.anki.collection.OpChanges\x12\x37\n\rGetDeckLegacy\x12\x12.anki.decks.DeckId\x1a\x12.anki.generic.Json\x12\x46\n\x0cGetDeckNames\x12\x1f.anki.decks.GetDeckNamesRequest\x1a\x15.anki.decks.DeckNames\x12\x41\n\x14GetDeckAndChildNames\x12\x12.anki.decks.DeckId\x1a\x15.anki.decks.DeckNames\x12\x37\n\rNewDeckLegacy\x12\x12.anki.generic.Bool\x1a\x12.anki.generic.Json\x12G\n\x0bRemoveDecks\x12\x13.anki.decks.DeckIds\x1a#.anki.collection.OpChangesWithCount\x12V\n\rReparentDecks\x12 .anki.decks.ReparentDecksRequest\x1a#.anki.collection.OpChangesWithCount\x12G\n\nRenameDeck\x12\x1d.anki.decks.RenameDeckRequest\x1a\x1a.anki.collection.OpChanges\x12P\n\x17GetOrCreateFilteredDeck\x12\x12.anki.decks.DeckId\x1a!.anki.decks.FilteredDeckForUpdate\x12^\n\x17\x41\x64\x64OrUpdateFilteredDeck\x12!.anki.decks.FilteredDeckForUpdate\x1a .anki.collection.OpChangesWithId\x12H\n\x17\x46ilteredDeckOrderLabels\x12\x13.anki.generic.Empty\x1a\x18.anki.generic.StringList\x12@\n\x0eSetCurrentDeck\x12\x12.anki.decks.DeckId\x1a\x1a.anki.collection.OpChanges\x12\x37\n\x0eGetCurrentDeck\x12\x13.anki.generic.Empty\x1a\x10.anki.decks.Deckb\x06proto3'
  ,
  dependencies=[anki_dot_generic__pb2.DESCRIPTOR,anki_dot_collection__pb2.DESCRIPTOR,])



_DECK_FILTERED_SEARCHTERM_ORDER = _descriptor.EnumDescriptor(
  name='Order',
  full_name='anki.decks.Deck.Filtered.SearchTerm.Order',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OLDEST_REVIEWED_FIRST', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='RANDOM', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INTERVALS_ASCENDING', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INTERVALS_DESCENDING', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LAPSES', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='ADDED', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='DUE', index=6, number=6,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVERSE_ADDED', index=7, number=7,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='DUE_PRIORITY', index=8, number=8,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=901,
  serialized_end=1067,
)
_sym_db.RegisterEnumDescriptor(_DECK_FILTERED_SEARCHTERM_ORDER)

_SETDECKCOLLAPSEDREQUEST_SCOPE = _descriptor.EnumDescriptor(
  name='Scope',
  full_name='anki.decks.SetDeckCollapsedRequest.Scope',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='REVIEWER', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='BROWSER', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1818,
  serialized_end=1852,
)
_sym_db.RegisterEnumDescriptor(_SETDECKCOLLAPSEDREQUEST_SCOPE)


_DECKID = _descriptor.Descriptor(
  name='DeckId',
  full_name='anki.decks.DeckId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='did', full_name='anki.decks.DeckId.did', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=75,
  serialized_end=96,
)


_DECKIDS = _descriptor.Descriptor(
  name='DeckIds',
  full_name='anki.decks.DeckIds',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='dids', full_name='anki.decks.DeckIds.dids', index=0,
      number=1, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=98,
  serialized_end=121,
)


_DECK_COMMON = _descriptor.Descriptor(
  name='Common',
  full_name='anki.decks.Deck.Common',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='study_collapsed', full_name='anki.decks.Deck.Common.study_collapsed', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='browser_collapsed', full_name='anki.decks.Deck.Common.browser_collapsed', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='last_day_studied', full_name='anki.decks.Deck.Common.last_day_studied', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_studied', full_name='anki.decks.Deck.Common.new_studied', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='review_studied', full_name='anki.decks.Deck.Common.review_studied', index=4,
      number=5, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='milliseconds_studied', full_name='anki.decks.Deck.Common.milliseconds_studied', index=5,
      number=7, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='learning_studied', full_name='anki.decks.Deck.Common.learning_studied', index=6,
      number=6, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='other', full_name='anki.decks.Deck.Common.other', index=7,
      number=255, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=323,
  serialized_end=532,
)

_DECK_NORMAL = _descriptor.Descriptor(
  name='Normal',
  full_name='anki.decks.Deck.Normal',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='config_id', full_name='anki.decks.Deck.Normal.config_id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='extend_new', full_name='anki.decks.Deck.Normal.extend_new', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='extend_review', full_name='anki.decks.Deck.Normal.extend_review', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='description', full_name='anki.decks.Deck.Normal.description', index=3,
      number=4, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='markdown_description', full_name='anki.decks.Deck.Normal.markdown_description', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=534,
  serialized_end=661,
)

_DECK_FILTERED_SEARCHTERM = _descriptor.Descriptor(
  name='SearchTerm',
  full_name='anki.decks.Deck.Filtered.SearchTerm',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='search', full_name='anki.decks.Deck.Filtered.SearchTerm.search', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='limit', full_name='anki.decks.Deck.Filtered.SearchTerm.limit', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='order', full_name='anki.decks.Deck.Filtered.SearchTerm.order', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _DECK_FILTERED_SEARCHTERM_ORDER,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=796,
  serialized_end=1067,
)

_DECK_FILTERED = _descriptor.Descriptor(
  name='Filtered',
  full_name='anki.decks.Deck.Filtered',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='reschedule', full_name='anki.decks.Deck.Filtered.reschedule', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='search_terms', full_name='anki.decks.Deck.Filtered.search_terms', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='delays', full_name='anki.decks.Deck.Filtered.delays', index=2,
      number=3, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='preview_delay', full_name='anki.decks.Deck.Filtered.preview_delay', index=3,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_DECK_FILTERED_SEARCHTERM, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=664,
  serialized_end=1067,
)

_DECK_KINDCONTAINER = _descriptor.Descriptor(
  name='KindContainer',
  full_name='anki.decks.Deck.KindContainer',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='normal', full_name='anki.decks.Deck.KindContainer.normal', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='filtered', full_name='anki.decks.Deck.KindContainer.filtered', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='kind', full_name='anki.decks.Deck.KindContainer.kind',
      index=0, containing_type=None,
      create_key=_descriptor._internal_create_key,
    fields=[]),
  ],
  serialized_start=1069,
  serialized_end=1182,
)

_DECK = _descriptor.Descriptor(
  name='Deck',
  full_name='anki.decks.Deck',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='anki.decks.Deck.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.decks.Deck.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='mtime_secs', full_name='anki.decks.Deck.mtime_secs', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='usn', full_name='anki.decks.Deck.usn', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='common', full_name='anki.decks.Deck.common', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='normal', full_name='anki.decks.Deck.normal', index=5,
      number=6, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='filtered', full_name='anki.decks.Deck.filtered', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_DECK_COMMON, _DECK_NORMAL, _DECK_FILTERED, _DECK_KINDCONTAINER, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='kind', full_name='anki.decks.Deck.kind',
      index=0, containing_type=None,
      create_key=_descriptor._internal_create_key,
    fields=[]),
  ],
  serialized_start=124,
  serialized_end=1190,
)


_ADDORUPDATEDECKLEGACYREQUEST = _descriptor.Descriptor(
  name='AddOrUpdateDeckLegacyRequest',
  full_name='anki.decks.AddOrUpdateDeckLegacyRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='deck', full_name='anki.decks.AddOrUpdateDeckLegacyRequest.deck', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='preserve_usn_and_mtime', full_name='anki.decks.AddOrUpdateDeckLegacyRequest.preserve_usn_and_mtime', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1192,
  serialized_end=1268,
)


_DECKTREEREQUEST = _descriptor.Descriptor(
  name='DeckTreeRequest',
  full_name='anki.decks.DeckTreeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='now', full_name='anki.decks.DeckTreeRequest.now', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='top_deck_id', full_name='anki.decks.DeckTreeRequest.top_deck_id', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1270,
  serialized_end=1321,
)


_DECKTREENODE = _descriptor.Descriptor(
  name='DeckTreeNode',
  full_name='anki.decks.DeckTreeNode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='deck_id', full_name='anki.decks.DeckTreeNode.deck_id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.decks.DeckTreeNode.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='level', full_name='anki.decks.DeckTreeNode.level', index=2,
      number=4, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='collapsed', full_name='anki.decks.DeckTreeNode.collapsed', index=3,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='review_count', full_name='anki.decks.DeckTreeNode.review_count', index=4,
      number=6, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='learn_count', full_name='anki.decks.DeckTreeNode.learn_count', index=5,
      number=7, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_count', full_name='anki.decks.DeckTreeNode.new_count', index=6,
      number=8, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='intraday_learning', full_name='anki.decks.DeckTreeNode.intraday_learning', index=7,
      number=9, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='interday_learning_uncapped', full_name='anki.decks.DeckTreeNode.interday_learning_uncapped', index=8,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_uncapped', full_name='anki.decks.DeckTreeNode.new_uncapped', index=9,
      number=11, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='review_uncapped', full_name='anki.decks.DeckTreeNode.review_uncapped', index=10,
      number=12, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='total_in_deck', full_name='anki.decks.DeckTreeNode.total_in_deck', index=11,
      number=13, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='total_including_children', full_name='anki.decks.DeckTreeNode.total_including_children', index=12,
      number=14, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='filtered', full_name='anki.decks.DeckTreeNode.filtered', index=13,
      number=16, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='children', full_name='anki.decks.DeckTreeNode.children', index=14,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1324,
  serialized_end=1694,
)


_SETDECKCOLLAPSEDREQUEST = _descriptor.Descriptor(
  name='SetDeckCollapsedRequest',
  full_name='anki.decks.SetDeckCollapsedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='deck_id', full_name='anki.decks.SetDeckCollapsedRequest.deck_id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='collapsed', full_name='anki.decks.SetDeckCollapsedRequest.collapsed', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='scope', full_name='anki.decks.SetDeckCollapsedRequest.scope', index=2,
      number=3, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SETDECKCOLLAPSEDREQUEST_SCOPE,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1697,
  serialized_end=1852,
)


_GETDECKNAMESREQUEST = _descriptor.Descriptor(
  name='GetDeckNamesRequest',
  full_name='anki.decks.GetDeckNamesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='skip_empty_default', full_name='anki.decks.GetDeckNamesRequest.skip_empty_default', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='include_filtered', full_name='anki.decks.GetDeckNamesRequest.include_filtered', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1854,
  serialized_end=1929,
)


_DECKNAMES = _descriptor.Descriptor(
  name='DeckNames',
  full_name='anki.decks.DeckNames',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='entries', full_name='anki.decks.DeckNames.entries', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1931,
  serialized_end=1983,
)


_DECKNAMEID = _descriptor.Descriptor(
  name='DeckNameId',
  full_name='anki.decks.DeckNameId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='anki.decks.DeckNameId.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.decks.DeckNameId.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1985,
  serialized_end=2023,
)


_REPARENTDECKSREQUEST = _descriptor.Descriptor(
  name='ReparentDecksRequest',
  full_name='anki.decks.ReparentDecksRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='deck_ids', full_name='anki.decks.ReparentDecksRequest.deck_ids', index=0,
      number=1, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_parent', full_name='anki.decks.ReparentDecksRequest.new_parent', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2025,
  serialized_end=2085,
)


_RENAMEDECKREQUEST = _descriptor.Descriptor(
  name='RenameDeckRequest',
  full_name='anki.decks.RenameDeckRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='deck_id', full_name='anki.decks.RenameDeckRequest.deck_id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_name', full_name='anki.decks.RenameDeckRequest.new_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2087,
  serialized_end=2141,
)


_FILTEREDDECKFORUPDATE = _descriptor.Descriptor(
  name='FilteredDeckForUpdate',
  full_name='anki.decks.FilteredDeckForUpdate',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='anki.decks.FilteredDeckForUpdate.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.decks.FilteredDeckForUpdate.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='config', full_name='anki.decks.FilteredDeckForUpdate.config', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2143,
  serialized_end=2235,
)

_DECK_COMMON.containing_type = _DECK
_DECK_NORMAL.containing_type = _DECK
_DECK_FILTERED_SEARCHTERM.fields_by_name['order'].enum_type = _DECK_FILTERED_SEARCHTERM_ORDER
_DECK_FILTERED_SEARCHTERM.containing_type = _DECK_FILTERED
_DECK_FILTERED_SEARCHTERM_ORDER.containing_type = _DECK_FILTERED_SEARCHTERM
_DECK_FILTERED.fields_by_name['search_terms'].message_type = _DECK_FILTERED_SEARCHTERM
_DECK_FILTERED.containing_type = _DECK
_DECK_KINDCONTAINER.fields_by_name['normal'].message_type = _DECK_NORMAL
_DECK_KINDCONTAINER.fields_by_name['filtered'].message_type = _DECK_FILTERED
_DECK_KINDCONTAINER.containing_type = _DECK
_DECK_KINDCONTAINER.oneofs_by_name['kind'].fields.append(
  _DECK_KINDCONTAINER.fields_by_name['normal'])
_DECK_KINDCONTAINER.fields_by_name['normal'].containing_oneof = _DECK_KINDCONTAINER.oneofs_by_name['kind']
_DECK_KINDCONTAINER.oneofs_by_name['kind'].fields.append(
  _DECK_KINDCONTAINER.fields_by_name['filtered'])
_DECK_KINDCONTAINER.fields_by_name['filtered'].containing_oneof = _DECK_KINDCONTAINER.oneofs_by_name['kind']
_DECK.fields_by_name['common'].message_type = _DECK_COMMON
_DECK.fields_by_name['normal'].message_type = _DECK_NORMAL
_DECK.fields_by_name['filtered'].message_type = _DECK_FILTERED
_DECK.oneofs_by_name['kind'].fields.append(
  _DECK.fields_by_name['normal'])
_DECK.fields_by_name['normal'].containing_oneof = _DECK.oneofs_by_name['kind']
_DECK.oneofs_by_name['kind'].fields.append(
  _DECK.fields_by_name['filtered'])
_DECK.fields_by_name['filtered'].containing_oneof = _DECK.oneofs_by_name['kind']
_DECKTREENODE.fields_by_name['children'].message_type = _DECKTREENODE
_SETDECKCOLLAPSEDREQUEST.fields_by_name['scope'].enum_type = _SETDECKCOLLAPSEDREQUEST_SCOPE
_SETDECKCOLLAPSEDREQUEST_SCOPE.containing_type = _SETDECKCOLLAPSEDREQUEST
_DECKNAMES.fields_by_name['entries'].message_type = _DECKNAMEID
_FILTEREDDECKFORUPDATE.fields_by_name['config'].message_type = _DECK_FILTERED
DESCRIPTOR.message_types_by_name['DeckId'] = _DECKID
DESCRIPTOR.message_types_by_name['DeckIds'] = _DECKIDS
DESCRIPTOR.message_types_by_name['Deck'] = _DECK
DESCRIPTOR.message_types_by_name['AddOrUpdateDeckLegacyRequest'] = _ADDORUPDATEDECKLEGACYREQUEST
DESCRIPTOR.message_types_by_name['DeckTreeRequest'] = _DECKTREEREQUEST
DESCRIPTOR.message_types_by_name['DeckTreeNode'] = _DECKTREENODE
DESCRIPTOR.message_types_by_name['SetDeckCollapsedRequest'] = _SETDECKCOLLAPSEDREQUEST
DESCRIPTOR.message_types_by_name['GetDeckNamesRequest'] = _GETDECKNAMESREQUEST
DESCRIPTOR.message_types_by_name['DeckNames'] = _DECKNAMES
DESCRIPTOR.message_types_by_name['DeckNameId'] = _DECKNAMEID
DESCRIPTOR.message_types_by_name['ReparentDecksRequest'] = _REPARENTDECKSREQUEST
DESCRIPTOR.message_types_by_name['RenameDeckRequest'] = _RENAMEDECKREQUEST
DESCRIPTOR.message_types_by_name['FilteredDeckForUpdate'] = _FILTEREDDECKFORUPDATE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

DeckId = _reflection.GeneratedProtocolMessageType('DeckId', (_message.Message,), {
  'DESCRIPTOR' : _DECKID,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.DeckId)
  })
_sym_db.RegisterMessage(DeckId)

DeckIds = _reflection.GeneratedProtocolMessageType('DeckIds', (_message.Message,), {
  'DESCRIPTOR' : _DECKIDS,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.DeckIds)
  })
_sym_db.RegisterMessage(DeckIds)

Deck = _reflection.GeneratedProtocolMessageType('Deck', (_message.Message,), {

  'Common' : _reflection.GeneratedProtocolMessageType('Common', (_message.Message,), {
    'DESCRIPTOR' : _DECK_COMMON,
    '__module__' : 'anki.decks_pb2'
    # @@protoc_insertion_point(class_scope:anki.decks.Deck.Common)
    })
  ,

  'Normal' : _reflection.GeneratedProtocolMessageType('Normal', (_message.Message,), {
    'DESCRIPTOR' : _DECK_NORMAL,
    '__module__' : 'anki.decks_pb2'
    # @@protoc_insertion_point(class_scope:anki.decks.Deck.Normal)
    })
  ,

  'Filtered' : _reflection.GeneratedProtocolMessageType('Filtered', (_message.Message,), {

    'SearchTerm' : _reflection.GeneratedProtocolMessageType('SearchTerm', (_message.Message,), {
      'DESCRIPTOR' : _DECK_FILTERED_SEARCHTERM,
      '__module__' : 'anki.decks_pb2'
      # @@protoc_insertion_point(class_scope:anki.decks.Deck.Filtered.SearchTerm)
      })
    ,
    'DESCRIPTOR' : _DECK_FILTERED,
    '__module__' : 'anki.decks_pb2'
    # @@protoc_insertion_point(class_scope:anki.decks.Deck.Filtered)
    })
  ,

  'KindContainer' : _reflection.GeneratedProtocolMessageType('KindContainer', (_message.Message,), {
    'DESCRIPTOR' : _DECK_KINDCONTAINER,
    '__module__' : 'anki.decks_pb2'
    # @@protoc_insertion_point(class_scope:anki.decks.Deck.KindContainer)
    })
  ,
  'DESCRIPTOR' : _DECK,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.Deck)
  })
_sym_db.RegisterMessage(Deck)
_sym_db.RegisterMessage(Deck.Common)
_sym_db.RegisterMessage(Deck.Normal)
_sym_db.RegisterMessage(Deck.Filtered)
_sym_db.RegisterMessage(Deck.Filtered.SearchTerm)
_sym_db.RegisterMessage(Deck.KindContainer)

AddOrUpdateDeckLegacyRequest = _reflection.GeneratedProtocolMessageType('AddOrUpdateDeckLegacyRequest', (_message.Message,), {
  'DESCRIPTOR' : _ADDORUPDATEDECKLEGACYREQUEST,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.AddOrUpdateDeckLegacyRequest)
  })
_sym_db.RegisterMessage(AddOrUpdateDeckLegacyRequest)

DeckTreeRequest = _reflection.GeneratedProtocolMessageType('DeckTreeRequest', (_message.Message,), {
  'DESCRIPTOR' : _DECKTREEREQUEST,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.DeckTreeRequest)
  })
_sym_db.RegisterMessage(DeckTreeRequest)

DeckTreeNode = _reflection.GeneratedProtocolMessageType('DeckTreeNode', (_message.Message,), {
  'DESCRIPTOR' : _DECKTREENODE,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.DeckTreeNode)
  })
_sym_db.RegisterMessage(DeckTreeNode)

SetDeckCollapsedRequest = _reflection.GeneratedProtocolMessageType('SetDeckCollapsedRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETDECKCOLLAPSEDREQUEST,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.SetDeckCollapsedRequest)
  })
_sym_db.RegisterMessage(SetDeckCollapsedRequest)

GetDeckNamesRequest = _reflection.GeneratedProtocolMessageType('GetDeckNamesRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETDECKNAMESREQUEST,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.GetDeckNamesRequest)
  })
_sym_db.RegisterMessage(GetDeckNamesRequest)

DeckNames = _reflection.GeneratedProtocolMessageType('DeckNames', (_message.Message,), {
  'DESCRIPTOR' : _DECKNAMES,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.DeckNames)
  })
_sym_db.RegisterMessage(DeckNames)

DeckNameId = _reflection.GeneratedProtocolMessageType('DeckNameId', (_message.Message,), {
  'DESCRIPTOR' : _DECKNAMEID,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.DeckNameId)
  })
_sym_db.RegisterMessage(DeckNameId)

ReparentDecksRequest = _reflection.GeneratedProtocolMessageType('ReparentDecksRequest', (_message.Message,), {
  'DESCRIPTOR' : _REPARENTDECKSREQUEST,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.ReparentDecksRequest)
  })
_sym_db.RegisterMessage(ReparentDecksRequest)

RenameDeckRequest = _reflection.GeneratedProtocolMessageType('RenameDeckRequest', (_message.Message,), {
  'DESCRIPTOR' : _RENAMEDECKREQUEST,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.RenameDeckRequest)
  })
_sym_db.RegisterMessage(RenameDeckRequest)

FilteredDeckForUpdate = _reflection.GeneratedProtocolMessageType('FilteredDeckForUpdate', (_message.Message,), {
  'DESCRIPTOR' : _FILTEREDDECKFORUPDATE,
  '__module__' : 'anki.decks_pb2'
  # @@protoc_insertion_point(class_scope:anki.decks.FilteredDeckForUpdate)
  })
_sym_db.RegisterMessage(FilteredDeckForUpdate)



_DECKSSERVICE = _descriptor.ServiceDescriptor(
  name='DecksService',
  full_name='anki.decks.DecksService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=2238,
  serialized_end=3783,
  methods=[
  _descriptor.MethodDescriptor(
    name='AddDeckLegacy',
    full_name='anki.decks.DecksService.AddDeckLegacy',
    index=0,
    containing_service=None,
    input_type=anki_dot_generic__pb2._JSON,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHID,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='AddOrUpdateDeckLegacy',
    full_name='anki.decks.DecksService.AddOrUpdateDeckLegacy',
    index=1,
    containing_service=None,
    input_type=_ADDORUPDATEDECKLEGACYREQUEST,
    output_type=_DECKID,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='DeckTree',
    full_name='anki.decks.DecksService.DeckTree',
    index=2,
    containing_service=None,
    input_type=_DECKTREEREQUEST,
    output_type=_DECKTREENODE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='DeckTreeLegacy',
    full_name='anki.decks.DecksService.DeckTreeLegacy',
    index=3,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetAllDecksLegacy',
    full_name='anki.decks.DecksService.GetAllDecksLegacy',
    index=4,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckIdByName',
    full_name='anki.decks.DecksService.GetDeckIdByName',
    index=5,
    containing_service=None,
    input_type=anki_dot_generic__pb2._STRING,
    output_type=_DECKID,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeck',
    full_name='anki.decks.DecksService.GetDeck',
    index=6,
    containing_service=None,
    input_type=_DECKID,
    output_type=_DECK,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='UpdateDeck',
    full_name='anki.decks.DecksService.UpdateDeck',
    index=7,
    containing_service=None,
    input_type=_DECK,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='UpdateDeckLegacy',
    full_name='anki.decks.DecksService.UpdateDeckLegacy',
    index=8,
    containing_service=None,
    input_type=anki_dot_generic__pb2._JSON,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetDeckCollapsed',
    full_name='anki.decks.DecksService.SetDeckCollapsed',
    index=9,
    containing_service=None,
    input_type=_SETDECKCOLLAPSEDREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckLegacy',
    full_name='anki.decks.DecksService.GetDeckLegacy',
    index=10,
    containing_service=None,
    input_type=_DECKID,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckNames',
    full_name='anki.decks.DecksService.GetDeckNames',
    index=11,
    containing_service=None,
    input_type=_GETDECKNAMESREQUEST,
    output_type=_DECKNAMES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckAndChildNames',
    full_name='anki.decks.DecksService.GetDeckAndChildNames',
    index=12,
    containing_service=None,
    input_type=_DECKID,
    output_type=_DECKNAMES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='NewDeckLegacy',
    full_name='anki.decks.DecksService.NewDeckLegacy',
    index=13,
    containing_service=None,
    input_type=anki_dot_generic__pb2._BOOL,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RemoveDecks',
    full_name='anki.decks.DecksService.RemoveDecks',
    index=14,
    containing_service=None,
    input_type=_DECKIDS,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='ReparentDecks',
    full_name='anki.decks.DecksService.ReparentDecks',
    index=15,
    containing_service=None,
    input_type=_REPARENTDECKSREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RenameDeck',
    full_name='anki.decks.DecksService.RenameDeck',
    index=16,
    containing_service=None,
    input_type=_RENAMEDECKREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetOrCreateFilteredDeck',
    full_name='anki.decks.DecksService.GetOrCreateFilteredDeck',
    index=17,
    containing_service=None,
    input_type=_DECKID,
    output_type=_FILTEREDDECKFORUPDATE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='AddOrUpdateFilteredDeck',
    full_name='anki.decks.DecksService.AddOrUpdateFilteredDeck',
    index=18,
    containing_service=None,
    input_type=_FILTEREDDECKFORUPDATE,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHID,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='FilteredDeckOrderLabels',
    full_name='anki.decks.DecksService.FilteredDeckOrderLabels',
    index=19,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._STRINGLIST,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetCurrentDeck',
    full_name='anki.decks.DecksService.SetCurrentDeck',
    index=20,
    containing_service=None,
    input_type=_DECKID,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetCurrentDeck',
    full_name='anki.decks.DecksService.GetCurrentDeck',
    index=21,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=_DECK,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_DECKSSERVICE)

DESCRIPTOR.services_by_name['DecksService'] = _DECKSSERVICE

# @@protoc_insertion_point(module_scope)
