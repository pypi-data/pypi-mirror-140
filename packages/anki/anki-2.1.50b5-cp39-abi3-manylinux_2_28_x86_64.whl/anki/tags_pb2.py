# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: anki/tags.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import generic_pb2 as anki_dot_generic__pb2
from anki import collection_pb2 as anki_dot_collection__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='anki/tags.proto',
  package='anki.tags',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x0f\x61nki/tags.proto\x12\tanki.tags\x1a\x12\x61nki/generic.proto\x1a\x15\x61nki/collection.proto\"9\n\x16SetTagCollapsedRequest\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tcollapsed\x18\x02 \x01(\x08\"g\n\x0bTagTreeNode\x12\x0c\n\x04name\x18\x01 \x01(\t\x12(\n\x08\x63hildren\x18\x02 \x03(\x0b\x32\x16.anki.tags.TagTreeNode\x12\r\n\x05level\x18\x03 \x01(\r\x12\x11\n\tcollapsed\x18\x04 \x01(\x08\"7\n\x13ReparentTagsRequest\x12\x0c\n\x04tags\x18\x01 \x03(\t\x12\x12\n\nnew_parent\x18\x02 \x01(\t\"?\n\x11RenameTagsRequest\x12\x16\n\x0e\x63urrent_prefix\x18\x01 \x01(\t\x12\x12\n\nnew_prefix\x18\x02 \x01(\t\"7\n\x15NoteIdsAndTagsRequest\x12\x10\n\x08note_ids\x18\x01 \x03(\x03\x12\x0c\n\x04tags\x18\x02 \x01(\t\"t\n\x18\x46indAndReplaceTagRequest\x12\x10\n\x08note_ids\x18\x01 \x03(\x03\x12\x0e\n\x06search\x18\x02 \x01(\t\x12\x13\n\x0breplacement\x18\x03 \x01(\t\x12\r\n\x05regex\x18\x04 \x01(\x08\x12\x12\n\nmatch_case\x18\x05 \x01(\x08\"8\n\x12\x43ompleteTagRequest\x12\r\n\x05input\x18\x01 \x01(\t\x12\x13\n\x0bmatch_limit\x18\x02 \x01(\r\"#\n\x13\x43ompleteTagResponse\x12\x0c\n\x04tags\x18\x01 \x03(\t2\xe9\x06\n\x0bTagsService\x12K\n\x0f\x43learUnusedTags\x12\x13.anki.generic.Empty\x1a#.anki.collection.OpChangesWithCount\x12\x38\n\x07\x41llTags\x12\x13.anki.generic.Empty\x1a\x18.anki.generic.StringList\x12G\n\nRemoveTags\x12\x14.anki.generic.String\x1a#.anki.collection.OpChangesWithCount\x12P\n\x0fSetTagCollapsed\x12!.anki.tags.SetTagCollapsedRequest\x1a\x1a.anki.collection.OpChanges\x12\x36\n\x07TagTree\x12\x13.anki.generic.Empty\x1a\x16.anki.tags.TagTreeNode\x12S\n\x0cReparentTags\x12\x1e.anki.tags.ReparentTagsRequest\x1a#.anki.collection.OpChangesWithCount\x12O\n\nRenameTags\x12\x1c.anki.tags.RenameTagsRequest\x1a#.anki.collection.OpChangesWithCount\x12T\n\x0b\x41\x64\x64NoteTags\x12 .anki.tags.NoteIdsAndTagsRequest\x1a#.anki.collection.OpChangesWithCount\x12W\n\x0eRemoveNoteTags\x12 .anki.tags.NoteIdsAndTagsRequest\x1a#.anki.collection.OpChangesWithCount\x12]\n\x11\x46indAndReplaceTag\x12#.anki.tags.FindAndReplaceTagRequest\x1a#.anki.collection.OpChangesWithCount\x12L\n\x0b\x43ompleteTag\x12\x1d.anki.tags.CompleteTagRequest\x1a\x1e.anki.tags.CompleteTagResponseb\x06proto3'
  ,
  dependencies=[anki_dot_generic__pb2.DESCRIPTOR,anki_dot_collection__pb2.DESCRIPTOR,])




_SETTAGCOLLAPSEDREQUEST = _descriptor.Descriptor(
  name='SetTagCollapsedRequest',
  full_name='anki.tags.SetTagCollapsedRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.tags.SetTagCollapsedRequest.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='collapsed', full_name='anki.tags.SetTagCollapsedRequest.collapsed', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=73,
  serialized_end=130,
)


_TAGTREENODE = _descriptor.Descriptor(
  name='TagTreeNode',
  full_name='anki.tags.TagTreeNode',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.tags.TagTreeNode.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='children', full_name='anki.tags.TagTreeNode.children', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='level', full_name='anki.tags.TagTreeNode.level', index=2,
      number=3, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='collapsed', full_name='anki.tags.TagTreeNode.collapsed', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=132,
  serialized_end=235,
)


_REPARENTTAGSREQUEST = _descriptor.Descriptor(
  name='ReparentTagsRequest',
  full_name='anki.tags.ReparentTagsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='tags', full_name='anki.tags.ReparentTagsRequest.tags', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_parent', full_name='anki.tags.ReparentTagsRequest.new_parent', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=237,
  serialized_end=292,
)


_RENAMETAGSREQUEST = _descriptor.Descriptor(
  name='RenameTagsRequest',
  full_name='anki.tags.RenameTagsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='current_prefix', full_name='anki.tags.RenameTagsRequest.current_prefix', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_prefix', full_name='anki.tags.RenameTagsRequest.new_prefix', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=294,
  serialized_end=357,
)


_NOTEIDSANDTAGSREQUEST = _descriptor.Descriptor(
  name='NoteIdsAndTagsRequest',
  full_name='anki.tags.NoteIdsAndTagsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='note_ids', full_name='anki.tags.NoteIdsAndTagsRequest.note_ids', index=0,
      number=1, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='tags', full_name='anki.tags.NoteIdsAndTagsRequest.tags', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=359,
  serialized_end=414,
)


_FINDANDREPLACETAGREQUEST = _descriptor.Descriptor(
  name='FindAndReplaceTagRequest',
  full_name='anki.tags.FindAndReplaceTagRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='note_ids', full_name='anki.tags.FindAndReplaceTagRequest.note_ids', index=0,
      number=1, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='search', full_name='anki.tags.FindAndReplaceTagRequest.search', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='replacement', full_name='anki.tags.FindAndReplaceTagRequest.replacement', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='regex', full_name='anki.tags.FindAndReplaceTagRequest.regex', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='match_case', full_name='anki.tags.FindAndReplaceTagRequest.match_case', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=416,
  serialized_end=532,
)


_COMPLETETAGREQUEST = _descriptor.Descriptor(
  name='CompleteTagRequest',
  full_name='anki.tags.CompleteTagRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='input', full_name='anki.tags.CompleteTagRequest.input', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='match_limit', full_name='anki.tags.CompleteTagRequest.match_limit', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=534,
  serialized_end=590,
)


_COMPLETETAGRESPONSE = _descriptor.Descriptor(
  name='CompleteTagResponse',
  full_name='anki.tags.CompleteTagResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='tags', full_name='anki.tags.CompleteTagResponse.tags', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=592,
  serialized_end=627,
)

_TAGTREENODE.fields_by_name['children'].message_type = _TAGTREENODE
DESCRIPTOR.message_types_by_name['SetTagCollapsedRequest'] = _SETTAGCOLLAPSEDREQUEST
DESCRIPTOR.message_types_by_name['TagTreeNode'] = _TAGTREENODE
DESCRIPTOR.message_types_by_name['ReparentTagsRequest'] = _REPARENTTAGSREQUEST
DESCRIPTOR.message_types_by_name['RenameTagsRequest'] = _RENAMETAGSREQUEST
DESCRIPTOR.message_types_by_name['NoteIdsAndTagsRequest'] = _NOTEIDSANDTAGSREQUEST
DESCRIPTOR.message_types_by_name['FindAndReplaceTagRequest'] = _FINDANDREPLACETAGREQUEST
DESCRIPTOR.message_types_by_name['CompleteTagRequest'] = _COMPLETETAGREQUEST
DESCRIPTOR.message_types_by_name['CompleteTagResponse'] = _COMPLETETAGRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

SetTagCollapsedRequest = _reflection.GeneratedProtocolMessageType('SetTagCollapsedRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETTAGCOLLAPSEDREQUEST,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.SetTagCollapsedRequest)
  })
_sym_db.RegisterMessage(SetTagCollapsedRequest)

TagTreeNode = _reflection.GeneratedProtocolMessageType('TagTreeNode', (_message.Message,), {
  'DESCRIPTOR' : _TAGTREENODE,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.TagTreeNode)
  })
_sym_db.RegisterMessage(TagTreeNode)

ReparentTagsRequest = _reflection.GeneratedProtocolMessageType('ReparentTagsRequest', (_message.Message,), {
  'DESCRIPTOR' : _REPARENTTAGSREQUEST,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.ReparentTagsRequest)
  })
_sym_db.RegisterMessage(ReparentTagsRequest)

RenameTagsRequest = _reflection.GeneratedProtocolMessageType('RenameTagsRequest', (_message.Message,), {
  'DESCRIPTOR' : _RENAMETAGSREQUEST,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.RenameTagsRequest)
  })
_sym_db.RegisterMessage(RenameTagsRequest)

NoteIdsAndTagsRequest = _reflection.GeneratedProtocolMessageType('NoteIdsAndTagsRequest', (_message.Message,), {
  'DESCRIPTOR' : _NOTEIDSANDTAGSREQUEST,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.NoteIdsAndTagsRequest)
  })
_sym_db.RegisterMessage(NoteIdsAndTagsRequest)

FindAndReplaceTagRequest = _reflection.GeneratedProtocolMessageType('FindAndReplaceTagRequest', (_message.Message,), {
  'DESCRIPTOR' : _FINDANDREPLACETAGREQUEST,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.FindAndReplaceTagRequest)
  })
_sym_db.RegisterMessage(FindAndReplaceTagRequest)

CompleteTagRequest = _reflection.GeneratedProtocolMessageType('CompleteTagRequest', (_message.Message,), {
  'DESCRIPTOR' : _COMPLETETAGREQUEST,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.CompleteTagRequest)
  })
_sym_db.RegisterMessage(CompleteTagRequest)

CompleteTagResponse = _reflection.GeneratedProtocolMessageType('CompleteTagResponse', (_message.Message,), {
  'DESCRIPTOR' : _COMPLETETAGRESPONSE,
  '__module__' : 'anki.tags_pb2'
  # @@protoc_insertion_point(class_scope:anki.tags.CompleteTagResponse)
  })
_sym_db.RegisterMessage(CompleteTagResponse)



_TAGSSERVICE = _descriptor.ServiceDescriptor(
  name='TagsService',
  full_name='anki.tags.TagsService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=630,
  serialized_end=1503,
  methods=[
  _descriptor.MethodDescriptor(
    name='ClearUnusedTags',
    full_name='anki.tags.TagsService.ClearUnusedTags',
    index=0,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='AllTags',
    full_name='anki.tags.TagsService.AllTags',
    index=1,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._STRINGLIST,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RemoveTags',
    full_name='anki.tags.TagsService.RemoveTags',
    index=2,
    containing_service=None,
    input_type=anki_dot_generic__pb2._STRING,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='SetTagCollapsed',
    full_name='anki.tags.TagsService.SetTagCollapsed',
    index=3,
    containing_service=None,
    input_type=_SETTAGCOLLAPSEDREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='TagTree',
    full_name='anki.tags.TagsService.TagTree',
    index=4,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=_TAGTREENODE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='ReparentTags',
    full_name='anki.tags.TagsService.ReparentTags',
    index=5,
    containing_service=None,
    input_type=_REPARENTTAGSREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RenameTags',
    full_name='anki.tags.TagsService.RenameTags',
    index=6,
    containing_service=None,
    input_type=_RENAMETAGSREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='AddNoteTags',
    full_name='anki.tags.TagsService.AddNoteTags',
    index=7,
    containing_service=None,
    input_type=_NOTEIDSANDTAGSREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RemoveNoteTags',
    full_name='anki.tags.TagsService.RemoveNoteTags',
    index=8,
    containing_service=None,
    input_type=_NOTEIDSANDTAGSREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='FindAndReplaceTag',
    full_name='anki.tags.TagsService.FindAndReplaceTag',
    index=9,
    containing_service=None,
    input_type=_FINDANDREPLACETAGREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGESWITHCOUNT,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='CompleteTag',
    full_name='anki.tags.TagsService.CompleteTag',
    index=10,
    containing_service=None,
    input_type=_COMPLETETAGREQUEST,
    output_type=_COMPLETETAGRESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_TAGSSERVICE)

DESCRIPTOR.services_by_name['TagsService'] = _TAGSSERVICE

# @@protoc_insertion_point(module_scope)
