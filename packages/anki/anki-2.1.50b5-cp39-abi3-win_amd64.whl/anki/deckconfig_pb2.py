# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: anki/deckconfig.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import generic_pb2 as anki_dot_generic__pb2
from anki import collection_pb2 as anki_dot_collection__pb2
from anki import decks_pb2 as anki_dot_decks__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='anki/deckconfig.proto',
  package='anki.deckconfig',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x15\x61nki/deckconfig.proto\x12\x0f\x61nki.deckconfig\x1a\x12\x61nki/generic.proto\x1a\x15\x61nki/collection.proto\x1a\x10\x61nki/decks.proto\"\x1c\n\x0c\x44\x65\x63kConfigId\x12\x0c\n\x04\x64\x63id\x18\x01 \x01(\x03\"\x85\x12\n\nDeckConfig\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x12\n\nmtime_secs\x18\x03 \x01(\x03\x12\x0b\n\x03usn\x18\x04 \x01(\x05\x12\x32\n\x06\x63onfig\x18\x05 \x01(\x0b\x32\".anki.deckconfig.DeckConfig.Config\x1a\x87\x11\n\x06\x43onfig\x12\x13\n\x0blearn_steps\x18\x01 \x03(\x02\x12\x15\n\rrelearn_steps\x18\x02 \x03(\x02\x12\x13\n\x0bnew_per_day\x18\t \x01(\r\x12\x17\n\x0freviews_per_day\x18\n \x01(\r\x12\x1b\n\x13new_per_day_minimum\x18# \x01(\r\x12\x14\n\x0cinitial_ease\x18\x0b \x01(\x02\x12\x17\n\x0f\x65\x61sy_multiplier\x18\x0c \x01(\x02\x12\x17\n\x0fhard_multiplier\x18\r \x01(\x02\x12\x18\n\x10lapse_multiplier\x18\x0e \x01(\x02\x12\x1b\n\x13interval_multiplier\x18\x0f \x01(\x02\x12\x1f\n\x17maximum_review_interval\x18\x10 \x01(\r\x12\x1e\n\x16minimum_lapse_interval\x18\x11 \x01(\r\x12 \n\x18graduating_interval_good\x18\x12 \x01(\r\x12 \n\x18graduating_interval_easy\x18\x13 \x01(\r\x12T\n\x15new_card_insert_order\x18\x14 \x01(\x0e\x32\x35.anki.deckconfig.DeckConfig.Config.NewCardInsertOrder\x12Z\n\x18new_card_gather_priority\x18\" \x01(\x0e\x32\x38.anki.deckconfig.DeckConfig.Config.NewCardGatherPriority\x12P\n\x13new_card_sort_order\x18  \x01(\x0e\x32\x33.anki.deckconfig.DeckConfig.Config.NewCardSortOrder\x12=\n\x07new_mix\x18\x1e \x01(\x0e\x32,.anki.deckconfig.DeckConfig.Config.ReviewMix\x12H\n\x0creview_order\x18! \x01(\x0e\x32\x32.anki.deckconfig.DeckConfig.Config.ReviewCardOrder\x12K\n\x15interday_learning_mix\x18\x1f \x01(\x0e\x32,.anki.deckconfig.DeckConfig.Config.ReviewMix\x12\x44\n\x0cleech_action\x18\x15 \x01(\x0e\x32..anki.deckconfig.DeckConfig.Config.LeechAction\x12\x17\n\x0fleech_threshold\x18\x16 \x01(\r\x12\x18\n\x10\x64isable_autoplay\x18\x17 \x01(\x08\x12\x1f\n\x17\x63\x61p_answer_time_to_secs\x18\x18 \x01(\r\x12\x12\n\nshow_timer\x18\x19 \x01(\x08\x12+\n#skip_question_when_replaying_answer\x18\x1a \x01(\x08\x12\x10\n\x08\x62ury_new\x18\x1b \x01(\x08\x12\x14\n\x0c\x62ury_reviews\x18\x1c \x01(\x08\x12\x1e\n\x16\x62ury_interday_learning\x18\x1d \x01(\x08\x12\x0e\n\x05other\x18\xff\x01 \x01(\x0c\"U\n\x12NewCardInsertOrder\x12\x1d\n\x19NEW_CARD_INSERT_ORDER_DUE\x10\x00\x12 \n\x1cNEW_CARD_INSERT_ORDER_RANDOM\x10\x01\"\xed\x01\n\x15NewCardGatherPriority\x12!\n\x1dNEW_CARD_GATHER_PRIORITY_DECK\x10\x00\x12,\n(NEW_CARD_GATHER_PRIORITY_LOWEST_POSITION\x10\x01\x12-\n)NEW_CARD_GATHER_PRIORITY_HIGHEST_POSITION\x10\x02\x12)\n%NEW_CARD_GATHER_PRIORITY_RANDOM_NOTES\x10\x03\x12)\n%NEW_CARD_GATHER_PRIORITY_RANDOM_CARDS\x10\x04\"\xdb\x01\n\x10NewCardSortOrder\x12 \n\x1cNEW_CARD_SORT_ORDER_TEMPLATE\x10\x00\x12\x1f\n\x1bNEW_CARD_SORT_ORDER_NO_SORT\x10\x01\x12,\n(NEW_CARD_SORT_ORDER_TEMPLATE_THEN_RANDOM\x10\x02\x12\x31\n-NEW_CARD_SORT_ORDER_RANDOM_NOTE_THEN_TEMPLATE\x10\x03\x12#\n\x1fNEW_CARD_SORT_ORDER_RANDOM_CARD\x10\x04\"\x9a\x02\n\x0fReviewCardOrder\x12\x19\n\x15REVIEW_CARD_ORDER_DAY\x10\x00\x12#\n\x1fREVIEW_CARD_ORDER_DAY_THEN_DECK\x10\x01\x12#\n\x1fREVIEW_CARD_ORDER_DECK_THEN_DAY\x10\x02\x12)\n%REVIEW_CARD_ORDER_INTERVALS_ASCENDING\x10\x03\x12*\n&REVIEW_CARD_ORDER_INTERVALS_DESCENDING\x10\x04\x12$\n REVIEW_CARD_ORDER_EASE_ASCENDING\x10\x05\x12%\n!REVIEW_CARD_ORDER_EASE_DESCENDING\x10\x06\"i\n\tReviewMix\x12\x1f\n\x1bREVIEW_MIX_MIX_WITH_REVIEWS\x10\x00\x12\x1c\n\x18REVIEW_MIX_AFTER_REVIEWS\x10\x01\x12\x1d\n\x19REVIEW_MIX_BEFORE_REVIEWS\x10\x02\"B\n\x0bLeechAction\x12\x18\n\x14LEECH_ACTION_SUSPEND\x10\x00\x12\x19\n\x15LEECH_ACTION_TAG_ONLY\x10\x01J\x04\x08\x03\x10\t\"\xda\x03\n\x14\x44\x65\x63kConfigsForUpdate\x12I\n\nall_config\x18\x01 \x03(\x0b\x32\x35.anki.deckconfig.DeckConfigsForUpdate.ConfigWithExtra\x12G\n\x0c\x63urrent_deck\x18\x02 \x01(\x0b\x32\x31.anki.deckconfig.DeckConfigsForUpdate.CurrentDeck\x12-\n\x08\x64\x65\x66\x61ults\x18\x03 \x01(\x0b\x32\x1b.anki.deckconfig.DeckConfig\x12\x17\n\x0fschema_modified\x18\x04 \x01(\x08\x12\x14\n\x0cv3_scheduler\x18\x05 \x01(\x08\x12\x13\n\x0bhave_addons\x18\x06 \x01(\x08\x12\x1d\n\x15\x63\x61rd_state_customizer\x18\x07 \x01(\t\x1aQ\n\x0f\x43onfigWithExtra\x12+\n\x06\x63onfig\x18\x01 \x01(\x0b\x32\x1b.anki.deckconfig.DeckConfig\x12\x11\n\tuse_count\x18\x02 \x01(\r\x1aI\n\x0b\x43urrentDeck\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tconfig_id\x18\x02 \x01(\x03\x12\x19\n\x11parent_config_ids\x18\x03 \x03(\x03\"\xb6\x01\n\x18UpdateDeckConfigsRequest\x12\x16\n\x0etarget_deck_id\x18\x01 \x01(\x03\x12,\n\x07\x63onfigs\x18\x02 \x03(\x0b\x32\x1b.anki.deckconfig.DeckConfig\x12\x1a\n\x12removed_config_ids\x18\x03 \x03(\x03\x12\x19\n\x11\x61pply_to_children\x18\x04 \x01(\x08\x12\x1d\n\x15\x63\x61rd_state_customizer\x18\x05 \x01(\t2\xf6\x04\n\x11\x44\x65\x63kConfigService\x12P\n\x1b\x41\x64\x64OrUpdateDeckConfigLegacy\x12\x12.anki.generic.Json\x1a\x1d.anki.deckconfig.DeckConfigId\x12K\n\rGetDeckConfig\x12\x1d.anki.deckconfig.DeckConfigId\x1a\x1b.anki.deckconfig.DeckConfig\x12>\n\x13\x41llDeckConfigLegacy\x12\x13.anki.generic.Empty\x1a\x12.anki.generic.Json\x12H\n\x13GetDeckConfigLegacy\x12\x1d.anki.deckconfig.DeckConfigId\x1a\x12.anki.generic.Json\x12>\n\x13NewDeckConfigLegacy\x12\x13.anki.generic.Empty\x1a\x12.anki.generic.Json\x12\x46\n\x10RemoveDeckConfig\x12\x1d.anki.deckconfig.DeckConfigId\x1a\x13.anki.generic.Empty\x12T\n\x17GetDeckConfigsForUpdate\x12\x12.anki.decks.DeckId\x1a%.anki.deckconfig.DeckConfigsForUpdate\x12Z\n\x11UpdateDeckConfigs\x12).anki.deckconfig.UpdateDeckConfigsRequest\x1a\x1a.anki.collection.OpChangesb\x06proto3'
  ,
  dependencies=[anki_dot_generic__pb2.DESCRIPTOR,anki_dot_collection__pb2.DESCRIPTOR,anki_dot_decks__pb2.DESCRIPTOR,])



_DECKCONFIG_CONFIG_NEWCARDINSERTORDER = _descriptor.EnumDescriptor(
  name='NewCardInsertOrder',
  full_name='anki.deckconfig.DeckConfig.Config.NewCardInsertOrder',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_INSERT_ORDER_DUE', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_INSERT_ORDER_RANDOM', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1430,
  serialized_end=1515,
)
_sym_db.RegisterEnumDescriptor(_DECKCONFIG_CONFIG_NEWCARDINSERTORDER)

_DECKCONFIG_CONFIG_NEWCARDGATHERPRIORITY = _descriptor.EnumDescriptor(
  name='NewCardGatherPriority',
  full_name='anki.deckconfig.DeckConfig.Config.NewCardGatherPriority',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_GATHER_PRIORITY_DECK', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_GATHER_PRIORITY_LOWEST_POSITION', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_GATHER_PRIORITY_HIGHEST_POSITION', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_GATHER_PRIORITY_RANDOM_NOTES', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_GATHER_PRIORITY_RANDOM_CARDS', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1518,
  serialized_end=1755,
)
_sym_db.RegisterEnumDescriptor(_DECKCONFIG_CONFIG_NEWCARDGATHERPRIORITY)

_DECKCONFIG_CONFIG_NEWCARDSORTORDER = _descriptor.EnumDescriptor(
  name='NewCardSortOrder',
  full_name='anki.deckconfig.DeckConfig.Config.NewCardSortOrder',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_SORT_ORDER_TEMPLATE', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_SORT_ORDER_NO_SORT', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_SORT_ORDER_TEMPLATE_THEN_RANDOM', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_SORT_ORDER_RANDOM_NOTE_THEN_TEMPLATE', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NEW_CARD_SORT_ORDER_RANDOM_CARD', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1758,
  serialized_end=1977,
)
_sym_db.RegisterEnumDescriptor(_DECKCONFIG_CONFIG_NEWCARDSORTORDER)

_DECKCONFIG_CONFIG_REVIEWCARDORDER = _descriptor.EnumDescriptor(
  name='ReviewCardOrder',
  full_name='anki.deckconfig.DeckConfig.Config.ReviewCardOrder',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_DAY', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_DAY_THEN_DECK', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_DECK_THEN_DAY', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_INTERVALS_ASCENDING', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_INTERVALS_DESCENDING', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_EASE_ASCENDING', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_CARD_ORDER_EASE_DESCENDING', index=6, number=6,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=1980,
  serialized_end=2262,
)
_sym_db.RegisterEnumDescriptor(_DECKCONFIG_CONFIG_REVIEWCARDORDER)

_DECKCONFIG_CONFIG_REVIEWMIX = _descriptor.EnumDescriptor(
  name='ReviewMix',
  full_name='anki.deckconfig.DeckConfig.Config.ReviewMix',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='REVIEW_MIX_MIX_WITH_REVIEWS', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_MIX_AFTER_REVIEWS', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='REVIEW_MIX_BEFORE_REVIEWS', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2264,
  serialized_end=2369,
)
_sym_db.RegisterEnumDescriptor(_DECKCONFIG_CONFIG_REVIEWMIX)

_DECKCONFIG_CONFIG_LEECHACTION = _descriptor.EnumDescriptor(
  name='LeechAction',
  full_name='anki.deckconfig.DeckConfig.Config.LeechAction',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='LEECH_ACTION_SUSPEND', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='LEECH_ACTION_TAG_ONLY', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=2371,
  serialized_end=2437,
)
_sym_db.RegisterEnumDescriptor(_DECKCONFIG_CONFIG_LEECHACTION)


_DECKCONFIGID = _descriptor.Descriptor(
  name='DeckConfigId',
  full_name='anki.deckconfig.DeckConfigId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='dcid', full_name='anki.deckconfig.DeckConfigId.dcid', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=103,
  serialized_end=131,
)


_DECKCONFIG_CONFIG = _descriptor.Descriptor(
  name='Config',
  full_name='anki.deckconfig.DeckConfig.Config',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='learn_steps', full_name='anki.deckconfig.DeckConfig.Config.learn_steps', index=0,
      number=1, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='relearn_steps', full_name='anki.deckconfig.DeckConfig.Config.relearn_steps', index=1,
      number=2, type=2, cpp_type=6, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_per_day', full_name='anki.deckconfig.DeckConfig.Config.new_per_day', index=2,
      number=9, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='reviews_per_day', full_name='anki.deckconfig.DeckConfig.Config.reviews_per_day', index=3,
      number=10, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_per_day_minimum', full_name='anki.deckconfig.DeckConfig.Config.new_per_day_minimum', index=4,
      number=35, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='initial_ease', full_name='anki.deckconfig.DeckConfig.Config.initial_ease', index=5,
      number=11, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='easy_multiplier', full_name='anki.deckconfig.DeckConfig.Config.easy_multiplier', index=6,
      number=12, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='hard_multiplier', full_name='anki.deckconfig.DeckConfig.Config.hard_multiplier', index=7,
      number=13, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='lapse_multiplier', full_name='anki.deckconfig.DeckConfig.Config.lapse_multiplier', index=8,
      number=14, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='interval_multiplier', full_name='anki.deckconfig.DeckConfig.Config.interval_multiplier', index=9,
      number=15, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='maximum_review_interval', full_name='anki.deckconfig.DeckConfig.Config.maximum_review_interval', index=10,
      number=16, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='minimum_lapse_interval', full_name='anki.deckconfig.DeckConfig.Config.minimum_lapse_interval', index=11,
      number=17, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='graduating_interval_good', full_name='anki.deckconfig.DeckConfig.Config.graduating_interval_good', index=12,
      number=18, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='graduating_interval_easy', full_name='anki.deckconfig.DeckConfig.Config.graduating_interval_easy', index=13,
      number=19, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_card_insert_order', full_name='anki.deckconfig.DeckConfig.Config.new_card_insert_order', index=14,
      number=20, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_card_gather_priority', full_name='anki.deckconfig.DeckConfig.Config.new_card_gather_priority', index=15,
      number=34, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_card_sort_order', full_name='anki.deckconfig.DeckConfig.Config.new_card_sort_order', index=16,
      number=32, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='new_mix', full_name='anki.deckconfig.DeckConfig.Config.new_mix', index=17,
      number=30, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='review_order', full_name='anki.deckconfig.DeckConfig.Config.review_order', index=18,
      number=33, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='interday_learning_mix', full_name='anki.deckconfig.DeckConfig.Config.interday_learning_mix', index=19,
      number=31, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='leech_action', full_name='anki.deckconfig.DeckConfig.Config.leech_action', index=20,
      number=21, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='leech_threshold', full_name='anki.deckconfig.DeckConfig.Config.leech_threshold', index=21,
      number=22, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='disable_autoplay', full_name='anki.deckconfig.DeckConfig.Config.disable_autoplay', index=22,
      number=23, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='cap_answer_time_to_secs', full_name='anki.deckconfig.DeckConfig.Config.cap_answer_time_to_secs', index=23,
      number=24, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='show_timer', full_name='anki.deckconfig.DeckConfig.Config.show_timer', index=24,
      number=25, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='skip_question_when_replaying_answer', full_name='anki.deckconfig.DeckConfig.Config.skip_question_when_replaying_answer', index=25,
      number=26, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='bury_new', full_name='anki.deckconfig.DeckConfig.Config.bury_new', index=26,
      number=27, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='bury_reviews', full_name='anki.deckconfig.DeckConfig.Config.bury_reviews', index=27,
      number=28, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='bury_interday_learning', full_name='anki.deckconfig.DeckConfig.Config.bury_interday_learning', index=28,
      number=29, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='other', full_name='anki.deckconfig.DeckConfig.Config.other', index=29,
      number=255, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _DECKCONFIG_CONFIG_NEWCARDINSERTORDER,
    _DECKCONFIG_CONFIG_NEWCARDGATHERPRIORITY,
    _DECKCONFIG_CONFIG_NEWCARDSORTORDER,
    _DECKCONFIG_CONFIG_REVIEWCARDORDER,
    _DECKCONFIG_CONFIG_REVIEWMIX,
    _DECKCONFIG_CONFIG_LEECHACTION,
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=260,
  serialized_end=2443,
)

_DECKCONFIG = _descriptor.Descriptor(
  name='DeckConfig',
  full_name='anki.deckconfig.DeckConfig',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='anki.deckconfig.DeckConfig.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.deckconfig.DeckConfig.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='mtime_secs', full_name='anki.deckconfig.DeckConfig.mtime_secs', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='usn', full_name='anki.deckconfig.DeckConfig.usn', index=3,
      number=4, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='config', full_name='anki.deckconfig.DeckConfig.config', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_DECKCONFIG_CONFIG, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=134,
  serialized_end=2443,
)


_DECKCONFIGSFORUPDATE_CONFIGWITHEXTRA = _descriptor.Descriptor(
  name='ConfigWithExtra',
  full_name='anki.deckconfig.DeckConfigsForUpdate.ConfigWithExtra',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='config', full_name='anki.deckconfig.DeckConfigsForUpdate.ConfigWithExtra.config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='use_count', full_name='anki.deckconfig.DeckConfigsForUpdate.ConfigWithExtra.use_count', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2764,
  serialized_end=2845,
)

_DECKCONFIGSFORUPDATE_CURRENTDECK = _descriptor.Descriptor(
  name='CurrentDeck',
  full_name='anki.deckconfig.DeckConfigsForUpdate.CurrentDeck',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='anki.deckconfig.DeckConfigsForUpdate.CurrentDeck.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='config_id', full_name='anki.deckconfig.DeckConfigsForUpdate.CurrentDeck.config_id', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='parent_config_ids', full_name='anki.deckconfig.DeckConfigsForUpdate.CurrentDeck.parent_config_ids', index=2,
      number=3, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2847,
  serialized_end=2920,
)

_DECKCONFIGSFORUPDATE = _descriptor.Descriptor(
  name='DeckConfigsForUpdate',
  full_name='anki.deckconfig.DeckConfigsForUpdate',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='all_config', full_name='anki.deckconfig.DeckConfigsForUpdate.all_config', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='current_deck', full_name='anki.deckconfig.DeckConfigsForUpdate.current_deck', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='defaults', full_name='anki.deckconfig.DeckConfigsForUpdate.defaults', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='schema_modified', full_name='anki.deckconfig.DeckConfigsForUpdate.schema_modified', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='v3_scheduler', full_name='anki.deckconfig.DeckConfigsForUpdate.v3_scheduler', index=4,
      number=5, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='have_addons', full_name='anki.deckconfig.DeckConfigsForUpdate.have_addons', index=5,
      number=6, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='card_state_customizer', full_name='anki.deckconfig.DeckConfigsForUpdate.card_state_customizer', index=6,
      number=7, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[_DECKCONFIGSFORUPDATE_CONFIGWITHEXTRA, _DECKCONFIGSFORUPDATE_CURRENTDECK, ],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2446,
  serialized_end=2920,
)


_UPDATEDECKCONFIGSREQUEST = _descriptor.Descriptor(
  name='UpdateDeckConfigsRequest',
  full_name='anki.deckconfig.UpdateDeckConfigsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='target_deck_id', full_name='anki.deckconfig.UpdateDeckConfigsRequest.target_deck_id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='configs', full_name='anki.deckconfig.UpdateDeckConfigsRequest.configs', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='removed_config_ids', full_name='anki.deckconfig.UpdateDeckConfigsRequest.removed_config_ids', index=2,
      number=3, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='apply_to_children', full_name='anki.deckconfig.UpdateDeckConfigsRequest.apply_to_children', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='card_state_customizer', full_name='anki.deckconfig.UpdateDeckConfigsRequest.card_state_customizer', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=2923,
  serialized_end=3105,
)

_DECKCONFIG_CONFIG.fields_by_name['new_card_insert_order'].enum_type = _DECKCONFIG_CONFIG_NEWCARDINSERTORDER
_DECKCONFIG_CONFIG.fields_by_name['new_card_gather_priority'].enum_type = _DECKCONFIG_CONFIG_NEWCARDGATHERPRIORITY
_DECKCONFIG_CONFIG.fields_by_name['new_card_sort_order'].enum_type = _DECKCONFIG_CONFIG_NEWCARDSORTORDER
_DECKCONFIG_CONFIG.fields_by_name['new_mix'].enum_type = _DECKCONFIG_CONFIG_REVIEWMIX
_DECKCONFIG_CONFIG.fields_by_name['review_order'].enum_type = _DECKCONFIG_CONFIG_REVIEWCARDORDER
_DECKCONFIG_CONFIG.fields_by_name['interday_learning_mix'].enum_type = _DECKCONFIG_CONFIG_REVIEWMIX
_DECKCONFIG_CONFIG.fields_by_name['leech_action'].enum_type = _DECKCONFIG_CONFIG_LEECHACTION
_DECKCONFIG_CONFIG.containing_type = _DECKCONFIG
_DECKCONFIG_CONFIG_NEWCARDINSERTORDER.containing_type = _DECKCONFIG_CONFIG
_DECKCONFIG_CONFIG_NEWCARDGATHERPRIORITY.containing_type = _DECKCONFIG_CONFIG
_DECKCONFIG_CONFIG_NEWCARDSORTORDER.containing_type = _DECKCONFIG_CONFIG
_DECKCONFIG_CONFIG_REVIEWCARDORDER.containing_type = _DECKCONFIG_CONFIG
_DECKCONFIG_CONFIG_REVIEWMIX.containing_type = _DECKCONFIG_CONFIG
_DECKCONFIG_CONFIG_LEECHACTION.containing_type = _DECKCONFIG_CONFIG
_DECKCONFIG.fields_by_name['config'].message_type = _DECKCONFIG_CONFIG
_DECKCONFIGSFORUPDATE_CONFIGWITHEXTRA.fields_by_name['config'].message_type = _DECKCONFIG
_DECKCONFIGSFORUPDATE_CONFIGWITHEXTRA.containing_type = _DECKCONFIGSFORUPDATE
_DECKCONFIGSFORUPDATE_CURRENTDECK.containing_type = _DECKCONFIGSFORUPDATE
_DECKCONFIGSFORUPDATE.fields_by_name['all_config'].message_type = _DECKCONFIGSFORUPDATE_CONFIGWITHEXTRA
_DECKCONFIGSFORUPDATE.fields_by_name['current_deck'].message_type = _DECKCONFIGSFORUPDATE_CURRENTDECK
_DECKCONFIGSFORUPDATE.fields_by_name['defaults'].message_type = _DECKCONFIG
_UPDATEDECKCONFIGSREQUEST.fields_by_name['configs'].message_type = _DECKCONFIG
DESCRIPTOR.message_types_by_name['DeckConfigId'] = _DECKCONFIGID
DESCRIPTOR.message_types_by_name['DeckConfig'] = _DECKCONFIG
DESCRIPTOR.message_types_by_name['DeckConfigsForUpdate'] = _DECKCONFIGSFORUPDATE
DESCRIPTOR.message_types_by_name['UpdateDeckConfigsRequest'] = _UPDATEDECKCONFIGSREQUEST
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

DeckConfigId = _reflection.GeneratedProtocolMessageType('DeckConfigId', (_message.Message,), {
  'DESCRIPTOR' : _DECKCONFIGID,
  '__module__' : 'anki.deckconfig_pb2'
  # @@protoc_insertion_point(class_scope:anki.deckconfig.DeckConfigId)
  })
_sym_db.RegisterMessage(DeckConfigId)

DeckConfig = _reflection.GeneratedProtocolMessageType('DeckConfig', (_message.Message,), {

  'Config' : _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), {
    'DESCRIPTOR' : _DECKCONFIG_CONFIG,
    '__module__' : 'anki.deckconfig_pb2'
    # @@protoc_insertion_point(class_scope:anki.deckconfig.DeckConfig.Config)
    })
  ,
  'DESCRIPTOR' : _DECKCONFIG,
  '__module__' : 'anki.deckconfig_pb2'
  # @@protoc_insertion_point(class_scope:anki.deckconfig.DeckConfig)
  })
_sym_db.RegisterMessage(DeckConfig)
_sym_db.RegisterMessage(DeckConfig.Config)

DeckConfigsForUpdate = _reflection.GeneratedProtocolMessageType('DeckConfigsForUpdate', (_message.Message,), {

  'ConfigWithExtra' : _reflection.GeneratedProtocolMessageType('ConfigWithExtra', (_message.Message,), {
    'DESCRIPTOR' : _DECKCONFIGSFORUPDATE_CONFIGWITHEXTRA,
    '__module__' : 'anki.deckconfig_pb2'
    # @@protoc_insertion_point(class_scope:anki.deckconfig.DeckConfigsForUpdate.ConfigWithExtra)
    })
  ,

  'CurrentDeck' : _reflection.GeneratedProtocolMessageType('CurrentDeck', (_message.Message,), {
    'DESCRIPTOR' : _DECKCONFIGSFORUPDATE_CURRENTDECK,
    '__module__' : 'anki.deckconfig_pb2'
    # @@protoc_insertion_point(class_scope:anki.deckconfig.DeckConfigsForUpdate.CurrentDeck)
    })
  ,
  'DESCRIPTOR' : _DECKCONFIGSFORUPDATE,
  '__module__' : 'anki.deckconfig_pb2'
  # @@protoc_insertion_point(class_scope:anki.deckconfig.DeckConfigsForUpdate)
  })
_sym_db.RegisterMessage(DeckConfigsForUpdate)
_sym_db.RegisterMessage(DeckConfigsForUpdate.ConfigWithExtra)
_sym_db.RegisterMessage(DeckConfigsForUpdate.CurrentDeck)

UpdateDeckConfigsRequest = _reflection.GeneratedProtocolMessageType('UpdateDeckConfigsRequest', (_message.Message,), {
  'DESCRIPTOR' : _UPDATEDECKCONFIGSREQUEST,
  '__module__' : 'anki.deckconfig_pb2'
  # @@protoc_insertion_point(class_scope:anki.deckconfig.UpdateDeckConfigsRequest)
  })
_sym_db.RegisterMessage(UpdateDeckConfigsRequest)



_DECKCONFIGSERVICE = _descriptor.ServiceDescriptor(
  name='DeckConfigService',
  full_name='anki.deckconfig.DeckConfigService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=3108,
  serialized_end=3738,
  methods=[
  _descriptor.MethodDescriptor(
    name='AddOrUpdateDeckConfigLegacy',
    full_name='anki.deckconfig.DeckConfigService.AddOrUpdateDeckConfigLegacy',
    index=0,
    containing_service=None,
    input_type=anki_dot_generic__pb2._JSON,
    output_type=_DECKCONFIGID,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckConfig',
    full_name='anki.deckconfig.DeckConfigService.GetDeckConfig',
    index=1,
    containing_service=None,
    input_type=_DECKCONFIGID,
    output_type=_DECKCONFIG,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='AllDeckConfigLegacy',
    full_name='anki.deckconfig.DeckConfigService.AllDeckConfigLegacy',
    index=2,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckConfigLegacy',
    full_name='anki.deckconfig.DeckConfigService.GetDeckConfigLegacy',
    index=3,
    containing_service=None,
    input_type=_DECKCONFIGID,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='NewDeckConfigLegacy',
    full_name='anki.deckconfig.DeckConfigService.NewDeckConfigLegacy',
    index=4,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._JSON,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RemoveDeckConfig',
    full_name='anki.deckconfig.DeckConfigService.RemoveDeckConfig',
    index=5,
    containing_service=None,
    input_type=_DECKCONFIGID,
    output_type=anki_dot_generic__pb2._EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='GetDeckConfigsForUpdate',
    full_name='anki.deckconfig.DeckConfigService.GetDeckConfigsForUpdate',
    index=6,
    containing_service=None,
    input_type=anki_dot_decks__pb2._DECKID,
    output_type=_DECKCONFIGSFORUPDATE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='UpdateDeckConfigs',
    full_name='anki.deckconfig.DeckConfigService.UpdateDeckConfigs',
    index=7,
    containing_service=None,
    input_type=_UPDATEDECKCONFIGSREQUEST,
    output_type=anki_dot_collection__pb2._OPCHANGES,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_DECKCONFIGSERVICE)

DESCRIPTOR.services_by_name['DeckConfigService'] = _DECKCONFIGSERVICE

# @@protoc_insertion_point(module_scope)
