# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: anki/media.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from anki import generic_pb2 as anki_dot_generic__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='anki/media.proto',
  package='anki.media',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x10\x61nki/media.proto\x12\nanki.media\x1a\x12\x61nki/generic.proto\"Y\n\x12\x43heckMediaResponse\x12\x0e\n\x06unused\x18\x01 \x03(\t\x12\x0f\n\x07missing\x18\x02 \x03(\t\x12\x0e\n\x06report\x18\x03 \x01(\t\x12\x12\n\nhave_trash\x18\x04 \x01(\x08\"(\n\x16TrashMediaFilesRequest\x12\x0e\n\x06\x66names\x18\x01 \x03(\t\"9\n\x13\x41\x64\x64MediaFileRequest\x12\x14\n\x0c\x64\x65sired_name\x18\x01 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x02 \x01(\x0c\x32\xd6\x02\n\x0cMediaService\x12\x41\n\nCheckMedia\x12\x13.anki.generic.Empty\x1a\x1e.anki.media.CheckMediaResponse\x12J\n\x0fTrashMediaFiles\x12\".anki.media.TrashMediaFilesRequest\x1a\x13.anki.generic.Empty\x12\x45\n\x0c\x41\x64\x64MediaFile\x12\x1f.anki.media.AddMediaFileRequest\x1a\x14.anki.generic.String\x12\x36\n\nEmptyTrash\x12\x13.anki.generic.Empty\x1a\x13.anki.generic.Empty\x12\x38\n\x0cRestoreTrash\x12\x13.anki.generic.Empty\x1a\x13.anki.generic.Emptyb\x06proto3'
  ,
  dependencies=[anki_dot_generic__pb2.DESCRIPTOR,])




_CHECKMEDIARESPONSE = _descriptor.Descriptor(
  name='CheckMediaResponse',
  full_name='anki.media.CheckMediaResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='unused', full_name='anki.media.CheckMediaResponse.unused', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='missing', full_name='anki.media.CheckMediaResponse.missing', index=1,
      number=2, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='report', full_name='anki.media.CheckMediaResponse.report', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='have_trash', full_name='anki.media.CheckMediaResponse.have_trash', index=3,
      number=4, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=141,
)


_TRASHMEDIAFILESREQUEST = _descriptor.Descriptor(
  name='TrashMediaFilesRequest',
  full_name='anki.media.TrashMediaFilesRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='fnames', full_name='anki.media.TrashMediaFilesRequest.fnames', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=143,
  serialized_end=183,
)


_ADDMEDIAFILEREQUEST = _descriptor.Descriptor(
  name='AddMediaFileRequest',
  full_name='anki.media.AddMediaFileRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='desired_name', full_name='anki.media.AddMediaFileRequest.desired_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=b"".decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
    _descriptor.FieldDescriptor(
      name='data', full_name='anki.media.AddMediaFileRequest.data', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=185,
  serialized_end=242,
)

DESCRIPTOR.message_types_by_name['CheckMediaResponse'] = _CHECKMEDIARESPONSE
DESCRIPTOR.message_types_by_name['TrashMediaFilesRequest'] = _TRASHMEDIAFILESREQUEST
DESCRIPTOR.message_types_by_name['AddMediaFileRequest'] = _ADDMEDIAFILEREQUEST
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

CheckMediaResponse = _reflection.GeneratedProtocolMessageType('CheckMediaResponse', (_message.Message,), {
  'DESCRIPTOR' : _CHECKMEDIARESPONSE,
  '__module__' : 'anki.media_pb2'
  # @@protoc_insertion_point(class_scope:anki.media.CheckMediaResponse)
  })
_sym_db.RegisterMessage(CheckMediaResponse)

TrashMediaFilesRequest = _reflection.GeneratedProtocolMessageType('TrashMediaFilesRequest', (_message.Message,), {
  'DESCRIPTOR' : _TRASHMEDIAFILESREQUEST,
  '__module__' : 'anki.media_pb2'
  # @@protoc_insertion_point(class_scope:anki.media.TrashMediaFilesRequest)
  })
_sym_db.RegisterMessage(TrashMediaFilesRequest)

AddMediaFileRequest = _reflection.GeneratedProtocolMessageType('AddMediaFileRequest', (_message.Message,), {
  'DESCRIPTOR' : _ADDMEDIAFILEREQUEST,
  '__module__' : 'anki.media_pb2'
  # @@protoc_insertion_point(class_scope:anki.media.AddMediaFileRequest)
  })
_sym_db.RegisterMessage(AddMediaFileRequest)



_MEDIASERVICE = _descriptor.ServiceDescriptor(
  name='MediaService',
  full_name='anki.media.MediaService',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_start=245,
  serialized_end=587,
  methods=[
  _descriptor.MethodDescriptor(
    name='CheckMedia',
    full_name='anki.media.MediaService.CheckMedia',
    index=0,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=_CHECKMEDIARESPONSE,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='TrashMediaFiles',
    full_name='anki.media.MediaService.TrashMediaFiles',
    index=1,
    containing_service=None,
    input_type=_TRASHMEDIAFILESREQUEST,
    output_type=anki_dot_generic__pb2._EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='AddMediaFile',
    full_name='anki.media.MediaService.AddMediaFile',
    index=2,
    containing_service=None,
    input_type=_ADDMEDIAFILEREQUEST,
    output_type=anki_dot_generic__pb2._STRING,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='EmptyTrash',
    full_name='anki.media.MediaService.EmptyTrash',
    index=3,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
  _descriptor.MethodDescriptor(
    name='RestoreTrash',
    full_name='anki.media.MediaService.RestoreTrash',
    index=4,
    containing_service=None,
    input_type=anki_dot_generic__pb2._EMPTY,
    output_type=anki_dot_generic__pb2._EMPTY,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
  ),
])
_sym_db.RegisterServiceDescriptor(_MEDIASERVICE)

DESCRIPTOR.services_by_name['MediaService'] = _MEDIASERVICE

# @@protoc_insertion_point(module_scope)
