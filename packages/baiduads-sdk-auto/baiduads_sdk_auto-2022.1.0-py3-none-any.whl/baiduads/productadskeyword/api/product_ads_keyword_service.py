"""
    dev2 api schema

    'dev2.baidu.com' api schema  # noqa: E501

Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from baiduads.api_client import ApiClient, Endpoint as _Endpoint
from baiduads.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from baiduads.productadskeyword.model.add_word_request_wrapper import AddWordRequestWrapper
from baiduads.productadskeyword.model.add_word_response_wrapper import AddWordResponseWrapper
from baiduads.productadskeyword.model.delete_word_request_wrapper import DeleteWordRequestWrapper
from baiduads.productadskeyword.model.delete_word_response_wrapper import DeleteWordResponseWrapper
from baiduads.productadskeyword.model.get_paged_word_request_wrapper import GetPagedWordRequestWrapper
from baiduads.productadskeyword.model.get_paged_word_response_wrapper import GetPagedWordResponseWrapper
from baiduads.productadskeyword.model.pause_keyword_request_wrapper import PauseKeywordRequestWrapper
from baiduads.productadskeyword.model.pause_keyword_response_wrapper import PauseKeywordResponseWrapper
from baiduads.productadskeyword.model.start_keyword_request_wrapper import StartKeywordRequestWrapper
from baiduads.productadskeyword.model.start_keyword_response_wrapper import StartKeywordResponseWrapper
from baiduads.productadskeyword.model.update_match_type_request_wrapper import UpdateMatchTypeRequestWrapper
from baiduads.productadskeyword.model.update_match_type_response_wrapper import UpdateMatchTypeResponseWrapper
from baiduads.productadskeyword.model.update_price_request_wrapper import UpdatePriceRequestWrapper
from baiduads.productadskeyword.model.update_price_response_wrapper import UpdatePriceResponseWrapper
from baiduads.productadskeyword.model.update_target_url_request_wrapper import UpdateTargetUrlRequestWrapper
from baiduads.productadskeyword.model.update_target_url_response_wrapper import UpdateTargetUrlResponseWrapper


class ProductAdsKeywordService(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.add_word_endpoint = _Endpoint(
            settings={
                'response_type': (AddWordResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/addWord',
                'operation_id': 'add_word',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_word_request_wrapper',
                ],
                'required': [
                    'add_word_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_word_request_wrapper':
                        (AddWordRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_word_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.delete_word_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteWordResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/deleteWord',
                'operation_id': 'delete_word',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_word_request_wrapper',
                ],
                'required': [
                    'delete_word_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_word_request_wrapper':
                        (DeleteWordRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_word_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_paged_word_endpoint = _Endpoint(
            settings={
                'response_type': (GetPagedWordResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/getPagedWord',
                'operation_id': 'get_paged_word',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'get_paged_word_request_wrapper',
                ],
                'required': [
                    'get_paged_word_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'get_paged_word_request_wrapper':
                        (GetPagedWordRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'get_paged_word_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.pause_keyword_endpoint = _Endpoint(
            settings={
                'response_type': (PauseKeywordResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/pauseKeyword',
                'operation_id': 'pause_keyword',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pause_keyword_request_wrapper',
                ],
                'required': [
                    'pause_keyword_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pause_keyword_request_wrapper':
                        (PauseKeywordRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'pause_keyword_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.start_keyword_endpoint = _Endpoint(
            settings={
                'response_type': (StartKeywordResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/startKeyword',
                'operation_id': 'start_keyword',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'start_keyword_request_wrapper',
                ],
                'required': [
                    'start_keyword_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'start_keyword_request_wrapper':
                        (StartKeywordRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'start_keyword_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_match_type_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateMatchTypeResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/updateMatchType',
                'operation_id': 'update_match_type',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_match_type_request_wrapper',
                ],
                'required': [
                    'update_match_type_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_match_type_request_wrapper':
                        (UpdateMatchTypeRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_match_type_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_price_endpoint = _Endpoint(
            settings={
                'response_type': (UpdatePriceResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/updatePrice',
                'operation_id': 'update_price',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_price_request_wrapper',
                ],
                'required': [
                    'update_price_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_price_request_wrapper':
                        (UpdatePriceRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_price_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_target_url_endpoint = _Endpoint(
            settings={
                'response_type': (UpdateTargetUrlResponseWrapper,),
                'auth': [],
                'endpoint_path': '/json/sms/service/ProductAdsKeywordService/updateTargetUrl',
                'operation_id': 'update_target_url',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_target_url_request_wrapper',
                ],
                'required': [
                    'update_target_url_request_wrapper',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_target_url_request_wrapper':
                        (UpdateTargetUrlRequestWrapper,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_target_url_request_wrapper': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def add_word(
        self,
        add_word_request_wrapper,
        **kwargs
    ):
        """add_word  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_word(add_word_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            add_word_request_wrapper (AddWordRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AddWordResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['add_word_request_wrapper'] = \
            add_word_request_wrapper
        return self.add_word_endpoint.call_with_http_info(**kwargs)

    def delete_word(
        self,
        delete_word_request_wrapper,
        **kwargs
    ):
        """delete_word  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_word(delete_word_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            delete_word_request_wrapper (DeleteWordRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteWordResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['delete_word_request_wrapper'] = \
            delete_word_request_wrapper
        return self.delete_word_endpoint.call_with_http_info(**kwargs)

    def get_paged_word(
        self,
        get_paged_word_request_wrapper,
        **kwargs
    ):
        """get_paged_word  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_paged_word(get_paged_word_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            get_paged_word_request_wrapper (GetPagedWordRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            GetPagedWordResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['get_paged_word_request_wrapper'] = \
            get_paged_word_request_wrapper
        return self.get_paged_word_endpoint.call_with_http_info(**kwargs)

    def pause_keyword(
        self,
        pause_keyword_request_wrapper,
        **kwargs
    ):
        """pause_keyword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.pause_keyword(pause_keyword_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            pause_keyword_request_wrapper (PauseKeywordRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PauseKeywordResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['pause_keyword_request_wrapper'] = \
            pause_keyword_request_wrapper
        return self.pause_keyword_endpoint.call_with_http_info(**kwargs)

    def start_keyword(
        self,
        start_keyword_request_wrapper,
        **kwargs
    ):
        """start_keyword  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_keyword(start_keyword_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            start_keyword_request_wrapper (StartKeywordRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            StartKeywordResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['start_keyword_request_wrapper'] = \
            start_keyword_request_wrapper
        return self.start_keyword_endpoint.call_with_http_info(**kwargs)

    def update_match_type(
        self,
        update_match_type_request_wrapper,
        **kwargs
    ):
        """update_match_type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_match_type(update_match_type_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_match_type_request_wrapper (UpdateMatchTypeRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateMatchTypeResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_match_type_request_wrapper'] = \
            update_match_type_request_wrapper
        return self.update_match_type_endpoint.call_with_http_info(**kwargs)

    def update_price(
        self,
        update_price_request_wrapper,
        **kwargs
    ):
        """update_price  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_price(update_price_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_price_request_wrapper (UpdatePriceRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdatePriceResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_price_request_wrapper'] = \
            update_price_request_wrapper
        return self.update_price_endpoint.call_with_http_info(**kwargs)

    def update_target_url(
        self,
        update_target_url_request_wrapper,
        **kwargs
    ):
        """update_target_url  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_target_url(update_target_url_request_wrapper, async_req=True)
        >>> result = thread.get()

        Args:
            update_target_url_request_wrapper (UpdateTargetUrlRequestWrapper):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            UpdateTargetUrlResponseWrapper
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['update_target_url_request_wrapper'] = \
            update_target_url_request_wrapper
        return self.update_target_url_endpoint.call_with_http_info(**kwargs)

