# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from minknow_api import protocol_pb2 as minknow__api_dot_protocol__pb2


class ProtocolServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.start_protocol = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/start_protocol',
                request_serializer=minknow__api_dot_protocol__pb2.StartProtocolRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.StartProtocolResponse.FromString,
                )
        self.stop_protocol = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/stop_protocol',
                request_serializer=minknow__api_dot_protocol__pb2.StopProtocolRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.StopProtocolResponse.FromString,
                )
        self.wait_for_finished = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/wait_for_finished',
                request_serializer=minknow__api_dot_protocol__pb2.WaitForFinishedRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
                )
        self.get_run_info = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/get_run_info',
                request_serializer=minknow__api_dot_protocol__pb2.GetRunInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
                )
        self.list_protocol_runs = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/list_protocol_runs',
                request_serializer=minknow__api_dot_protocol__pb2.ListProtocolRunsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ListProtocolRunsResponse.FromString,
                )
        self.get_current_protocol_run = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/get_current_protocol_run',
                request_serializer=minknow__api_dot_protocol__pb2.GetCurrentProtocolRunRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
                )
        self.watch_current_protocol_run = channel.unary_stream(
                '/minknow_api.protocol.ProtocolService/watch_current_protocol_run',
                request_serializer=minknow__api_dot_protocol__pb2.WatchCurrentProtocolRunRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
                )
        self.list_protocols = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/list_protocols',
                request_serializer=minknow__api_dot_protocol__pb2.ListProtocolsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ListProtocolsResponse.FromString,
                )
        self.get_context_info = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/get_context_info',
                request_serializer=minknow__api_dot_protocol__pb2.GetContextInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.GetContextInfoResponse.FromString,
                )
        self.set_context_info = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/set_context_info',
                request_serializer=minknow__api_dot_protocol__pb2.SetContextInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.SetContextInfoResponse.FromString,
                )
        self.get_protocol_purpose = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/get_protocol_purpose',
                request_serializer=minknow__api_dot_protocol__pb2.GetProtocolPurposeRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.GetProtocolPurposeResponse.FromString,
                )
        self.set_protocol_purpose = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/set_protocol_purpose',
                request_serializer=minknow__api_dot_protocol__pb2.SetProtocolPurposeRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.SetProtocolPurposeResponse.FromString,
                )
        self.add_epi2me_workflow = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/add_epi2me_workflow',
                request_serializer=minknow__api_dot_protocol__pb2.AddEpi2meWorkflowRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.AddEpi2meWorkflowResponse.FromString,
                )
        self.list_protocol_group_ids = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/list_protocol_group_ids',
                request_serializer=minknow__api_dot_protocol__pb2.ListProtocolGroupIdsRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ListProtocolGroupIdsResponse.FromString,
                )
        self.begin_hardware_check = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/begin_hardware_check',
                request_serializer=minknow__api_dot_protocol__pb2.BeginHardwareCheckRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.BeginHardwareCheckResponse.FromString,
                )
        self.begin_platform_qc = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/begin_platform_qc',
                request_serializer=minknow__api_dot_protocol__pb2.BeginPlatformQcRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.BeginPlatformQcResponse.FromString,
                )
        self.list_settings_for_protocol = channel.unary_unary(
                '/minknow_api.protocol.ProtocolService/list_settings_for_protocol',
                request_serializer=minknow__api_dot_protocol__pb2.ListSettingsForProtocolRequest.SerializeToString,
                response_deserializer=minknow__api_dot_protocol__pb2.ListSettingsForProtocolResponse.FromString,
                )


class ProtocolServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def start_protocol(self, request, context):
        """Initiates a python instance that runs the script specified by the `path` argument.
        `list_protocols` will give back a list of protocol scripts that can be started by this call
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_protocol(self, request, context):
        """Stops the currently running protocol script instance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wait_for_finished(self, request, context):
        """Wait for a protocol run to finish.

        The call blocks until the run with the given run ID has finished (or returns immediately if
        it had already finished) and returns information about the protocol run.

        If no run has been started with the provided run ID (or no run ID is given), an error is
        returned.

        If NOTIFY_BEFORE_TERMINATION is specified for state, the protocol end time is an estimate, including
        the allowed timeout.

        Since 1.10
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_run_info(self, request, context):
        """Gets information about a protocol run.

        If no run ID is provided, information about the most recently started protocol run is
        provided.

        Since 1.10
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_protocol_runs(self, request, context):
        """List previously started protocol run ids (including any current protocol), in order of starting.

        The returned object can be used to find protocol information with get_run_info.

        Since 1.11
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_current_protocol_run(self, request, context):
        """Returns the name and run id of the currently running protocol.

        Will fail with FAILED_PRECONDITION if there is no protocol running

        Since 1.11
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def watch_current_protocol_run(self, request, context):
        """Returns current protocol run info and streams any changes to the current protocol

        This call can be made even if there is no current protocol running. In this case, the next streamed
        response will be the start of a new protocol instance and you will receive updates for that protocol
        until it finishes

        If a protocol finishes this stream will still continue to run and you will be notified when a new protocol starts

        Since 1.12
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_protocols(self, request, context):
        """Gives back a list that contains info about each possible protocol script minknow is aware of.
        This will most likely be used to retrieve a suitable protocol script that can be passed on to `start_protocol`

        Since 1.10
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_context_info(self, request, context):
        """Returns string-to-string map of the context tags

        Since 1.11
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_context_info(self, request, context):
        """Store context tags as arbitary string-to-string map

        Since 1.11
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_protocol_purpose(self, request, context):
        """Value set by protocol scripts to define the purpose of the script. Gets this value

        Since 1.11
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_protocol_purpose(self, request, context):
        """Sets the protocol purpose. See also get_protocol_purpose

        Since 1.11
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_epi2me_workflow(self, request, context):
        """Links an epi2me workflow reference to a run id.

        Since 1.15
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_protocol_group_ids(self, request, context):
        """List all used protocol group ids used in any previous protocol on the box.

        Since 3.2
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def begin_hardware_check(self, request, context):
        """Run a hardware check on the connected flow cell.

        Throws an error if there is no flow cell connected.

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def begin_platform_qc(self, request, context):
        """Run platform qc on the connected flow cell

        Throws an error if there is no flow cell connected.

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_settings_for_protocol(self, request, context):
        """Given a protocol and some information about the flow-cell and kits will provide a list
        of settings required by the protocol, their defaults and dependencies.

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProtocolServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'start_protocol': grpc.unary_unary_rpc_method_handler(
                    servicer.start_protocol,
                    request_deserializer=minknow__api_dot_protocol__pb2.StartProtocolRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.StartProtocolResponse.SerializeToString,
            ),
            'stop_protocol': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_protocol,
                    request_deserializer=minknow__api_dot_protocol__pb2.StopProtocolRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.StopProtocolResponse.SerializeToString,
            ),
            'wait_for_finished': grpc.unary_unary_rpc_method_handler(
                    servicer.wait_for_finished,
                    request_deserializer=minknow__api_dot_protocol__pb2.WaitForFinishedRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.SerializeToString,
            ),
            'get_run_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_run_info,
                    request_deserializer=minknow__api_dot_protocol__pb2.GetRunInfoRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.SerializeToString,
            ),
            'list_protocol_runs': grpc.unary_unary_rpc_method_handler(
                    servicer.list_protocol_runs,
                    request_deserializer=minknow__api_dot_protocol__pb2.ListProtocolRunsRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ListProtocolRunsResponse.SerializeToString,
            ),
            'get_current_protocol_run': grpc.unary_unary_rpc_method_handler(
                    servicer.get_current_protocol_run,
                    request_deserializer=minknow__api_dot_protocol__pb2.GetCurrentProtocolRunRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.SerializeToString,
            ),
            'watch_current_protocol_run': grpc.unary_stream_rpc_method_handler(
                    servicer.watch_current_protocol_run,
                    request_deserializer=minknow__api_dot_protocol__pb2.WatchCurrentProtocolRunRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ProtocolRunInfo.SerializeToString,
            ),
            'list_protocols': grpc.unary_unary_rpc_method_handler(
                    servicer.list_protocols,
                    request_deserializer=minknow__api_dot_protocol__pb2.ListProtocolsRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ListProtocolsResponse.SerializeToString,
            ),
            'get_context_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_context_info,
                    request_deserializer=minknow__api_dot_protocol__pb2.GetContextInfoRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.GetContextInfoResponse.SerializeToString,
            ),
            'set_context_info': grpc.unary_unary_rpc_method_handler(
                    servicer.set_context_info,
                    request_deserializer=minknow__api_dot_protocol__pb2.SetContextInfoRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.SetContextInfoResponse.SerializeToString,
            ),
            'get_protocol_purpose': grpc.unary_unary_rpc_method_handler(
                    servicer.get_protocol_purpose,
                    request_deserializer=minknow__api_dot_protocol__pb2.GetProtocolPurposeRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.GetProtocolPurposeResponse.SerializeToString,
            ),
            'set_protocol_purpose': grpc.unary_unary_rpc_method_handler(
                    servicer.set_protocol_purpose,
                    request_deserializer=minknow__api_dot_protocol__pb2.SetProtocolPurposeRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.SetProtocolPurposeResponse.SerializeToString,
            ),
            'add_epi2me_workflow': grpc.unary_unary_rpc_method_handler(
                    servicer.add_epi2me_workflow,
                    request_deserializer=minknow__api_dot_protocol__pb2.AddEpi2meWorkflowRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.AddEpi2meWorkflowResponse.SerializeToString,
            ),
            'list_protocol_group_ids': grpc.unary_unary_rpc_method_handler(
                    servicer.list_protocol_group_ids,
                    request_deserializer=minknow__api_dot_protocol__pb2.ListProtocolGroupIdsRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ListProtocolGroupIdsResponse.SerializeToString,
            ),
            'begin_hardware_check': grpc.unary_unary_rpc_method_handler(
                    servicer.begin_hardware_check,
                    request_deserializer=minknow__api_dot_protocol__pb2.BeginHardwareCheckRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.BeginHardwareCheckResponse.SerializeToString,
            ),
            'begin_platform_qc': grpc.unary_unary_rpc_method_handler(
                    servicer.begin_platform_qc,
                    request_deserializer=minknow__api_dot_protocol__pb2.BeginPlatformQcRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.BeginPlatformQcResponse.SerializeToString,
            ),
            'list_settings_for_protocol': grpc.unary_unary_rpc_method_handler(
                    servicer.list_settings_for_protocol,
                    request_deserializer=minknow__api_dot_protocol__pb2.ListSettingsForProtocolRequest.FromString,
                    response_serializer=minknow__api_dot_protocol__pb2.ListSettingsForProtocolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minknow_api.protocol.ProtocolService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProtocolService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def start_protocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/start_protocol',
            minknow__api_dot_protocol__pb2.StartProtocolRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.StartProtocolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_protocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/stop_protocol',
            minknow__api_dot_protocol__pb2.StopProtocolRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.StopProtocolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def wait_for_finished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/wait_for_finished',
            minknow__api_dot_protocol__pb2.WaitForFinishedRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_run_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/get_run_info',
            minknow__api_dot_protocol__pb2.GetRunInfoRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_protocol_runs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/list_protocol_runs',
            minknow__api_dot_protocol__pb2.ListProtocolRunsRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ListProtocolRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_current_protocol_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/get_current_protocol_run',
            minknow__api_dot_protocol__pb2.GetCurrentProtocolRunRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def watch_current_protocol_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.protocol.ProtocolService/watch_current_protocol_run',
            minknow__api_dot_protocol__pb2.WatchCurrentProtocolRunRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ProtocolRunInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_protocols(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/list_protocols',
            minknow__api_dot_protocol__pb2.ListProtocolsRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ListProtocolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_context_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/get_context_info',
            minknow__api_dot_protocol__pb2.GetContextInfoRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.GetContextInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_context_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/set_context_info',
            minknow__api_dot_protocol__pb2.SetContextInfoRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.SetContextInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_protocol_purpose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/get_protocol_purpose',
            minknow__api_dot_protocol__pb2.GetProtocolPurposeRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.GetProtocolPurposeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_protocol_purpose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/set_protocol_purpose',
            minknow__api_dot_protocol__pb2.SetProtocolPurposeRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.SetProtocolPurposeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_epi2me_workflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/add_epi2me_workflow',
            minknow__api_dot_protocol__pb2.AddEpi2meWorkflowRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.AddEpi2meWorkflowResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_protocol_group_ids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/list_protocol_group_ids',
            minknow__api_dot_protocol__pb2.ListProtocolGroupIdsRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ListProtocolGroupIdsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def begin_hardware_check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/begin_hardware_check',
            minknow__api_dot_protocol__pb2.BeginHardwareCheckRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.BeginHardwareCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def begin_platform_qc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/begin_platform_qc',
            minknow__api_dot_protocol__pb2.BeginPlatformQcRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.BeginPlatformQcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_settings_for_protocol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.protocol.ProtocolService/list_settings_for_protocol',
            minknow__api_dot_protocol__pb2.ListSettingsForProtocolRequest.SerializeToString,
            minknow__api_dot_protocol__pb2.ListSettingsForProtocolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
