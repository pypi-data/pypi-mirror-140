# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from minknow_api import basecaller_pb2 as minknow__api_dot_basecaller__pb2


class BasecallerStub(object):
    """Basecall reads files from previous sequencing runs.

    NB: this is not available from a MinKNOW device instance. It should be accessed on its own
    connection, using one of the ports provided by the
    minknow_api.manager.ManagerService.basecaller_api() method.

    Since 3.5
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.list_configs_by_kit = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/list_configs_by_kit',
                request_serializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitResponse.FromString,
                )
        self.start_basecalling = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_basecalling',
                request_serializer=minknow__api_dot_basecaller__pb2.StartBasecallingRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartBasecallingResponse.FromString,
                )
        self.start_barcoding = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_barcoding',
                request_serializer=minknow__api_dot_basecaller__pb2.StartBarcodingRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartBarcodingResponse.FromString,
                )
        self.start_alignment = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/start_alignment',
                request_serializer=minknow__api_dot_basecaller__pb2.StartAlignmentRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.StartAlignmentResponse.FromString,
                )
        self.cancel = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/cancel',
                request_serializer=minknow__api_dot_basecaller__pb2.CancelRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.CancelResponse.FromString,
                )
        self.get_info = channel.unary_stream(
                '/minknow_api.basecaller.Basecaller/get_info',
                request_serializer=minknow__api_dot_basecaller__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.GetInfoResponse.FromString,
                )
        self.watch = channel.unary_stream(
                '/minknow_api.basecaller.Basecaller/watch',
                request_serializer=minknow__api_dot_basecaller__pb2.WatchRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.WatchResponse.FromString,
                )
        self.make_alignment_index = channel.unary_unary(
                '/minknow_api.basecaller.Basecaller/make_alignment_index',
                request_serializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexRequest.SerializeToString,
                response_deserializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexResponse.FromString,
                )


class BasecallerServicer(object):
    """Basecall reads files from previous sequencing runs.

    NB: this is not available from a MinKNOW device instance. It should be accessed on its own
    connection, using one of the ports provided by the
    minknow_api.manager.ManagerService.basecaller_api() method.

    Since 3.5
    """

    def list_configs_by_kit(self, request, context):
        """List the available basecalling configurations sorted by flow cell and kit.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_basecalling(self, request, context):
        """Start basecalling reads files.

        Since 4.0
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_barcoding(self, request, context):
        """Start barcoding fastq files.

        Since 3.8
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_alignment(self, request, context):
        """Start aligning fastq files.

        Since 3.8
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancel(self, request, context):
        """Stop a basecalling that was started by start_basecalling_reads().

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_info(self, request, context):
        """Gets information about one or more basecalling operations.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def watch(self, request, context):
        """Monitors basecalls, returning messages when basecalls are started, stopped or receive
        progress updates.

        The current state of all currently-running basecalls will be returned in the initial set of
        messages. Optionally, the state of all already-finished runs can be included. Note that this
        initial state may be split among several responses.

        Note that progress updates may be rate limited to avoid affecting performance.

        Since 3.5
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def make_alignment_index(self, request, context):
        """Build an alignment index file from an input fasta reference.

        This call blocks whilst the index is built.

        Since 4.3
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BasecallerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'list_configs_by_kit': grpc.unary_unary_rpc_method_handler(
                    servicer.list_configs_by_kit,
                    request_deserializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.ListConfigsByKitResponse.SerializeToString,
            ),
            'start_basecalling': grpc.unary_unary_rpc_method_handler(
                    servicer.start_basecalling,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartBasecallingRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartBasecallingResponse.SerializeToString,
            ),
            'start_barcoding': grpc.unary_unary_rpc_method_handler(
                    servicer.start_barcoding,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartBarcodingRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartBarcodingResponse.SerializeToString,
            ),
            'start_alignment': grpc.unary_unary_rpc_method_handler(
                    servicer.start_alignment,
                    request_deserializer=minknow__api_dot_basecaller__pb2.StartAlignmentRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.StartAlignmentResponse.SerializeToString,
            ),
            'cancel': grpc.unary_unary_rpc_method_handler(
                    servicer.cancel,
                    request_deserializer=minknow__api_dot_basecaller__pb2.CancelRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.CancelResponse.SerializeToString,
            ),
            'get_info': grpc.unary_stream_rpc_method_handler(
                    servicer.get_info,
                    request_deserializer=minknow__api_dot_basecaller__pb2.GetInfoRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.GetInfoResponse.SerializeToString,
            ),
            'watch': grpc.unary_stream_rpc_method_handler(
                    servicer.watch,
                    request_deserializer=minknow__api_dot_basecaller__pb2.WatchRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.WatchResponse.SerializeToString,
            ),
            'make_alignment_index': grpc.unary_unary_rpc_method_handler(
                    servicer.make_alignment_index,
                    request_deserializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexRequest.FromString,
                    response_serializer=minknow__api_dot_basecaller__pb2.MakeAlignmentIndexResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'minknow_api.basecaller.Basecaller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Basecaller(object):
    """Basecall reads files from previous sequencing runs.

    NB: this is not available from a MinKNOW device instance. It should be accessed on its own
    connection, using one of the ports provided by the
    minknow_api.manager.ManagerService.basecaller_api() method.

    Since 3.5
    """

    @staticmethod
    def list_configs_by_kit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/list_configs_by_kit',
            minknow__api_dot_basecaller__pb2.ListConfigsByKitRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.ListConfigsByKitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_basecalling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_basecalling',
            minknow__api_dot_basecaller__pb2.StartBasecallingRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartBasecallingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_barcoding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_barcoding',
            minknow__api_dot_basecaller__pb2.StartBarcodingRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartBarcodingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_alignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/start_alignment',
            minknow__api_dot_basecaller__pb2.StartAlignmentRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.StartAlignmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def cancel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/cancel',
            minknow__api_dot_basecaller__pb2.CancelRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.CancelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.basecaller.Basecaller/get_info',
            minknow__api_dot_basecaller__pb2.GetInfoRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def watch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/minknow_api.basecaller.Basecaller/watch',
            minknow__api_dot_basecaller__pb2.WatchRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.WatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def make_alignment_index(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/minknow_api.basecaller.Basecaller/make_alignment_index',
            minknow__api_dot_basecaller__pb2.MakeAlignmentIndexRequest.SerializeToString,
            minknow__api_dot_basecaller__pb2.MakeAlignmentIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
