{"version":3,"sources":["abstractCommentBlockView.es6.js"],"names":[],"mappings":"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","file":"abstractCommentBlockView.js","sourcesContent":["RB.AbstractCommentBlockView = Backbone.View.extend({\n    events: {\n        'click': '_onClicked'\n    },\n\n    tooltipSides: 'lrbt',\n\n    /**\n     * Dispose the comment block.\n     *\n     * This will remove the view and the tooltip.\n     */\n    dispose() {\n        this.trigger('removing');\n        this.remove();\n        this._$tooltip.remove();\n    },\n\n    /**\n     * Render the comment block.\n     *\n     * Along with the block, a floating tooltip will be created that\n     * displays summaries of the comments.\n     *\n     * Returns:\n     *     RB.AbstractCommentBlockView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$tooltip = $.tooltip(this.$el, { side: this.tooltipSides })\n            .addClass('comments');\n\n        this.renderContent();\n\n        this.model.on('change:draftComment', this._onDraftCommentChanged, this);\n        this._onDraftCommentChanged();\n\n        this._updateTooltip();\n\n        return this;\n    },\n\n    /**\n     * Hide the tooltip from the page.\n     *\n     * This will force the tooltip to hide, preventing it from interfering\n     * with operations such as moving a comment block.\n     *\n     * It will automatically show again the next time there is a mouse enter\n     * event.\n     */\n    hideTooltip() {\n        this._$tooltip.hide();\n    },\n\n    /**\n     * Position the comment dlg to the right side of comment block.\n     *\n     * This can be overridden to change where the comment dialog will\n     * be displayed.\n     *\n     * Args:\n     *     commntDlg (RB.CommentDialogView):\n     *          The view for the comment dialog.\n     */\n    positionCommentDlg(commentDlg) {\n        commentDlg.positionBeside(this.$el, {\n            side: 'r',\n            fitOnScreen: true\n        });\n    },\n\n    /**\n     * Position the notification bubble around the comment block.\n     *\n     * This can be overridden to change where the bubble will be displayed.\n     * By default, it is centered over the block.\n     *\n     * Args:\n     *     $bubble (jQuery):\n     *         The selector for the notification bubble.\n     */\n    positionNotifyBubble($bubble) {\n        $bubble.move(Math.round((this.$el.width()  - $bubble.width())  / 2),\n                     Math.round((this.$el.height() - $bubble.height()) / 2));\n    },\n\n    /**\n     * Notify the user of some update.\n     *\n     * This notification appears in the comment area.\n     *\n     * Args:\n     *     text (string):\n     *         The text to show in the notification.\n     *\n     *     cb (function, optional):\n     *         A callback function to call once the notification has been\n     *         removed.\n     *\n     *     context (object):\n     *         Context to bind when calling the ``cb`` callback function.\n     */\n    notify(text, cb, context) {\n        const $bubble = $('<div class=\"bubble\">')\n            .css('opacity', 0)\n            .appendTo(this.$el)\n            .text(text);\n\n        this.positionNotifyBubble($bubble);\n\n        $bubble\n            .animate({\n                top: '-=10px',\n                opacity: 0.8,\n            }, 350, 'swing')\n            .delay(1200)\n            .animate({\n                top: '+=10px',\n                opacity: 0,\n            }, 350, 'swing', () => {\n                $bubble.remove();\n\n                if (_.isFunction(cb)) {\n                    cb.call(context);\n                }\n            });\n    },\n\n    /**\n     * Update the tooltip contents.\n     *\n     * The contents will show the summary of each comment, including\n     * the draft comment, if any.\n     */\n    _updateTooltip() {\n        const $list = $('<ul/>');\n        const draftComment = this.model.get('draftComment');\n        const tooltipTemplate = _.template(dedent`\n            <li>\n             <div class=\"reviewer\">\n              <%- user %>:\n             </div>\n             <pre class=\"rich-text\"><%= html %></pre>\n            </li>\n        `);\n\n        if (draftComment) {\n            $(tooltipTemplate({\n                user: RB.UserSession.instance.get('fullName'),\n                html: draftComment.get('html'),\n            }))\n            .addClass('draft')\n            .appendTo($list);\n        }\n\n        this.model.get('serializedComments').forEach(comment => {\n            $(tooltipTemplate({\n                user: comment.user.name,\n                html: comment.html,\n            }))\n            .appendTo($list);\n        });\n\n        this._$tooltip\n            .empty()\n            .append($list);\n    },\n\n    /**\n     * Handle changes to the model's draftComment property.\n     *\n     * If there's a new draft comment, we'll begin listening for updates\n     * on it in order to update the tooltip or display notification bubbles.\n     *\n     * The comment block's style will reflect whether or not we have a\n     * draft comment.\n     *\n     * If the draft comment is deleted, and there are no other comments,\n     * the view will be removed.\n     */\n    _onDraftCommentChanged() {\n        const comment = this.model.get('draftComment');\n\n        if (!comment) {\n            this.$el.removeClass('draft');\n            return;\n        }\n\n        comment.on('change:text', this._updateTooltip, this);\n\n        comment.on('destroy', () => {\n            this.notify(gettext('Comment Deleted'), () => {\n                // Discard the comment block if empty.\n                if (this.model.isEmpty()) {\n                    this.$el.fadeOut(350, () => this.dispose());\n                } else {\n                    this.$el.removeClass('draft');\n                    this._updateTooltip();\n                }\n            });\n        });\n\n        comment.on('saved', options => {\n            this._updateTooltip();\n\n            if (!options.boundsUpdated) {\n                this.notify(gettext('Comment Saved'));\n            }\n\n            RB.DraftReviewBannerView.instance.show();\n        });\n\n        this.$el.addClass('draft');\n    },\n\n    /**\n     * Handle the comment block being clicked.\n     *\n     * Emits the 'clicked' signal so that parent views can process it.\n     */\n    _onClicked() {\n        this.trigger('clicked');\n    },\n});\n"]}