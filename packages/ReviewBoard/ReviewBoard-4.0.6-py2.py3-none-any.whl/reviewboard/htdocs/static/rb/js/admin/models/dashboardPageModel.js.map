{"version":3,"sources":["dashboardPageModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,KAAH,CAAS,aAAT,GAAyB,EAAE,CAAC,IAAH,CAAQ,MAAR,CAAe;AACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,QARoC,sBAQzB;AACP,WAAO,CAAC,CAAC,QAAF,CAAW,CAAC,CAAC,MAAF,CAAS,EAAE,CAAC,IAAH,CAAQ,SAAR,CAAkB,QAA3B,CAAX,EAAiD;AACpD,MAAA,WAAW,EAAE,IADuC;AAEpD,MAAA,WAAW,EAAE;AAFuC,KAAjD,CAAP;AAIH,GAbmC;;AAepC;AACJ;AACA;AACI,EAAA,UAlBoC,wBAkBvB;AACT,IAAA,EAAE,CAAC,IAAH,CAAQ,SAAR,CAAkB,UAAlB,CAA6B,KAA7B,CAAmC,IAAnC,EAAyC,SAAzC;AAEA,SAAK,OAAL,GAAe,IAAI,QAAQ,CAAC,UAAb,EAAf;AACH,GAtBmC;;AAwBpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,WArCoC,uBAqCxB,cArCwB,EAqCR;AACxB,QAAM,UAAU,GAAG,EAAnB;AACA,QAAM,WAAW,GAAG,KAAK,GAAL,CAAS,aAAT,CAApB;AAEA,SAAK,OAAL,CAAa,KAAb;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AACzC,UAAM,UAAU,GAAG,WAAW,CAAC,CAAD,CAA9B;;AAEA,UAAI;AACA,YAAI,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,UAAZ,CAA1B;AACA,YAAI,QAAQ,GAAG,UAAU,CAAC,UAAU,CAAC,SAAZ,CAAzB;;AAEA,YAAI,SAAS,KAAK,SAAlB,EAA6B;AACzB,UAAA,SAAS,GAAG,OAAO,CAAC,eAAR,CAAwB,UAAU,CAAC,UAAnC,CAAZ;AACA,UAAA,UAAU,CAAC,UAAU,CAAC,UAAZ,CAAV,GAAoC,SAApC;AACH;;AAED,YAAI,QAAQ,KAAK,SAAjB,EAA4B;AACxB,UAAA,QAAQ,GAAG,OAAO,CAAC,eAAR,CAAwB,UAAU,CAAC,SAAnC,CAAX;AACA,UAAA,UAAU,CAAC,UAAU,CAAC,SAAZ,CAAV,GAAmC,QAAnC;AACH;;AAED,YAAM,WAAW,GAAG,IAAI,SAAJ,CAChB,CAAC,CAAC,QAAF,CACI;AACI,UAAA,EAAE,EAAE,UAAU,CAAC;AADnB,SADJ,EAII,UAAU,CAAC,UAJf,CADgB,EAMhB,UAAU,CAAC,YANK,CAApB;AAQA,aAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB;AAEA,QAAA,cAAc,CAAC;AACX,UAAA,KAAK,EAAE,UAAU,CAAC,KADP;AAEX,UAAA,QAAQ,EAAE,QAFC;AAGX,UAAA,WAAW,EAAE,UAAU,CAAC,WAHb;AAIX,UAAA,WAAW,EAAE;AAJF,SAAD,CAAd;AAMH,OA9BD,CA8BE,OAAO,CAAP,EAAU;AACR,QAAA,OAAO,CAAC,KAAR,CACI,iDADJ,EAEI,UAAU,CAAC,EAFf,EAEmB,CAFnB;AAGH;AACJ;AACJ;AAlFmC,CAAf,CAAzB","file":"dashboardPageModel.js","sourcesContent":["/**\n * State for the administration UI's main dashboard page.\n *\n * Model Attributes:\n *     supportData (string):\n *         An encoded payload containing information used to look up\n *         information on an active support contract for the server.\n *\n *     widgetsData (Array of object):\n *         Metadata on all the widgets rendered on the page. Each entry in\n *         the array is an object containing:\n *\n *         ``id``:\n *             The ID of the widget.\n *\n *         ``domID``:\n *             The DOM element ID of the widget's rendered HTML.\n *\n *         ``modelClass``:\n *             The namespaced name of the model class managing the widget's\n *             state.\n *\n *         ``modelAttrs``:\n *             The optional attributes passed to the widget model during\n *             initialization.\n *\n *         ``modelOptions``:\n *             The optional options passed to the widget model during\n *             initialization.\n *\n *         ``viewClass``:\n *             The namespaced name of the view class rendering the widget.\n *\n *         ``viewOptions``:\n *             The optional options passed to the widget view during\n *             initialization.\n */\nRB.Admin.DashboardPage = RB.Page.extend({\n    /**\n     * Return the default attribute values.\n     *\n     * Returns:\n     *     object:\n     *     The default attribute values.\n     */\n    defaults() {\n        return _.defaults(_.result(RB.Page.prototype.defaults), {\n            supportData: null,\n            widgetsData: [],\n        });\n    },\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        this.widgets = new Backbone.Collection();\n    },\n\n    /**\n     * Load the widgets from the serialized widget data.\n     *\n     * This will construct a model for each widget, and call the provided\n     * function to finish any UI-side setup.\n     *\n     * If any widgets fail to load, they'll be skipped.\n     *\n     * Args:\n     *     onWidgetLoaded (function):\n     *         The function to call for each widget. This takes the widget\n     *         model and serialized widget information as parameters.\n     */\n    loadWidgets(onWidgetLoaded) {\n        const classTypes = {};\n        const widgetsData = this.get('widgetsData');\n\n        this.widgets.reset();\n\n        for (let i = 0; i < widgetsData.length; i++) {\n            const widgetInfo = widgetsData[i];\n\n            try {\n                let ModelType = classTypes[widgetInfo.modelClass];\n                let ViewType = classTypes[widgetInfo.viewClass];\n\n                if (ModelType === undefined) {\n                    ModelType = Djblets.getObjectByName(widgetInfo.modelClass);\n                    classTypes[widgetInfo.modelClass] = ModelType;\n                }\n\n                if (ViewType === undefined) {\n                    ViewType = Djblets.getObjectByName(widgetInfo.viewClass);\n                    classTypes[widgetInfo.viewClass] = ViewType;\n                }\n\n                const widgetModel = new ModelType(\n                    _.defaults(\n                        {\n                            id: widgetInfo.id,\n                        },\n                        widgetInfo.modelAttrs),\n                    widgetInfo.modelOptions);\n\n                this.widgets.add(widgetModel);\n\n                onWidgetLoaded({\n                    domID: widgetInfo.domID,\n                    ViewType: ViewType,\n                    viewOptions: widgetInfo.viewOptions,\n                    widgetModel: widgetModel,\n                });\n            } catch (e) {\n                console.error(\n                    'Unable to render administration widget \"%s\": %s',\n                    widgetInfo.id, e);\n            }\n        }\n    },\n});\n"]}