{"version":3,"sources":["diffCommentModel.es6.js"],"names":[],"mappings":"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","file":"diffCommentModel.js","sourcesContent":["/**\n * Provides commenting functionality for diffs.\n *\n * A DiffComment represents a comment on a range of lines on either a\n * FileDiff or an interdiff consisting of two FileDiffs.\n *\n * Model Attributes:\n *     beginLineNum (number):\n *         The first line number in the range (0-indexed).\n *\n *     endLineNum (number):\n *         The last line number in the range (0-indexed).\n *\n *     fileDiff (RB.FileDiff):\n *         The FileDiff that the comment applies to.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff that the comment applies to.\n *\n *     interFileDiff (RB.FileDiff):\n *         The FileDiff at the end of an interdiff range that the comment\n *         applies to, if appropriate.\n *\n *         This attribute is mutually exclusive with ``baseFileDiffID``.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff at the end of an interdiff range that the\n *         comment applies to.\n *\n *         This attribute is mutually exclusive with ``baseFileDiffID``.\n *\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff in the cumulative diff that the\n *         comment is on.\n *\n *         This attribute is mutually exclusive with ``interFileDiffID``.\n */\nRB.DiffComment = RB.BaseComment.extend({\n    defaults: _.defaults({\n        beginLineNum: 0,\n        endLineNum: 0,\n        fileDiff: null,\n        fileDiffID: null,\n        interFileDiff: null,\n        interFileDiffID: null,\n        baseFileDiffID: null,\n    }, RB.BaseComment.prototype.defaults()),\n\n    rspNamespace: 'diff_comment',\n    expandedFields: ['filediff', 'interfilediff'],\n\n    attrToJsonMap: _.defaults({\n        baseFileDiffID: 'base_filediff_id',\n        beginLineNum: 'first_line',\n        fileDiffID: 'filediff_id',\n        interFileDiffID: 'interfilediff_id',\n        numLines: 'num_lines',\n    }, RB.BaseComment.prototype.attrToJsonMap),\n\n    serializedAttrs: [\n        'baseFileDiffID',\n        'beginLineNum',\n        'fileDiffID',\n        'interFileDiffID',\n        'numLines',\n    ].concat(RB.BaseComment.prototype.serializedAttrs),\n\n    deserializedAttrs: [\n        'beginLineNum',\n        'endLineNum'\n    ].concat(RB.BaseComment.prototype.deserializedAttrs),\n\n    serializers: _.defaults({\n        fileDiffID: RB.JSONSerializers.onlyIfUnloaded,\n        interFileDiffID: RB.JSONSerializers.onlyIfUnloadedAndValue,\n        baseFileDiffID: RB.JSONSerializers.onlyIfUnloadedAndValue,\n        numLines: function() {\n            return this.getNumLines();\n        }\n    }, RB.BaseComment.prototype.serializers),\n\n    /**\n     * Return the total number of lines the comment spans.\n     *\n     * Returns:\n     *     number:\n     *     The total number of lines for the comment.\n     */\n    getNumLines() {\n        return this.get('endLineNum') - this.get('beginLineNum') + 1;\n    },\n\n    /**\n     * Deserialize comment data from an API payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The data from the server.\n     *\n     * Returns:\n     *     object:\n     *     The model attributes to assign.\n     */\n    parseResourceData(rsp) {\n        const result = RB.BaseComment.prototype.parseResourceData.call(\n            this, rsp);\n\n        result.endLineNum = rsp.num_lines + result.beginLineNum - 1;\n\n        result.fileDiff = new RB.FileDiff(rsp.filediff, {\n            parse: true\n        });\n\n        if (rsp.interfilediff) {\n            result.interFileDiff = new RB.FileDiff(rsp.interfilediff, {\n                parse: true\n            });\n        }\n        return result;\n    },\n\n    /**\n     * Perform validation on the attributes of the model.\n     *\n     * This will check the range of line numbers to make sure they're\n     * a valid ordered range, along with the default comment validation.\n     *\n     * Args:\n     *     attrs (object):\n     *         The set of attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        /*\n         * XXX: Existing diff comments won't have the \"fileDiffID\" attribute\n         * populated when we load the object from the API. Since we don't do\n         * anything that needs that attribute unless we're trying to create a\n         * new diff comment, only check it if isNew().\n         */\n        if (this.isNew() && _.has(attrs, 'fileDiffID') && !attrs.fileDiffID) {\n            return RB.DiffComment.strings.INVALID_FILEDIFF_ID;\n        }\n\n        const hasBeginLineNum = _.has(attrs, 'beginLineNum');\n\n        if (hasBeginLineNum && attrs.beginLineNum < 0) {\n            return RB.DiffComment.strings.BEGINLINENUM_GTE_0;\n        }\n\n        const hasEndLineNum = _.has(attrs, 'endLineNum');\n\n        if (hasEndLineNum && attrs.endLineNum < 0) {\n            return RB.DiffComment.strings.ENDLINENUM_GTE_0;\n        }\n\n        if (hasBeginLineNum && hasEndLineNum &&\n            attrs.beginLineNum > attrs.endLineNum) {\n            return RB.DiffComment.strings.BEGINLINENUM_LTE_ENDLINENUM;\n        }\n\n        return RB.BaseComment.prototype.validate.apply(this, arguments);\n    }\n}, {\n    strings: {\n        INVALID_FILEDIFF_ID: 'fileDiffID must be a valid ID',\n        BEGINLINENUM_GTE_0: 'beginLineNum must be >= 0',\n        ENDLINENUM_GTE_0: 'endLineNum must be >= 0',\n        BEGINLINENUM_LTE_ENDLINENUM: 'beginLineNum must be <= endLineNum'\n    }\n});\n"]}