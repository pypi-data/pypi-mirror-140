{"version":3,"sources":["dummyReviewableView.es6.js"],"names":[],"mappings":"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","file":"dummyReviewableView.js","sourcesContent":["/**\n * A Review UI for file types which otherwise do not have one.\n *\n * Normally, file types that do not have a Review UI are not linked to one.\n * However, in the case of a file attachment with multiple revisions, if one of\n * those revisions is a non-reviewable type, the user can still navigate to\n * that page. This Review UI is used as a placeholder in that case--it shows\n * the header (with revision selector) and a message saying that this file type\n * cannot be shown.\n */\nRB.DummyReviewableView = RB.FileAttachmentReviewableView.extend({\n    commentBlockView: RB.AbstractCommentBlockView,\n\n    captionTableTemplate: _.template(\n        '<table><tr><%= items %></tr></table>'\n    ),\n\n    captionItemTemplate: _.template(dedent`\n        <td>\n         <h1 class=\"caption\"><%- caption %></h1>\n        </td>\n    `),\n\n    /**\n     * Render the view.\n     */\n    renderContent() {\n        const $header = $('<div/>')\n            .addClass('review-ui-header')\n            .prependTo(this.$el);\n\n        if (this.model.get('numRevisions') > 1) {\n            const $revisionLabel = $('<div id=\"revision_label\"/>')\n                .appendTo($header);\n\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $revisionLabel,\n                model: this.model,\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const $revisionSelector = $('<div id=\"attachment_revision_selector\" />')\n                .appendTo($header);\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $revisionSelector,\n                model: this.model,\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            const captionItems = [];\n\n            captionItems.push(this.captionItemTemplate({\n                caption: interpolate(\n                    gettext('%(caption)s (revision %(revision)s)'),\n                    {\n                        caption: this.model.get('caption'),\n                        revision: this.model.get('fileRevision'),\n                    },\n                    true)\n            }));\n\n            if (this.model.get('diffAgainstFileAttachmentID') !== null) {\n                captionItems.push(this.captionItemTemplate({\n                    caption: interpolate(\n                        gettext('%(caption)s (revision %(revision)s)'),\n                        {\n                            caption: this.model.get('diffCaption'),\n                            revision: this.model.get('diffRevision'),\n                        },\n                        true)\n                }));\n            }\n\n            $header.append(this.captionTableTemplate({\n                items: captionItems.join('')\n            }));\n        } else {\n            $('<h1 class=\"caption file-attachment-single-revision\">')\n                .text(this.model.get('caption'))\n                .appendTo($header);\n        }\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If 'base' is 0, a\n     * single revision is selected, If not, the diff between `base` and\n     * `tip` will be shown.\n     *\n     * Args:\n     *     revisions (array of number):\n     *         An array with two elements, representing the range of revisions\n     *         to display.\n     */\n    _onRevisionSelected(revisions) {\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label.\n        if (tip === 0) {\n            return;\n        }\n\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const revisionTip = revisionIDs[tip - 1];\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base - 1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        window.location.replace(redirectURL);\n    },\n});\n"]}