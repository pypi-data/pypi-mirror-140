{"version":3,"sources":["diffCommentBlockModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,gBAAH,GAAsB,EAAE,CAAC,oBAAH,CAAwB,MAAxB,CAA+B;AACjD,EAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW;AACjB,IAAA,UAAU,EAAE,IADK;AAEjB,IAAA,eAAe,EAAE,IAFA;AAGjB,IAAA,cAAc,EAAE,IAHC;AAIjB,IAAA,YAAY,EAAE,IAJG;AAKjB,IAAA,UAAU,EAAE,IALK;AAMjB,IAAA,SAAS,EAAE,IANM;AAOjB,IAAA,OAAO,EAAE;AAPQ,GAAX,EAQP,EAAE,CAAC,oBAAH,CAAwB,SAAxB,CAAkC,QAR3B,CADuC;;AAWjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,WAlBiD,yBAkBnC;AACV,WAAO,KAAK,GAAL,CAAS,YAAT,IAAyB,KAAK,GAAL,CAAS,cAAT,CAAzB,GAAoD,CAA3D;AACH,GApBgD;;AAsBjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,aAjCiD,yBAiCnC,EAjCmC,EAiC/B;AACd,WAAO,KAAK,GAAL,CAAS,QAAT,EAAmB,iBAAnB,CAAqC;AACxC,MAAA,EAAE,EAAE,EADoC;AAExC,MAAA,UAAU,EAAE,KAAK,GAAL,CAAS,YAAT,CAF4B;AAGxC,MAAA,eAAe,EAAE,KAAK,GAAL,CAAS,iBAAT,CAHuB;AAIxC,MAAA,YAAY,EAAE,KAAK,GAAL,CAAS,cAAT,CAJ0B;AAKxC,MAAA,UAAU,EAAE,KAAK,GAAL,CAAS,YAAT,CAL4B;AAMxC,MAAA,cAAc,EAAE,KAAK,GAAL,CAAS,gBAAT;AANwB,KAArC,CAAP;AAQH;AA1CgD,CAA/B,CAAtB","file":"diffCommentBlockModel.js","sourcesContent":["/**\n * Represents the comments on a region of a diff.\n *\n * DiffCommentBlock deals with creating and representing comments that exist\n * in a specific line range of a diff.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff that this comment is on.\n *\n *         This attribute is mutually exclusive with interFileDiffID.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff that this comment is on.\n *\n *     interFileDiffID (number):\n *         The ID of the inter-FileDiff that this comment is on, if any.\n *\n *         This attribute is mutually exclusive with baseFileDiffID.\n *\n *     beginLineNum (number):\n *         The first line number in the file that this comment is on.\n *\n *     endLineNUm (number):\n *         The last line number in the file that this comment is on.\n *\n *     $beginRow (jQuery):\n *         The first row in the diffviewer that this comment is on.\n *\n *     $endRow (jQuery):\n *         The last row in the diffviewer that this comment is on.\n *\n * See Also:\n *     :js:class:`RB.AbstractCommentBlock`:\n *         For the attributes defined by the base model.\n */\nRB.DiffCommentBlock = RB.AbstractCommentBlock.extend({\n    defaults: _.defaults({\n        fileDiffID: null,\n        interFileDiffID: null,\n        baseFileDiffID: null,\n        beginLineNum: null,\n        endLineNum: null,\n        $beginRow: null,\n        $endRow: null,\n    }, RB.AbstractCommentBlock.prototype.defaults),\n\n    /**\n     * Return the number of lines this comment block spans.\n     *\n     * Returns:\n     *     number:\n     *     The number of lines spanned by this comment.\n     */\n    getNumLines() {\n        return this.get('endLineNum') + this.get('beginLineNum') + 1;\n    },\n\n    /**\n     * Create a DiffComment for the given comment ID.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment to instantiate the model for.\n     *\n     * Returns:\n     *     RB.DiffComment:\n     *     The new comment model.\n     */\n    createComment(id) {\n        return this.get('review').createDiffComment({\n            id: id,\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: this.get('beginLineNum'),\n            endLineNum: this.get('endLineNum'),\n            baseFileDiffID: this.get('baseFileDiffID'),\n        });\n    },\n});\n"]}