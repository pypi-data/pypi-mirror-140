{"version":3,"sources":["postCommitView.es6.js"],"names":[],"mappings":"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","file":"postCommitView.js","sourcesContent":["/**\n * A view orchestrating post-commit review request creation.\n *\n * This brings together the BranchesView and CommitsView to provide a UI for\n * letting people browse through the committed revisions in the repository. When\n * the user clicks on one of the commits, it will create a new review request\n * using that commit's ID.\n */\nRB.PostCommitView = Backbone.View.extend({\n    className: 'post-commit',\n\n    loadErrorTemplate: _.template(dedent`\n        <div class=\"error\">\n         <p><%- errorLoadingText %></p>\n         <p class=\"error-text\">\n          <% _.each(errorLines, function(line) { %><%- line %><br /><% }); %>\n         </p>\n         <p>\n          <%- temporaryFailureText %>\n          <a href=\"#\" id=\"reload_<%- reloadID %>\"><%- tryAgainText %></a>\n         </p>\n        </div>\n    `),\n\n    events: {\n        'click #reload_branches': '_loadBranches',\n        'click #reload_commits': '_loadCommits',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $scrollContainer (jQuery):\n     *         The parent container handling all content scrolling.\n     */\n    initialize(options) {\n        const model = this.model;\n        const repository = model.get('repository');\n        const branches = repository.branches;\n\n        this._$scrollContainer = options.$scrollContainer;\n        this._$error = null;\n\n        // Set up the branch selector and bind it to the \"branch\" attribute\n        this._branchesView = new RB.BranchesView({\n            collection: branches,\n        });\n        this._branchesView.on('selected',\n                              branch => model.set('branch', branch));\n\n        this.listenTo(model, 'change:branch', this._onBranchChanged);\n\n        if (!branches.loaded) {\n            this._loadBranches();\n        }\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.PostCommitView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._rendered = true;\n\n        $('<div/>')\n            .addClass('branches section-header')\n            .append($('<span/>')\n                .text(gettext('Create from an existing commit on:')))\n            .append(this._branchesView.render().el)\n            .appendTo(this.$el);\n\n        if (this._commitsView) {\n            this.$el.append(this._commitsView.render().el);\n        }\n\n        return this;\n    },\n\n    /**\n     * Load the list of branches from the repository.\n     *\n     * If there's an error loading the branches, the branches selector and\n     * commits list will be hidden, and an error will be displayed along\n     * with the message from the server. The user will have the ability to\n     * try again.\n     */\n    _loadBranches() {\n        this._clearLoadError();\n\n        const branches = this.model.get('repository').branches;\n\n        branches.fetch({\n            success: () => {\n                branches.loaded = true;\n\n                this._branchesView.$el.show();\n\n                if (this._commitsView) {\n                    this._commitsView.$el.show();\n                }\n            },\n            error: (collection, xhr) => {\n                this._branchesView.$el.hide();\n\n                if (this._commitsView) {\n                    this._commitsView.$el.hide();\n                }\n\n                this._showLoadError('branches', xhr);\n            },\n        });\n    },\n\n    /**\n     * Load the list of commits from the repository.\n     *\n     * If there's an error loading the commits, the commits list will be\n     * hidden, and an error will be displayed along with the message from\n     * the server. The user will have the ability to try again.\n     */\n    _loadCommits() {\n        this._clearLoadError();\n\n        this._commitsCollection.fetch({\n            success: () => {\n                this._commitsView.$el.show();\n                this._commitsView.checkFetchNext();\n            },\n            error: (collection, xhr) => {\n                this._commitsView.$el.hide();\n                this._showLoadError('commits', xhr);\n            },\n        });\n    },\n\n    /**\n     * Clear any displayed error message.\n     */\n    _clearLoadError() {\n        if (this._$error) {\n            this._$error.remove();\n            this._$error = null;\n        }\n    },\n\n    /**\n     * Show an error message indicating a load failure.\n     *\n     * The message from the server will be displayed along with some\n     * helpful text and a link for trying the request again.\n     *\n     * Args:\n     *     reloadID (string):\n     *         An ID to use for the reload link element.\n     *\n     *     xhr (jqXHR):\n     *         The HTTP Request object.\n     */\n    _showLoadError(reloadID, xhr) {\n        this._clearLoadError();\n\n        this._$error = $(this.loadErrorTemplate({\n                errorLoadingText: gettext('There was an error loading information from this repository:'),\n                temporaryFailureText: gettext('This may be a temporary failure.'),\n                tryAgainText: gettext('Try again'),\n                errorLines: xhr.errorText.split('\\n'),\n                reloadID: reloadID,\n            }))\n            .appendTo(this.$el);\n    },\n\n    /**\n     * Callback for when the user chooses a different branch.\n     *\n     * Fetches a new list of commits starting from the tip of the selected\n     * branch.\n     *\n     * Args:\n     *     model (RB.PostCommitModel):\n     *         The data model.\n     *\n     *     branch (RB.RepositoryBranch):\n     *         The selected branch.\n     */\n    _onBranchChanged(model, branch) {\n        if (this._commitsView) {\n            this.stopListening(this._commitsCollection);\n            this._commitsView.remove();\n        }\n\n        this._commitsCollection =\n            this.model.get('repository').getCommits({\n                branch: branch.id,\n                start: branch.get('commit'),\n            });\n        this.listenTo(this._commitsCollection, 'create',\n                      this._onCreateReviewRequest);\n\n        this._commitsView = new RB.CommitsView({\n            collection: this._commitsCollection,\n            $scrollContainer: this._$scrollContainer,\n        });\n        this.listenTo(this._commitsView, 'loadError', xhr => {\n            this._showLoadError('commits', xhr);\n        });\n\n        if (this._rendered) {\n            this.$el.append(this._commitsView.render().el);\n        }\n\n        this._loadCommits();\n    },\n\n    /**\n     * Callback for when a commit is selected.\n     *\n     * Creates a new review request with the given commit ID and redirects the\n     * browser to it.\n     *\n     * Args:\n     *     commit (RB.RepositoryCommit):\n     *         The selected commit.\n     */\n    _onCreateReviewRequest(commit) {\n        if (this._createPending) {\n            // Do nothing\n            return;\n        }\n\n        this._createPending = true;\n        this._commitsView.setPending(commit);\n\n        const repository = this.model.get('repository');\n        const reviewRequest = new RB.ReviewRequest({\n            repository: repository.id,\n            localSitePrefix: repository.get('localSitePrefix')\n        });\n\n        reviewRequest.createFromCommit({\n            commitID: commit.id,\n            success: () => {\n                window.location = reviewRequest.get('reviewURL');\n            },\n            error: (model, xhr) => {\n                this._commitsView.setPending(null);\n                this._createPending = false;\n                alert(xhr.errorText);\n            },\n        });\n    },\n});\n"]}