{"version":3,"sources":["repositoryCommitModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,gBAAH,GAAsB,EAAE,CAAC,YAAH,CAAgB,MAAhB,CAAuB;AACzC,EAAA,QADyC,sBAC9B;AACP,WAAO,CAAC,CAAC,QAAF,CAAW;AACd,MAAA,UAAU,EAAE,IADE;AAEd,MAAA,UAAU,EAAE,IAFE;AAGd,MAAA,IAAI,EAAE,IAHQ;AAId,MAAA,MAAM,EAAE,IAJM;AAKd,MAAA,OAAO,EAAE,IALK;AAMd,MAAA,OAAO,EAAE,IANK;AAOd,MAAA,gBAAgB,EAAE;AAPJ,KAAX,EAQJ,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EARI,CAAP;AASH,GAXwC;AAazC,EAAA,YAAY,EAAE,SAb2B;AAezC,EAAA,iBAAiB,EAAE,CACf,YADe,EAEf,MAFe,EAGf,IAHe,EAIf,QAJe,EAKf,SALe,EAMf,SANe,EAOf,kBAPe,CAfsB;AAyBzC,EAAA,eAAe,EAAE,CACb,YADa,EAEb,MAFa,EAGb,IAHa,EAIb,QAJa,EAKb,SALa,EAMb,kBANa,CAzBwB;AAkCzC,EAAA,aAAa,EAAE;AACX,IAAA,UAAU,EAAE,aADD;AAEX,IAAA,gBAAgB,EAAE,oBAFP;AAGX,IAAA,OAAO,EAAE;AAHE,GAlC0B;AAwCzC,EAAA,aAAa,EAAE;AACX,IAAA,IAAI,EAAE,cAAA,KAAI;AAAA,aAAI,KAAI,GAAG,IAAI,IAAJ,CAAS,KAAT,CAAH,GAAoB,EAA5B;AAAA,KADC;AAEX,IAAA,OAAO,EAAE,iBAAA,OAAO;AAAA,aAAI,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,CAApB,EAAuB,CAAvB,CAAJ;AAAA;AAFL,GAxC0B;AA6CzC,EAAA,WAAW,EAAE;AACT,IAAA,IAAI,EAAE,cAAA,MAAI;AAAA,aAAI,MAAI,CAAC,QAAL,EAAJ;AAAA;AADD,GA7C4B;;AAiDzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,iBA5DyC,6BA4DvB,GA5DuB,EA4DlB;AACnB,QAAM,IAAI,GAAG,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,iBAA1B,CAA4C,IAA5C,CACT,IADS,EACH,GADG,CAAb;AAGA,IAAA,IAAI,CAAC,UAAL,GAAkB,GAAG,CAAC,IAAJ,IAAY,GAAG,CAAC,OAAhB,IAA2B,GAAG,CAAC,WAAjD;AAEA,WAAO,IAAP;AACH;AAnEwC,CAAvB,CAAtB","file":"repositoryCommitModel.js","sourcesContent":["/**\n * A commit in a repository.\n *\n * Model Attributes:\n *     accessible (boolean):\n *         Whether this commit appears accessible. On some version control\n *         systems, not all commits may be accessible due to ACLs or other\n *         policy mechanisms. In these cases, we shouldn't let people try to\n *         make a review request for them, because it will fail.\n *\n *     authorName (string):\n *         The name of the author of the commit.\n *\n *     date (Date):\n *         The date of the commit.\n *\n *     parent (string):\n *         The ID of the commit's parent.\n *\n *     message (string):\n *         The commit message or comment.\n *\n *     summary (string):\n *         The first line of the commit message.\n *\n *     reviewRequestURL (string):\n *         The URL of an existing review request for this commit, if one\n *         exists.\n */\nRB.RepositoryCommit = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            accessible: true,\n            authorName: null,\n            date: null,\n            parent: null,\n            message: null,\n            summary: null,\n            reviewRequestURL: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'commits',\n\n    deserializedAttrs: [\n        'authorName',\n        'date',\n        'id',\n        'parent',\n        'message',\n        'summary',\n        'reviewRequestURL'\n    ],\n\n    serializedAttrs: [\n        'authorName',\n        'date',\n        'id',\n        'parent',\n        'message',\n        'reviewRequestURL'\n    ],\n\n    attrToJsonMap: {\n        authorName: 'author_name',\n        reviewRequestURL: 'review_request_url',\n        summary: 'message'\n    },\n\n    deserializers: {\n        date: date => date ? new Date(date) : '',\n        summary: message => message.split('\\n', 1)[0]\n    },\n\n    serializers: {\n        date: date => date.toString()\n    },\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *          The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.accessible = rsp.date || rsp.message || rsp.author_name;\n\n        return data;\n    }\n});\n"]}