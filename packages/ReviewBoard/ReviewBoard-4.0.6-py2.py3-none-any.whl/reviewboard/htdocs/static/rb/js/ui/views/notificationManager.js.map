{"version":3,"sources":["notificationManager.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,mBAAH,GAAyB,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;AAC1C;AACJ;AACA;AACA;AACA;AACA;AACI,EAAA,UAP0C,wBAO7B;AACT,SAAK,UAAL,GAAkB,KAAlB;AACA,SAAK,aAAL,GAAqB,IAArB;AACH,GAVyC;;AAY1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,KArB0C,mBAqBlC;AACL,QAAM,YAAY,GAAG,EAAE,CAAC,mBAAH,CAAuB,YAA5C;AAEA,SAAK,UAAL,GACI,YAAY,KAAK,SAAjB,IACA,EAAE,CAAC,WAAH,CAAe,QAAf,CAAwB,GAAxB,CAA4B,4BAA5B,CAFJ;;AAIA,QAAI,KAAK,UAAL,IAAmB,CAAC,KAAK,4BAAL,EAAxB,EAA6D;AACzD,MAAA,YAAY,CAAC,iBAAb;AACH;AACH,GA/ByC;;AAiC1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,4BAzC0C,0CAyCX;AAC3B,WAAO,KAAK,UAAL,IACA,EAAE,CAAC,mBAAH,CAAuB,YAAvB,CAAoC,UAApC,KAAmD,SAD1D;AAEH,GA5CyC;;AA8C1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,YAxD0C,0BAwD3B;AACX,WAAO,KAAK,UAAL,IAAmB,KAAK,4BAAL,EAA1B;AACH,GA1DyC;;AA4D1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MAlF0C,kBAkFnC,OAlFmC,EAkF1B;AACZ,QAAI,CAAC,KAAK,UAAV,EAAsB;AAClB;AACH;;AAED,QAAI,KAAK,aAAT,EAAwB;AACpB,WAAK,aAAL,CAAmB,KAAnB;AACH;;AAED,IAAA,OAAO,CAAC,MAAR,CACI,OAAO,CAAC,cAAR,CAAuB,OAAvB,CADJ,EAEI,yDAFJ;AAIA,QAAM,YAAY,GAAG,IAAI,EAAE,CAAC,mBAAH,CAAuB,YAA3B,CACjB,OAAO,CAAC,KADS,EAEjB;AACI,MAAA,IAAI,EAAE,OAAO,CAAC,IADlB;AAEI,MAAA,IAAI,EAAE,OAAO,CAAC;AAFlB,KAFiB,CAArB;AAOA,SAAK,aAAL,GAAqB,YAArB;;AAEA,IAAA,YAAY,CAAC,OAAb,GAAuB,YAAW;AAC9B,UAAI,CAAC,CAAC,UAAF,CAAa,OAAO,CAAC,OAArB,CAAJ,EAAmC;AAC/B,QAAA,OAAO,CAAC,OAAR;AACH;;AAED,MAAA,YAAY,CAAC,KAAb;AACH,KAND;;AAQA,IAAA,CAAC,CAAC,KAAF,CAAQ;AAAA,aAAM,YAAY,CAAC,KAAb,EAAN;AAAA,KAAR,EACQ,EAAE,CAAC,mBAAH,CAAuB,2BAD/B;AAEF;AAlHwC,CAArB,EAmHtB;AACC,EAAA,QAAQ,EAAE,IADX;AAGC,EAAA,2BAA2B,EAAE,KAH9B;AAIC,EAAA,YAAY,EAAE,MAAM,CAAC,YAAP,IACA,MAAM,CAAC,eADP,IAEA,MAAM,CAAC;AANtB,CAnHsB,CAAzB;AA6HA,EAAE,CAAC,mBAAH,CAAuB,QAAvB,GAAkC,IAAI,EAAE,CAAC,mBAAP,EAAlC","file":"notificationManager.js","sourcesContent":["/**\n * A manager for desktop notifications.\n *\n * Manages the sending of desktop notifications to the user, including\n * checking if certain user conditions are met and deciding which form\n * of notification to send depending on the user's browser.\n *\n * For desktop notifications to be sent to the user, the user must have\n * allowed notifications in their browser and account settings.\n */\nRB.NotificationManager = Backbone.View.extend({\n    /**\n     * Initialize the notification manager.\n     *\n     * Sets the initial values used by the notification manager.\n     *\n     */\n    initialize() {\n        this._canNotify = false;\n        this._notification = null;\n    },\n\n    /**\n     * Set up the notification manager.\n     *\n     * This function will request permission to send desktop notifications\n     * if notifications are allowed in the users preferences, and the\n     * browser supports notifications.\n     *\n     * It must be called before attempting to send notifications.\n     */\n    setup() {\n       const Notification = RB.NotificationManager.Notification;\n\n       this._canNotify = (\n           Notification !== undefined &&\n           RB.UserSession.instance.get('enableDesktopNotifications'));\n\n       if (this._canNotify && !this._haveNotificationPermissions()) {\n           Notification.requestPermission();\n       }\n    },\n\n    /**\n     * Return whether we have permission to send notifications to the user.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the user has enabled notifications in their browser\n     *     Otherwise, ``false`` will be returned.\n     */\n    _haveNotificationPermissions() {\n        return this._canNotify &&\n               RB.NotificationManager.Notification.permission === 'granted';\n    },\n\n    /**\n     * Return whether or not we should send notifications to the user.\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if the user has enabled notifications in their user\n     *     settings, the users current browser supports notifications, and\n     *     the user has granted permission for notifications to the\n     *     browser. Otherwise, ``false`` will be returned.\n     */\n    shouldNotify() {\n        return this._canNotify && this._haveNotificationPermissions();\n    },\n\n    /**\n     * Send a notification with the options specified.\n     *\n     * Args:\n     *     options (object):\n     *         The notification options.\n     *\n     * Option Args:\n     *     title (string):\n     *         The title of the notification.\n     *\n     *     body (string):\n     *         The body of the notification.\n     *\n     *     iconURL (string):\n     *         The URL of the icon to be used in the notification. Icons are\n     *         only supported in some browsers.\n     *\n     *     onClick (function):\n     *         The callback for when a user clicks the notification. The caller\n     *         needn't close the notification with this\n     */\n    notify(options) {\n        if (!this._canNotify) {\n            return;\n        }\n\n        if (this._notification) {\n            this._notification.close();\n        }\n\n        console.assert(\n            options.hasOwnProperty('title'),\n            'RB.NotificationManager.notify requires \"title\" property');\n\n        const notification = new RB.NotificationManager.Notification(\n            options.title,\n            {\n                body: options.body,\n                icon: options.iconURL,\n            });\n\n        this._notification = notification;\n\n        notification.onclick = function() {\n            if (_.isFunction(options.onClick)) {\n                options.onClick();\n            }\n\n            notification.close();\n        };\n\n        _.delay(() => notification.close(),\n                RB.NotificationManager.NOTIFICATION_LIFETIME_MSECS);\n     }\n}, {\n    instance: null,\n\n    NOTIFICATION_LIFETIME_MSECS: 10000,\n    Notification: window.Notification ||\n                  window.mozNotification ||\n                  window.webkitNotification,\n});\n\n\nRB.NotificationManager.instance = new RB.NotificationManager();\n"]}