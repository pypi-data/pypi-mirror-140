{"version":3,"sources":["oauthTokensView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AAGZ,MAAM,mBAAmB,0EAAzB;AAGA;AACA;AACA;;AACA,MAAM,cAAc,GAAG,OAAO,CAAC,MAAR,CAAe,QAAf,CAAwB,MAAxB,CAA+B;AAClD,IAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW;AACjB,MAAA,MAAM,EAAE,EADS;AAEjB,MAAA,WAAW,EAAE,EAFI;AAGjB,MAAA,UAAU,EAAE;AAHK,KAAX,EAIP,OAAO,CAAC,MAAR,CAAe,QAAf,CAAwB,SAAxB,CAAkC,QAJ3B;AADwC,GAA/B,CAAvB;AASA;AACA;AACA;;AACA,MAAM,kBAAkB,GAAG,OAAO,CAAC,MAAR,CAAe,YAAf,CAA4B,MAA5B,CAAmC;AAC1D,IAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,+DADgD;AAK1D,IAAA,cAAc,EAAE;AACZ,gBAAU;AADE,KAL0C;;AAS1D;AACJ;AACA;AACI,IAAA,gBAZ0D,8BAYvC;AAAA;;AACf,MAAA,EAAE,CAAC,OAAH,CAAW;AACP,QAAA,GAAG,EAAE,KAAK,KAAL,CAAW,GAAX,CAAe,QAAf,CADE;AAEP,QAAA,MAAM,EAAE,QAFD;AAGP,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,SAAnB,CAAN;AAAA,SAHF;AAIP,QAAA,KAAK,EAAE,eAAA,GAAG;AAAA,iBAAI,KAAK,CAAC,GAAG,CAAC,SAAJ,IAAiB,mBAAlB,CAAT;AAAA;AAJH,OAAX;AAMH;AAnByD,GAAnC,CAA3B;AAuBA;AACA;AACA;;AACA,EAAA,EAAE,CAAC,eAAH,GAAqB,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;AACtC,IAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,0IAD4B;;AAStC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,UApBsC,sBAoB3B,OApB2B,EAoBlB;AAChB,WAAK,UAAL,GAAkB,IAAI,QAAQ,CAAC,UAAb,CAAwB,OAAO,CAAC,MAAhC,EAAwC;AACtD,QAAA,KAAK,EAAE;AAD+C,OAAxC,CAAlB;AAGH,KAxBqC;;AA0BtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,MAjCsC,oBAiC7B;AACL,WAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc;AACxB,QAAA,SAAS;AADe,OAAd,CAAd;AAGA,WAAK,MAAL,GAAc,KAAK,CAAL,CAAO,mBAAP,CAAd;AACA,WAAK,SAAL,GAAiB,IAAI,OAAO,CAAC,MAAR,CAAe,QAAnB,CAA4B;AACzC,QAAA,QAAQ,EAAE,kBAD+B;AAEzC,QAAA,KAAK,EAAE,IAAI,OAAO,CAAC,MAAR,CAAe,IAAnB,CAAwB,EAAxB,EAA4B;AAC/B,UAAA,UAAU,EAAE,KAAK;AADc,SAA5B;AAFkC,OAA5B,CAAjB;;AAOA,WAAK,SAAL,CACK,MADL,GACc,GADd,CAEK,SAFL,CAEe,KAAK,MAFpB;;AAIA,aAAO,IAAP;AACH;AAlDqC,GAArB,CAArB;AAsDC,CArGD","file":"oauthTokensView.js","sourcesContent":["(function() {\n\n\nconst xhrUnknownErrorText = gettext('An unexpected error occurred. Could not delete OAuth2 token.');\n\n\n/**\n * A model representing an OAuth token.\n */\nconst OAuthTokenItem = Djblets.Config.ListItem.extend({\n    defaults: _.defaults({\n        apiURL: '',\n        application: '',\n        showRemove: true,\n    }, Djblets.Config.ListItem.prototype.defaults),\n});\n\n\n/**\n * A view representing a single OAuthTokenItem.\n */\nconst OAuthTokenItemView = Djblets.Config.ListItemView.extend({\n    template: _.template(dedent`\n        <span class=\"config-token-name\"><%- application %></span>\n    `),\n\n    actionHandlers: {\n        'delete': '_onDeleteClicked',\n    },\n\n    /**\n     * Delete the OAuth2 token.\n     */\n    _onDeleteClicked() {\n        RB.apiCall({\n            url: this.model.get('apiURL'),\n            method: 'DELETE',\n            success: () => this.model.trigger('destroy'),\n            error: xhr => alert(xhr.errorText || xhrUnknownErrorText),\n        });\n    },\n});\n\n\n/**\n * A view for managing OAuth2 tokens.\n */\nRB.OAuthTokensView = Backbone.View.extend({\n    template: _.template(dedent`\n        <div class=\"oauth-token-list\">\n         <div class=\"djblets-l-config-forms-container -is-top-flush\">\n          <%- emptyText %>\n         </div>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         The view options.\n     *\n     * Option Args:\n     *     tokens (array of object):\n     *         The serialized token attributes.\n     */\n    initialize(options) {\n        this.collection = new Backbone.Collection(options.tokens, {\n            model: OAuthTokenItem,\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.OAuthTokensView:\n     *     This view.\n     */\n    render() {\n        this.$el.html(this.template({\n            emptyText: _`You do not have any OAuth2 tokens.`,\n        }));\n        this._$list = this.$('.oauth-token-list');\n        this._listView = new Djblets.Config.ListView({\n            ItemView: OAuthTokenItemView,\n            model: new Djblets.Config.List({}, {\n                collection: this.collection,\n            }),\n        });\n\n        this._listView\n            .render().$el\n            .prependTo(this._$list);\n\n        return this;\n    },\n});\n\n\n})();\n"]}