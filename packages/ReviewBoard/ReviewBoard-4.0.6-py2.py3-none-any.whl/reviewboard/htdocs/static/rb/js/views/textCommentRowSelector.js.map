{"version":3,"sources":["textCommentRowSelector.es6.js"],"names":[],"mappings":"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","file":"textCommentRowSelector.js","sourcesContent":["/*\n * Provides multi-line commenting capabilities for a diff.\n *\n * This tacks on commenting capabilities onto a DiffReviewableView's\n * element. It listens for mouse events that begin/end the creation of\n * a new comment.\n */\nRB.TextCommentRowSelector = Backbone.View.extend({\n    ghostCommentFlagTemplate: dedent`\n        <span class=\"commentflag ghost-commentflag\">\n         <span class=\"commentflag-shadow\"></span>\n         <span class=\"commentflag-inner\"></span>\n        </span>\n    `,\n\n    events: {\n        'copy': '_onCopy',\n        'mousedown': '_onMouseDown',\n        'mouseup': '_onMouseUp',\n        'mouseover': '_onMouseOver',\n        'mouseout': '_onMouseOut',\n        'touchstart': '_onTouchStart',\n        'touchend': '_onTouchEnd',\n        'touchmove': '_onTouchMove',\n        'touchcancel': '_onTouchCancel',\n    },\n\n    /**\n     * Initialize the commenting selector.\n     *\n     * Args:\n     *     options (object):\n     *         Options for initializing the view.\n     *\n     * Option Args:\n     *     reviewableView (RB.AbstractReviewableView):\n     *         The view that will create the comment based on the selection we\n     *         provide.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$begin = null;\n        this._$end = null;\n        this._beginLineNum = 0;\n        this._endLineNum = 0;\n        this._lastSeenIndex = 0;\n        this._selectionClass = null;\n\n        /*\n         * Support setting the clipboard only if we have the necessary\n         * functions. This may still be turned off later if we can't\n         * actually set the data.\n         */\n        this._supportsSetClipboard = (\n            window.getSelection !== undefined &&\n            window.Range !== undefined &&\n            window.Range.prototype.cloneContents !== undefined);\n\n        this._newlineChar = null;\n\n        this._$ghostCommentFlag = null;\n        this._$ghostCommentFlagCell = null;\n    },\n\n    /**\n     * Remove the selector from the DOM.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        this._$ghostCommentFlag.remove();\n    },\n\n    /**\n     * Render the selector.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$ghostCommentFlag = $(this.ghostCommentFlagTemplate)\n            .on({\n                mousedown: _.bind(this._onMouseDown, this),\n                mouseup: _.bind(this._onMouseUp, this),\n                mouseover: _.bind(this._onMouseOver, this),\n                mouseout: _.bind(this._onMouseOut, this)\n            })\n            .hide()\n            .appendTo('body');\n\n        return this;\n    },\n\n   /**\n    * Create a comment for a chunk of a diff.\n    *\n    * Args:\n    *     beginLineNum (number):\n    *         The first line number of the range being commented upon.\n    *\n    *     endLineNum (number):\n    *         The last line number of the range being commented upon.\n    *\n    *     beginNode (Element):\n    *         The element for the first row of the range being commented on.\n    *\n    *     endNode (Element):\n    *         The element of the last row of the range being commented on.\n    */\n    createComment(beginLineNum, endLineNum, beginNode, endNode) {\n        this._beginLineNum = beginLineNum;\n        this._endLineNum = endLineNum;\n        this._$begin = this._getActualLineNumCell($(beginNode)).parent();\n        this._$end = this._getActualLineNumCell($(endNode)).parent();\n\n        if (this._isLineNumCell(endNode)) {\n            this._end(this._getActualLineNumCell($(endNode)).parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Return the beginning and end rows for a given line number range.\n     *\n     * Args:\n     *      beginLineNum (number):\n     *         The first line number of the range.\n     *\n     *      endLineNum (number):\n     *         The last line number of the range.\n     *\n     *      minRowIndex (number):\n     *         A minimum row index to constrain the search to.\n     *\n     *         No rows with indices less than this will be searched.\n     *\n     * Returns:\n     *     array of Element:\n     *     If the row corresponding to ``beginLineNum`` cannot be found, the\n     *     return value with be ``null``.\n     *\n     *     Otherwise, this will be a 2 element array containing:\n     *\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``beginLineNum``.\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``endLineNum``, or ``null`` if it cannot be found.\n     */\n    getRowsForRange(beginLineNum, endLineNum, minRowIndex) {\n        const beginRowEl = this.findLineNumRow(beginLineNum, minRowIndex);\n\n        if (beginRowEl) {\n            const rowIndex = beginRowEl.rowIndex;\n            const endRowEl = (\n                endLineNum === beginLineNum\n                ? beginRowEl\n                : this.findLineNumRow(\n                    endLineNum,\n                    rowIndex,\n                    rowIndex + endLineNum - beginLineNum)\n            );\n\n            return [beginRowEl, endRowEl];\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Find the row in a table matching the specified line number.\n     *\n     * This will perform a binary search of the lines trying to find\n     * the matching line number. It will then return the row element,\n     * if found.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to find.\n     *\n     *     startRow (number):\n     *         The index of the row to start the search at.\n     *\n     *     endRow (number):\n     *         The index of the row to end the sarch at.\n     */\n    findLineNumRow(lineNum, startRow, endRow) {\n        const table = this.el;\n        const rowOffset = 1; // Get past the headers.\n        let row = null;\n\n        if (table.rows.length - rowOffset > lineNum) {\n            row = table.rows[rowOffset + lineNum];\n\n            // Account for the \"x lines hidden\" row.\n            if (row && this.getLineNum(row) === lineNum) {\n                return row;\n            }\n        }\n\n        if (startRow) {\n            // startRow already includes the offset, so we need to remove it.\n            startRow -= rowOffset;\n        }\n\n        let low = startRow || 0;\n        let high = Math.min(endRow || table.rows.length, table.rows.length);\n\n        if (endRow !== undefined && endRow < table.rows.length) {\n            // See if we got lucky and found it in the last row.\n            if (this.getLineNum(table.rows[endRow]) === lineNum) {\n                return table.rows[endRow];\n            }\n        } else if (row !== null) {\n            /*\n             * We collapsed the rows (unless someone mucked with the DB),\n             * so the desired row is less than the row number retrieved.\n             */\n            high = Math.min(high, rowOffset + lineNum);\n        }\n\n        // Binary search for this cell.\n        for (let i = Math.round((low + high) / 2); low < high - 1;) {\n            row = table.rows[rowOffset + i];\n\n            if (!row) {\n                // This should not happen, unless we miscomputed high.\n                high--;\n\n                /*\n                 * This won't do much if low + high is odd, but we'll catch\n                 * up on the next iteration.\n                 */\n                i = Math.round((low + high) / 2);\n                continue;\n            }\n\n            let value = this.getLineNum(row);\n\n            if (!value) {\n                /*\n                 * Bad luck, let's look around.\n                 *\n                 * We'd expect to find a value on the first try, but the\n                 * following makes sure we explore all rows.\n                 */\n                let found = false;\n\n                for (let j = 1; j <= (high - low) / 2; j++) {\n                    row = table.rows[rowOffset + i + j];\n\n                    if (row && this.getLineNum(row)) {\n                        i = i + j;\n                        found = true;\n                        break;\n                    } else {\n                        row = table.rows[rowOffset + i - j];\n\n                        if (row && this.getLineNum(row)) {\n                            i = i - j;\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (found) {\n                    value = this.getLineNum(row);\n                } else {\n                    return null;\n                }\n            }\n\n            // See if we can use simple math to find the row quickly.\n            const guessRowNum = lineNum - value + rowOffset + i;\n\n            if (guessRowNum >= 0 && guessRowNum < table.rows.length) {\n                const guessRow = table.rows[guessRowNum];\n\n                if (guessRow && this.getLineNum(guessRow) === lineNum) {\n                    // We found it using maths!\n                    return guessRow;\n                }\n            }\n\n            const oldHigh = high;\n            const oldLow = low;\n\n            if (value > lineNum) {\n                high = i;\n            } else if (value < lineNum) {\n                low = i;\n            } else {\n                return row;\n            }\n\n            /*\n             * Make sure we don't get stuck in an infinite loop. This can happen\n             * when a comment is placed in a line that isn't being shown.\n             */\n            if (oldHigh === high && oldLow === low) {\n                break;\n            }\n\n            i = Math.round((low + high) / 2);\n        }\n\n        // Well.. damn. Ignore this then.\n        return null;\n    },\n\n    /**\n     * Begin the selection of line numbers.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _begin($row) {\n        const lineNum = this.getLineNum($row[0]);\n\n        this._$begin = $row;\n        this._$end = $row;\n        this._beginLineNum = lineNum;\n        this._endLineNum = lineNum;\n        this._lastSeenIndex = $row[0].rowIndex;\n\n        $row.addClass('selected');\n        this.$el.disableSelection();\n    },\n\n    /**\n     * Finalize the selection and pop up a comment dialog.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _end($row) {\n        if (this._beginLineNum === this._endLineNum) {\n            /* See if we have a comment flag on the selected row. */\n            const $commentFlag = $row.find('.commentflag');\n\n            if ($commentFlag.length === 1) {\n                $commentFlag.click();\n                return;\n            }\n        }\n\n        /*\n         * Selection was finalized. Create the comment block\n         * and show the comment dialog.\n         */\n        this.options.reviewableView.createAndEditCommentBlock({\n            beginLineNum: this._beginLineNum,\n            endLineNum: this._endLineNum,\n            $beginRow: this._$begin,\n            $endRow: this._$end\n        });\n    },\n\n    /**\n     * Add a row to the selection.\n     *\n     * This will update the selection range and mark the rows as selected.\n     *\n     * This row is assumed to be the most recently selected row, and\n     * will mark the new beginning or end of the selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to add to the selection.\n     */\n    _addRow($row) {\n        /* We have an active selection. */\n        const lineNum = this.getLineNum($row[0]);\n\n        if (lineNum < this._beginLineNum) {\n            this._$begin = $row;\n            this._beginLineNum = lineNum;\n        } else if (lineNum > this._beginLineNum) {\n            this._$end = $row;\n            this._endLineNum = lineNum;\n        }\n\n        const min = Math.min(this._lastSeenIndex, $row[0].rowIndex);\n        const max = Math.max(this._lastSeenIndex, $row[0].rowIndex);\n\n        for (let i = min; i <= max; i++) {\n            $(this.el.rows[i]).addClass('selected');\n        }\n\n        this._lastSeenIndex = $row[0].rowIndex;\n    },\n\n    /**\n     * Highlight a row.\n     *\n     * This will highlight a row and show a ghost comment flag. This is done\n     * when the mouse hovers over the row.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to highlight.\n     */\n    _highlightRow($row) {\n        const $lineNumCell = $($row[0].cells[0]);\n\n        /* See if we have a comment flag in here. */\n        if ($lineNumCell.find('.commentflag').length === 0) {\n            this._$ghostCommentFlag\n                .css('top', $row.offset().top - 1)\n                .show()\n                .parent()\n                    .removeClass('selected');\n            this._$ghostCommentFlagCell = $lineNumCell;\n        }\n\n        $row.addClass('selected');\n    },\n\n    /**\n     * Remove old rows from the selection based on the most recent selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The most recent row selection.\n     */\n    _removeOldRows($row) {\n        const destRowIndex = $row[0].rowIndex;\n\n        if (destRowIndex >= this._$begin[0].rowIndex) {\n            if (this._lastSeenIndex !== this._$end[0].rowIndex &&\n                this._lastSeenIndex < destRowIndex) {\n                /*\n                 * We're removing from the top of the range. The beginning\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(this._lastSeenIndex, destRowIndex);\n                this._$begin = $row;\n                this._beginLineNum = this.getLineNum($row[0]);\n            } else {\n                /*\n                 * We're removing from the bottom of the selection. The end\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(destRowIndex,\n                                             this._lastSeenIndex);\n\n                this._$end = $row;\n                this._endLineNum = this.getLineNum($row[0]);\n            }\n\n            this._lastSeenIndex = destRowIndex;\n        }\n    },\n\n    /**\n     * Reset the selection information.\n     */\n    _reset() {\n        if (this._$begin) {\n            /* Reset the selection. */\n            this._removeSelectionClasses(this._$begin[0].rowIndex,\n                                         this._$end[0].rowIndex);\n\n            this._$begin = null;\n            this._$end = null;\n            this._beginLineNum = 0;\n            this._endLineNum = 0;\n            this._lastSeenIndex = 0;\n        }\n\n        this._$ghostCommentFlagCell = null;\n\n        /* Re-enable text selection on IE */\n        this.$el.enableSelection();\n    },\n\n    /**\n     * Remove the selection classes on a range of rows.\n     *\n     * Args:\n     *     startRowIndex (number):\n     *         The row index to start removing selection classes at.\n     *\n     *     endRowIndex (number):\n     *         The row index to stop removing selection classes at.\n     */\n    _removeSelectionClasses(startRowIndex, endRowIndex) {\n        for (let i = startRowIndex; i <= endRowIndex; i++) {\n            $(this.el.rows[i]).removeClass('selected');\n        }\n    },\n\n    /**\n     * Return whether a particular cell is a line number cell.\n     *\n     * Args:\n     *     cell (Element):\n     *         The cell to inspect.\n     */\n    _isLineNumCell(cell) {\n        return cell.tagName === 'TH' &&\n               cell.parentNode.getAttribute('line');\n    },\n\n    /**\n     * Return the actual cell node in the table.\n     *\n     * If the node specified is the ghost flag, this will return the\n     * cell the ghost flag represents.\n     *\n     * If this is a comment flag inside a cell, this will return the\n     * comment flag's parent cell\n     *\n     * Returns:\n     *     jQuery:\n     *     The row.\n     */\n    _getActualLineNumCell($node) {\n        if ($node.hasClass('commentflag')) {\n            if ($node[0] === this._$ghostCommentFlag[0]) {\n                return this._$ghostCommentFlagCell;\n            } else {\n                return $node.parent();\n            }\n        }\n\n        return $node;\n    },\n\n    /**\n     * Handler for when the user copies text in a column.\n     *\n     * This will begin the process of capturing any selected text in\n     * a column to the clipboard in a cross-browser way.\n     */\n    _onCopy(e) {\n        const clipboardData = e.originalEvent.clipboardData ||\n                              window.clipboardData;\n\n        if (clipboardData && this._supportsSetClipboard &&\n            this._copySelectionToClipboard(clipboardData)) {\n            /*\n             * Prevent the default copy action from occurring.\n             */\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    },\n\n    /**\n     * Find the pre tags and push them into the result array.\n     *\n     * Args:\n     *     result (array):\n     *         The array for which all matching ``<pre>`` elements will be\n     *         pushed into.\n     *\n     *     parentEl (Element):\n     *         The parent element to search under.\n     *\n     *     tdClass (string):\n     *         The class of ``<td>`` elements to search.\n     *\n     *     excludeTBodyClass (string):\n     *         The class of the ``<tbody>`` to exclude.\n     */\n    _findPreTags(result, parentEl, tdClass, excludeTBodyClass) {\n        for (let i = 0; i < parentEl.children.length; i++) {\n            const node = parentEl.children[i];\n\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName === 'PRE') {\n                    result.push(node);\n                } else if ((node.tagName !== 'TD' ||\n                            $(node).hasClass(tdClass)) &&\n                           (node.tagName !== 'TBODY' ||\n                            !$(node).hasClass(excludeTBodyClass))) {\n                    findPreTags(result, node, tdClass, excludeTBodyClass);\n                }\n            }\n        }\n    },\n\n    /**\n     * Copy the current selection to the clipboard.\n     *\n     * This will locate the desired text to copy, based on the selection\n     * range within the column where selection started. It will then\n     * extract the code from the ``<pre>`` tags and build a string to set in\n     * the clipboard.\n     *\n     * This requires support in the browser for setting clipboard contents\n     * on copy. If the browser does not support this, the default behavior\n     * will be used.\n     *\n     * Args:\n     *     clipboardData (DataTransfer):\n     *         The clipboard data from the copy event.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not we successfully set the clipboard data.\n     */\n    _copySelectionToClipboard(clipboardData) {\n        let excludeTBodyClass;\n        let tdClass;\n\n        if (this._newlineChar === null) {\n            /*\n             * Figure out what newline character should be used on this\n             * platform. Ideally, we'd determine this from some browser\n             * behavior, but it doesn't seem that can be consistently\n             * determined.\n             */\n            if (navigator.appVersion.includes('Win')) {\n                this._newlineChar = '\\r\\n';\n            } else {\n                this._newlineChar = '\\n';\n            }\n        }\n\n        if (this._selectedCellIndex === 3 || this.$el.hasClass('newfile')) {\n            tdClass = 'r';\n            excludeTBodyClass = 'delete';\n        } else {\n            tdClass = 'l';\n            excludeTBodyClass = 'insert';\n        }\n\n        const sel = window.getSelection();\n        const textParts = [];\n\n        for (let i = 0; i < sel.rangeCount; i++) {\n            const range = sel.getRangeAt(i);\n\n            if (range.collapsed) {\n                continue;\n            }\n\n            const nodes = [];\n            const doc = range.cloneContents();\n            findPreTags(nodes, doc, tdClass, excludeTBodyClass);\n\n            if (nodes.length > 0) {\n                /*\n                 * The selection spans multiple rows. Find the blocks of text\n                 * in the column we want, and copy those to the clipboard.\n                 */\n                for (let j = 0; j < nodes.length; j++) {\n                    textParts.push(nodes[j].textContent);\n                }\n            } else {\n                /*\n                 * If we're here, then we selected a subset of a single\n                 * cell. There was only one Range, and no <pre> tags as\n                 * part of it. We can just grab the text of the document.\n                 *\n                 * (We don't really need to break here, but we're going to\n                 * in order to be clear that we're completely done.)\n                 */\n                textParts.push($(doc).text());\n                break;\n            }\n        }\n\n        try {\n            clipboardData.setData('text', textParts.join(this._newlineChar));\n        } catch (e) {\n            /* Let the native behavior take over. */\n            this._supportsSetClipboard = false;\n            return false;\n        }\n\n        return true;\n    },\n\n    /**\n     * Handle the mouse down event, which begins selection for comments.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mousedown`` event.\n     */\n    _onMouseDown(e) {\n        if (this._selectionClass) {\n            this.$el.removeClass(this._selectionClass);\n        }\n\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._begin($(node.parentNode));\n        } else {\n            const $node = node.tagName === 'TD'\n                      ? $(node)\n                      : $(node).parentsUntil('tr', 'td');\n\n            if ($node.length > 0) {\n                this._selectionClass = 'selecting-col-' + $node[0].cellIndex;\n                this._selectedCellIndex = $node[0].cellIndex;\n                this.$el.addClass(this._selectionClass);\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse up event.\n     *\n     * This will finalize the selection of a range of lines, creating a new\n     * comment block and displaying the dialog.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseup`` event.\n     */\n    _onMouseUp(e) {\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._end(this._getActualLineNumCell($(node)).parent());\n            e.stopImmediatePropagation();\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle the mouse over event.\n     *\n     * This will update the selection, if there is one, to include this row\n     * in the range, and set the \"selected\" class on the new row.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseover`` event.\n     */\n    _onMouseOver(e) {\n        const $node = this._getActualLineNumCell($(e.target));\n        const $row = $node.parent();\n\n        if (this._isLineNumCell($node[0])) {\n            if (this._$begin) {\n                this._addRow($row);\n            } else {\n                this._highlightRow($row);\n            }\n        } else if (this._$ghostCommentFlagCell &&\n                   $node[0] !== this._$ghostCommentFlagCell[0]) {\n            $row.removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the mouse out event.\n     *\n     * This will remove any lines outside the new range from the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseout`` event.\n     */\n    _onMouseOut(e) {\n        const relTarget = e.relatedTarget;\n\n        if (relTarget !== this._$ghostCommentFlag[0]) {\n            this._$ghostCommentFlag.hide();\n            this._$ghostCommentFlagCell = null;\n        }\n\n        const $node = this._getActualLineNumCell($(e.target));\n\n        if (this._$begin) {\n            if (relTarget && this._isLineNumCell(relTarget)) {\n                this._removeOldRows($(relTarget.parentNode));\n            }\n        } else if ($node && this._isLineNumCell($node[0])) {\n            /*\n             * Opera seems to generate lots of spurious mouse-out\n             * events, which would cause us to get all sorts of\n             * errors in here unless we check the target above.\n             */\n            $node.parent().removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the beginning of a touch event.\n     *\n     * If the user is touching a line number, then this will begin tracking\n     * a new comment selection state, allowing them to either open an existing\n     * comment or create a new one.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchstart`` event.\n     */\n    _onTouchStart(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const $node = this._getActualLineNumCell($(firstTouch.target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._begin($node.parent());\n        }\n    },\n\n    /**\n     * Handle the end of a touch event.\n     *\n     * If the user ended on a line number, then this will either open an\n     * existing comment (if the result was a single-line selection on the\n     * line of an existing comment) or create a new comment spanning all\n     * selected lines.\n     *\n     * If they ended outside of the line numbers column, then this will\n     * simply reset the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchend`` event.\n     */\n    _onTouchEnd(e) {\n        const firstTouch = e.originalEvent.changedTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._end($node.parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle touch movement events.\n     *\n     * If selecting up or down line numbers, this will update the selection\n     * to span all rows from the original line number first touched and the\n     * line number currently being touched.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchmove`` event.\n     */\n    _onTouchMove(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null) {\n            const $row = $node.parent();\n\n            if (this._lastSeenIndex !== $row[0].rowIndex &&\n                this._isLineNumCell($node[0])) {\n                e.preventDefault();\n\n                this._removeOldRows($row);\n                this._addRow($row);\n            }\n        }\n    },\n\n    /**\n     * Handle touch cancellation events.\n     *\n     * This resets the line number selection. The user will need to begin the\n     * selection again.\n     */\n    _onTouchCancel() {\n        this._reset();\n    },\n\n    /**\n     * Return the line number for a row.\n     *\n     * Args:\n     *     row (Element):\n     *         The element to get the line number for.\n     *\n     * Returns:\n     *     number:\n     *     The line number.\n     */\n    getLineNum(row) {\n        return parseInt(row.getAttribute('line'), 10);\n    },\n});\n"]}