{"version":3,"sources":["diffViewerPageModel.es6.js"],"names":[],"mappings":"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","file":"diffViewerPageModel.js","sourcesContent":["/**\n * The model for the diff viewer page.\n *\n * This handles all attribute storage and diff context parsing needed to\n * display and update the diff viewer.\n *\n * Model Attributes:\n *     canDownloadDiff (boolean):\n *         Whether a diff file can be downloaded, given the current revision\n *         state.\n *\n *     filenamePatterns (Array):\n *         A list of filenames or patterns used to filter the diff viewer.\n *         This is optional.\n *\n *     numDiffs (number):\n *         The total number of diffs.\n */\nRB.DiffViewerPage = RB.ReviewablePage.extend({\n    defaults: _.defaults({\n        canDownloadDiff: false,\n        filenamePatterns: null,\n        numDiffs: 1,\n    }, RB.ReviewablePage.prototype.defaults),\n\n    /**\n     * Construct the page's instance.\n     *\n     * This defines child objects for managing state related to the page\n     * prior to parsing the provided attributes payload and initializing\n     * the instance.\n     */\n    constructor() {\n        this.commentsHint = new RB.DiffCommentsHint();\n        this.commits = new RB.DiffCommitCollection();\n        this.commitHistoryDiff = new RB.CommitHistoryDiffEntryCollection();\n        this.files = new RB.DiffFileCollection();\n        this.pagination = new RB.Pagination();\n        this.revision = new RB.DiffRevision();\n\n        RB.ReviewablePage.apply(this, arguments);\n    },\n\n    /**\n     * Initialize the page.\n     *\n     * This will begin listening for events on the page and set up default\n     * state.\n     */\n    initialize() {\n        RB.ReviewablePage.prototype.initialize.apply(this, arguments);\n\n        this.diffReviewables = new RB.DiffReviewableCollection([], {\n            reviewRequest: this.get('reviewRequest'),\n        });\n        this.diffReviewables.watchFiles(this.files);\n    },\n\n    /**\n     * Parse the data for the page.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload to parse.\n     *\n     * Returns:\n     *     object:\n     *     The returned attributes.\n     */\n    parse(rsp) {\n        return _.extend(this._parseDiffContext(rsp),\n                        RB.ReviewablePage.prototype.parse.call(this, rsp));\n    },\n\n    /**\n     * Load a new diff from the server.\n     *\n     * Args:\n     *     options (object):\n     *         The options for the diff to load.\n     *\n     * Option Args:\n     *     baseCommitID (number):\n     *         The primary key of the base commit to base the diff off of.\n     *\n     *     filenames (string):\n     *         A comma-separated string of filenames or filename patterns to\n     *         load.\n     *\n     *     page (number):\n     *         The page number to load. Defaults to the first page.\n     *\n     *     revision (number):\n     *         The base revision. If displaying an interdiff, this will be\n     *         the first revision in the range.\n     *\n     *     interdiffRevision (number):\n     *         The optional interdiff revision, representing the ending\n     *         revision in a range.\n     *\n     *     tipCommitID (number):\n     *         The primary key of the tip commit to base the diff off of.\n     */\n    loadDiffRevision(options={}) {\n        const reviewRequestURL = this.get('reviewRequest').url();\n        const queryData = [];\n\n        if (options.revision) {\n            queryData.push({\n                name: 'revision',\n                value: options.revision,\n            });\n        }\n\n        if (options.interdiffRevision) {\n            queryData.push({\n                name: 'interdiff-revision',\n                value: options.interdiffRevision,\n            });\n        } else {\n            if (options.baseCommitID) {\n                queryData.push({\n                    name: 'base-commit-id',\n                    value: options.baseCommitID,\n                });\n            }\n\n            if (options.tipCommitID) {\n                queryData.push({\n                    name: 'tip-commit-id',\n                    value: options.tipCommitID,\n                });\n            }\n        }\n\n        if (options.page && options.page !== 1) {\n            queryData.push({\n                name: 'page',\n                value: options.page,\n            });\n        }\n\n        if (options.filenamePatterns) {\n            queryData.push({\n                name: 'filenames',\n                value: options.filenamePatterns,\n            });\n        }\n\n        const url = Djblets.buildURL({\n            baseURL: `${reviewRequestURL}diff-context/`,\n            queryData: queryData,\n        });\n\n        $.ajax(url)\n            .done(rsp => this.set(this._parseDiffContext(rsp.diff_context)));\n    },\n\n    /**\n     * Parse context for a displayed diff.\n     *\n     * Args:\n     *     rsp (object):\n     *         The payload to parse.\n     *\n     * Returns:\n     *     object:\n     *     The returned attributes.\n     */\n    _parseDiffContext(rsp) {\n        if (rsp.comments_hint) {\n            this.commentsHint.set(this.commentsHint.parse(rsp.comments_hint));\n        }\n\n        if (rsp.files) {\n            this.files.reset(rsp.files, {parse: true});\n        }\n\n        if (rsp.pagination) {\n            this.pagination.set(this.pagination.parse(rsp.pagination));\n        }\n\n        if (rsp.revision) {\n            this.revision.set(this.revision.parse(rsp.revision));\n        }\n\n        this.commitHistoryDiff.reset(rsp.commit_history_diff || [],\n                                     {parse: true});\n\n        if (rsp.commits) {\n            /*\n             * The RB.DiffCommitListView listens for the reset event on the\n             * commits collection to trigger a render, so it must be updated\n             * **after** the commit history is updated.\n             */\n            this.commits.reset(rsp.commits, {parse: true});\n        }\n\n        return {\n            canDownloadDiff: (rsp.revision &&\n                              rsp.revision.interdiff_revision === null),\n            filenamePatterns: rsp.filename_patterns || null,\n            numDiffs: rsp.num_diffs || 0,\n        };\n    },\n});\n"]}