{"version":3,"sources":["collectionView.es6.js"],"names":[],"mappings":"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","file":"collectionView.js","sourcesContent":["/**\n * An abstract view for rendering a collection.\n *\n * This provides core, reusable functionality for any view that wants to render\n * a collection and respond to add/remove events. Types that extend this should\n * make sure to define the 'itemViewType' attribute, which will be the view\n * instantiated for each model in the collection.\n *\n * Items are added to the view's :js:attr:`RB.CollectionView.$container`\n * element. By default, this is the view's :js:attr:`RB.CollectionView.$el`\n * element. Subclasses that want to add to an inner child should explicitly\n * set ``$container`` to the appropriate element.\n */\nRB.CollectionView = Backbone.View.extend({\n    /**\n     * The view that will be instantiated for rendering items in the collection.\n     */\n    itemViewType: null,\n\n    /**\n     * Initialize the CollectionView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     collection (Backbone.Collection):\n     *         The collection to display.\n     *\n     *     itemViewType (function):\n     *         The constructor for the child views.\n     *\n     *     itemViewOptions (object):\n     *         Options to pass into the item view constructor.\n     */\n    initialize(options) {\n        if (options.itemViewType) {\n            this.itemViewType = options.itemViewType;\n        }\n\n        this.itemViewOptions = options.itemViewOptions || {};\n\n        const collection = options.collection;\n        this.collection = collection;\n        this.views = [];\n        this._viewsByModelID = {};\n\n        collection.each(this._onAdded, this);\n        this.listenTo(collection, 'add', this._onAdded);\n        this.listenTo(collection, 'remove', this._onRemoved);\n        this.listenTo(collection, 'sort', this._onSorted);\n        this.listenTo(collection, 'reset', this._onReset);\n\n        this.$container = this.$el;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will iterate over all the child views and render them as well.\n     *\n     * Returns:\n     *     RB.CollectionView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._rendered = true;\n\n        this.$container.empty();\n        this._addCollectionViews();\n\n        return this;\n    },\n\n    /**\n     * Add each view to the collection's container.\n     *\n     * This will iterate through all views and append them to the container.\n     */\n    _addCollectionViews() {\n        this.views.forEach(view => this.$container.append(view.render().el));\n    },\n\n    /**\n     * Add a view for an item in the collection.\n     *\n     * This will instantiate the itemViewType, and if the CollectionView has\n     * been rendered, render and append it as well.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to add.\n     */\n    _onAdded(item) {\n        console.assert(this.itemViewType,\n                       'itemViewType must be defined by the subclass');\n\n        const view = new this.itemViewType(_.defaults({\n            model: item,\n        }, this.itemViewOptions));\n\n        this.views.push(view);\n        this._viewsByModelID[item.cid] = view;\n\n        if (this._rendered) {\n            this.$container.append(view.render().el);\n        }\n    },\n\n    /**\n     * Remove a view for an item in the collection.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to remove.\n     */\n    _onRemoved(item) {\n        const toRemove = this._viewsByModelID[item.cid];\n\n        if (toRemove) {\n            delete this._viewsByModelID[item.cid];\n            this.views = _.without(this.views, toRemove);\n\n            if (this._rendered) {\n                toRemove.remove();\n            }\n        }\n    },\n\n    /**\n     * Respond to a change in the collection's sort order.\n     *\n     * This will detach all of the child views and re-add them in the new\n     * order.\n     */\n    _onSorted() {\n        let views = this.views;\n\n        /*\n         * See if the order of models has changed from our views. This may\n         * not be the case. An initial collection.fetch() will add each\n         * model and then emit a \"sort\", and this can end up causing us to\n         * rebuild our list of views unnecessarily (which can be problematic\n         * for, say, <option selected> items, as the 'selected' attribute\n         * will no longer be respected).\n         */\n        const models = this.collection.models;\n        const oldViews = this.views;\n        let orderChanged = false;\n\n        if (models.length === oldViews.length) {\n            for (let i = 0; i < oldViews.length; i++) {\n                if (oldViews[i].model !== models[i]) {\n                    orderChanged = true;\n                    break;\n                }\n            }\n        } else {\n            orderChanged = true;\n        }\n\n        if (!orderChanged) {\n            return;\n        }\n\n        this.views = this.collection.map(\n            model => this._viewsByModelID[model.cid]);\n\n        if (this._rendered) {\n            this.$container.children().detach();\n            this._addCollectionViews();\n        }\n    },\n\n    /**\n     * Handle the collection being reset.\n     *\n     * This will remove all existing views and create new ones for the new\n     * state of the collection.\n     */\n    _onReset() {\n        this.views.forEach(view => view.remove());\n        this.views = [];\n        this._viewsByModelID = {};\n        this.collection.each(this._onAdded, this);\n    },\n});\n"]}