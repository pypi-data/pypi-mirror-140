{"version":3,"sources":["reviewEntryModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,iBAAH,CAAqB,WAArB,GAAmC,EAAE,CAAC,iBAAH,CAAqB,KAArB,CAA2B,MAA3B,CAAkC;AACjE,EAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW;AACjB,IAAA,gBAAgB,EAAE,EADD;AAEjB,IAAA,MAAM,EAAE;AAFS,GAAX,EAGP,EAAE,CAAC,iBAAH,CAAqB,KAArB,CAA2B,SAA3B,CAAqC,QAH9B,CADuD;;AAMjE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,KAjBiE,iBAiB3D,KAjB2D,EAiBpD;AACT,QAAM,aAAa,GAAG,KAAK,CAAC,mBAAN,CAA0B,GAA1B,CAA8B,eAA9B,CAAtB;AACA,QAAM,UAAU,GAAG,KAAK,CAAC,UAAzB;AAEA,WAAO,CAAC,CAAC,MAAF,CACH,EAAE,CAAC,iBAAH,CAAqB,KAArB,CAA2B,SAA3B,CAAqC,KAArC,CAA2C,IAA3C,CAAgD,IAAhD,EAAsD,KAAtD,CADG,EAEH;AACI,MAAA,gBAAgB,EAAE,KAAK,CAAC,gBAD5B;AAEI,MAAA,MAAM,EAAE,aAAa,CAAC,YAAd,CAA2B,UAAU,CAAC,EAAtC,EAA0C;AAC9C,QAAA,UAAU,EAAE,UAAU,CAAC,UADuB;AAE9C,QAAA,OAAO,EAAE,UAAU,CAAC,OAF0B;AAG9C,kBAAU,UAAU,CAAC,MAHyB;AAI9C,QAAA,MAAM,EAAE,UAAU,CAAC;AAJ2B,OAA1C;AAFZ,KAFG,CAAP;AAWH;AAhCgE,CAAlC,CAAnC","file":"reviewEntryModel.js","sourcesContent":["/**\n * An entry on the review request page for reviews.\n *\n * This stores state needed for a review entry on a review request.\n *\n * See :js:class:`RB.ReviewRequestPage.Entry` for additional model attributes.\n *\n * Model Attributes:\n *     diffCommentsData (Array):\n *         An array of data for comments made on diffs. Each entry is an\n *         array in the format of ``[comment_id, key]``, where the key is\n *         a value for internal use that indicates the filediff or\n *         interfilediff range to use for loading diff fragments.\n *\n *     review (RB.Review):\n *         The review being represented by this entry.\n */\nRB.ReviewRequestPage.ReviewEntry = RB.ReviewRequestPage.Entry.extend({\n    defaults: _.defaults({\n        diffCommentsData: [],\n        review: null,\n    }, RB.ReviewRequestPage.Entry.prototype.defaults),\n\n    /**\n     * Parse attributes for the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes provided when constructing the model instance.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes used for the model instance.\n     */\n    parse(attrs) {\n        const reviewRequest = attrs.reviewRequestEditor.get('reviewRequest');\n        const reviewData = attrs.reviewData;\n\n        return _.extend(\n            RB.ReviewRequestPage.Entry.prototype.parse.call(this, attrs),\n            {\n                diffCommentsData: attrs.diffCommentsData,\n                review: reviewRequest.createReview(reviewData.id, {\n                    bodyBottom: reviewData.bodyBottom,\n                    bodyTop: reviewData.bodyTop,\n                    'public': reviewData.public,\n                    shipIt: reviewData.shipIt,\n                }),\n            });\n    },\n});\n"]}