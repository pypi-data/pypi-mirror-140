{"version":3,"sources":["baseCommentReplyModelTests.es6.js"],"names":[],"mappings":"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","file":"baseCommentReplyModelTests.js","sourcesContent":["suite('rb/resources/models/BaseCommentReply', function() {\n    let parentObject;\n    let model;\n\n    beforeEach(function() {\n        parentObject = new RB.BaseResource({\n            'public': true,\n        });\n\n        model = new RB.BaseCommentReply({\n            parentObject: parentObject,\n        });\n\n        expect(model.validate(model.attributes)).toBe(undefined);\n    });\n\n    describe('destroyIfEmpty', function() {\n        beforeEach(function() {\n            spyOn(model, 'destroy');\n        });\n\n        it('Destroying when text is empty', function() {\n            model.set('text', '');\n            model.destroyIfEmpty();\n            expect(model.destroy).toHaveBeenCalled();\n        });\n\n        it('Not destroying when text is not empty', function() {\n            model.set('text', 'foo');\n            model.destroyIfEmpty();\n            expect(model.destroy).not.toHaveBeenCalled();\n        });\n    });\n\n    describe('parse', function() {\n        beforeEach(function() {\n            model.rspNamespace = 'my_comment';\n        });\n\n        it('API payloads', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_comment: {\n                    id: 42,\n                    text: 'foo',\n                    text_type: 'markdown',\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.id).toBe(42);\n            expect(data.text).toBe('foo');\n            expect(data.richText).toBe(true);\n        });\n    });\n\n    describe('toJSON', function() {\n        describe('force_text_type field', function() {\n            it('With value', function() {\n                model.set('forceTextType', 'html');\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.force_text_type).toBe(undefined);\n            });\n        });\n\n        describe('include_text_types field', function() {\n            it('With value', function() {\n                model.set('includeTextTypes', 'html');\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe(undefined);\n            });\n        });\n\n        describe('reply_to_id field', function() {\n            it('When loaded', function() {\n                model.set({\n                    replyToID: 10,\n                    loaded: true,\n                });\n                const data = model.toJSON();\n                expect(data.reply_to_id).toBe(undefined);\n            });\n\n            it('When not loaded', function() {\n                model.set({\n                    replyToID: 10,\n                    loaded: false,\n                });\n                const data = model.toJSON();\n                expect(data.reply_to_id).toBe(10);\n            });\n        });\n\n        describe('richText field', function() {\n            it('With true', function() {\n                model.set('richText', true);\n                const data = model.toJSON();\n                expect(data.text_type).toBe('markdown');\n            });\n\n            it('With false', function() {\n                model.set('richText', false);\n                const data = model.toJSON();\n                expect(data.text_type).toBe('plain');\n            });\n        });\n\n        describe('text field', function() {\n            it('With value', function() {\n                model.set('text', 'foo');\n                const data = model.toJSON();\n                expect(data.text).toBe('foo');\n            });\n        });\n    });\n\n    describe('validate', function() {\n        describe('parentObject', function() {\n            it('With value', function() {\n                expect(model.validate({\n                    parentObject: parentObject,\n                })).toBe(undefined);\n            });\n\n            it('Unset', function() {\n                expect(model.validate({\n                    parentObject: null,\n                })).toBe(RB.BaseResource.strings.UNSET_PARENT_OBJECT);\n            });\n        });\n    });\n});\n"]}