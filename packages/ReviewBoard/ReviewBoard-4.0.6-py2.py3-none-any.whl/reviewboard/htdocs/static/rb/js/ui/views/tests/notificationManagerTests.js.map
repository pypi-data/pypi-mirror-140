{"version":3,"sources":["notificationManagerTests.es6.js"],"names":[],"mappings":";;AAAA,KAAK,CAAC,yCAAD,EAA4C,YAAW;AACxD,MAAM,QAAQ,GAAG,EAAE,CAAC,mBAAH,CAAuB,QAAxC;AACA,MAAI,gBAAJ;;AAEA,MAAM,YAAY,GAAG,SAAf,YAAe,CAAS,KAAT,EAAgB,OAAhB,EAAyB;AAC1C,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,OAAL,GAAe,OAAf;;AACA,SAAK,KAAL,GAAa,YAAW,CAAE,CAA1B;AACH,GAJD;;AAKA,EAAA,YAAY,CAAC,iBAAb,GAAiC,YAAW;AACxC,IAAA,YAAY,CAAC,UAAb,GAA0B,SAA1B;AACH,GAFD;;AAIA,EAAA,UAAU,CAAC,YAAW;AAClB,IAAA,gBAAgB,GAAG,EAAE,CAAC,mBAAH,CAAuB,YAA1C;AACA,IAAA,EAAE,CAAC,mBAAH,CAAuB,YAAvB,GAAsC,YAAtC;AAEA,IAAA,EAAE,CAAC,WAAH,CAAe,QAAf,CAAwB,GAAxB,CAA4B,4BAA5B,EAA0D,IAA1D;AAEA,IAAA,QAAQ,CAAC,KAAT;AAEA,IAAA,MAAM,CAAC,YAAY,CAAC,UAAd,CAAN,CAAgC,IAAhC,CAAqC,SAArC;AACH,GATS,CAAV;AAWA,EAAA,SAAS,CAAC,YAAW;AACjB,IAAA,EAAE,CAAC,mBAAH,CAAuB,YAAvB,GAAsC,gBAAtC;AACH,GAFQ,CAAT;AAIA,EAAA,QAAQ,CAAC,sBAAD,EAAyB,YAAW;AACxC,IAAA,EAAE,CAAC,oBAAD,EAAuB,YAAW;AAChC,MAAA,QAAQ,CAAC,MAAT,CAAgB;AACZ,QAAA,KAAK,EAAE,MADK;AAEZ,QAAA,IAAI,EAAE;AAFM,OAAhB;AAKA,UAAM,YAAY,GAAG,QAAQ,CAAC,aAA9B;AACA,MAAA,MAAM,CAAC,YAAD,CAAN,CAAqB,GAArB,CAAyB,IAAzB,CAA8B,IAA9B;AACA,MAAA,MAAM,CAAC,YAAY,CAAC,KAAd,CAAN,CAA2B,IAA3B,CAAgC,MAAhC;AACA,MAAA,MAAM,CAAC,YAAY,CAAC,OAAb,CAAqB,IAAtB,CAAN,CAAkC,IAAlC,CAAuC,gBAAvC;AACH,KAVC,CAAF;AAYA,IAAA,EAAE,CAAC,eAAD,EAAkB,YAAW;AAC3B,MAAA,QAAQ,CAAC,UAAT,GAAsB,IAAtB;AACA,MAAA,KAAK,CAAC,QAAD,EAAW,8BAAX,CAAL,CACK,GADL,CACS,WADT,CACqB,IADrB;AAGA,MAAA,MAAM,CAAC,QAAQ,CAAC,YAAT,EAAD,CAAN,CAAgC,IAAhC,CAAqC,IAArC;AACH,KANC,CAAF;AASA,IAAA,EAAE,CAAC,2CAAD,EAA8C,YAAW;AACvD,MAAA,QAAQ,CAAC,UAAT,GAAsB,KAAtB;AACA,MAAA,KAAK,CAAC,QAAD,EAAW,8BAAX,CAAL,CACK,GADL,CACS,WADT,CACqB,IADrB;AAGA,MAAA,MAAM,CAAC,QAAQ,CAAC,YAAT,EAAD,CAAN,CAAgC,IAAhC,CAAqC,KAArC;AACH,KANC,CAAF;AAQC,IAAA,EAAE,CAAC,8CAAD,EAAiD,YAAW;AAC3D,MAAA,QAAQ,CAAC,UAAT,GAAsB,IAAtB;AACA,MAAA,KAAK,CAAC,QAAD,EAAW,8BAAX,CAAL,CACK,GADL,CACS,WADT,CACqB,KADrB;AAGA,MAAA,MAAM,CAAC,QAAQ,CAAC,YAAT,EAAD,CAAN,CAAgC,IAAhC,CAAqC,KAArC;AACH,KANE,CAAF;AAOJ,GArCO,CAAR;AAsCH,CAlEI,CAAL","file":"notificationManagerTests.js","sourcesContent":["suite('rb/ui/managers/NotificationManagerModel', function() {\n    const instance = RB.NotificationManager.instance;\n    let origNotification;\n\n    const Notification = function(title, options) {\n        this.title = title;\n        this.options = options;\n        this.close = function() {};\n    };\n    Notification.requestPermission = function() {\n        Notification.permission = 'granted';\n    };\n\n    beforeEach(function() {\n        origNotification = RB.NotificationManager.Notification;\n        RB.NotificationManager.Notification = Notification;\n\n        RB.UserSession.instance.set('enableDesktopNotifications', true);\n\n        instance.setup();\n\n        expect(Notification.permission).toBe('granted');\n    });\n\n    afterEach(function() {\n        RB.NotificationManager.Notification = origNotification;\n    });\n\n    describe('Notification Manager', function() {\n        it('Calls external API', function() {\n            instance.notify({\n                title: 'Test',\n                body: 'This is a test',\n            });\n\n            const notification = instance._notification;\n            expect(notification).not.toBe(null);\n            expect(notification.title).toBe('Test');\n            expect(notification.options.body).toBe('This is a test');\n        });\n\n        it('Should notify', function() {\n            instance._canNotify = true;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(true);\n\n            expect(instance.shouldNotify()).toBe(true);\n        });\n\n\n        it('Should not notify due to user permissions', function() {\n            instance._canNotify = false;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(true);\n\n            expect(instance.shouldNotify()).toBe(false);\n        });\n\n         it('Should not notify due to browser permissions', function() {\n            instance._canNotify = true;\n            spyOn(instance, '_haveNotificationPermissions')\n                .and.returnValue(false);\n\n            expect(instance.shouldNotify()).toBe(false);\n        });\n    });\n});\n"]}