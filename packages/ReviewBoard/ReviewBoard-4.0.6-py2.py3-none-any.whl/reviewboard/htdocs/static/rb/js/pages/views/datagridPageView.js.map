{"version":3,"sources":["datagridPageView.es6.js"],"names":[],"mappings":"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","file":"datagridPageView.js","sourcesContent":["/**\n * Manages the UI for the page containing a main datagrid.\n *\n * This renders the datagrid, handles events, and allows for multi-row\n * actions.\n */\nRB.DatagridPageView = RB.PageView.extend({\n    RELOAD_INTERVAL_MS: 5 * 60 * 1000,\n\n    /* The View class to use for an actions menu, if any. */\n    actionsViewType: null,\n\n    events: {\n        'change tbody input[data-checkbox-name=select]': '_onRowSelected',\n        'reloaded .datagrid-wrapper': '_setupDatagrid',\n    },\n\n    /**\n     * Initialize the datagrid page.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     periodicReload (boolean):\n     *         Whether to periodically reload the contents of the datagrid.\n     */\n    initialize(options={}) {\n        RB.PageView.prototype.initialize.call(this, options);\n\n        this.periodicReload = !!options.periodicReload;\n\n        this._reloadTimer = null;\n        this._datagrid = null;\n        this._$wrapper = null;\n        this._$datagridBody = null;\n        this._$datagridBodyContainer = null;\n        this._menuShown = false;\n    },\n\n    /**\n     * Render the datagrid page view, and begins listening for events.\n     */\n    renderPage() {\n        RB.InfoboxManagerView.getInstance().setPositioning(\n            RB.ReviewRequestInfoboxView,\n            {\n                /*\n                 * The order on the side matters. If the Summary column is\n                 * on the left-hand side of the datagrid, and \"l\" is first,\n                 * it can end up taking priority, even if \"L\" was a better\n                 * fit (since, if the infobox would need to be pushed a bit\n                 * to fit on screen, it will prefer \"l\"). If the column is on\n                 * the right-hand side of the dashboard, it will prefer \"l\",\n                 * given the room available (taking into account the sidebar).\n                 *\n                 * So \"L\" is a better priority for the common use, and \"l\"\n                 * works well as a fallback.\n                 */\n                side: 'Ll',\n                LDistance: 300,\n                lDistance: 20,\n                yOffset: -20,\n            });\n\n        if (this.actionsViewType) {\n            this._setupActionsDrawer();\n        }\n\n        this.listenTo(this.model, 'refresh', () => this._reload(false));\n\n        this._setupDatagrid();\n\n        if (this.periodicReload) {\n            this._startReloadTimer();\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle page resizes.\n     *\n     * This will update the datagrid to fit on the page after a resize.\n     */\n    onResize() {\n        if (this._datagrid !== null) {\n            this._datagrid.resizeToFit();\n        }\n    },\n\n    /**\n     * Set up the actions pane view.\n     */\n    _setupActionsDrawer() {\n        const drawer = new RB.DrawerView();\n        this.setDrawer(drawer);\n\n        this._actionsView = new this.actionsViewType({\n            model: this.model,\n            datagridView: this,\n        });\n        this._actionsView.render().$el.appendTo(drawer.$content);\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            const showMenu = (count > 0);\n\n            if (showMenu === this._menuShown) {\n                return;\n            }\n\n            if (showMenu) {\n                this._showActions();\n\n                /*\n                 * Don't reload the datagrid while the user is\n                 * preparing any actions.\n                 */\n                this._stopReloadTimer();\n            } else {\n                this._hideActions();\n\n                if (this.periodicReload) {\n                    this._startReloadTimer();\n                }\n            }\n\n            this._menuShown = showMenu;\n        });\n    },\n\n    /**\n     * Set up parts of the datagrid.\n     *\n     * This will reference elements inside the datagrid and set up UI.\n     * This is called when first rendering the datagrid, and any time\n     * the datagrid is reloaded from the server.\n     */\n    _setupDatagrid() {\n        this._$wrapper = this.$('#content_container');\n        this._$datagrid = this._$wrapper.find('.datagrid-wrapper');\n        this._datagrid = this._$datagrid.data('datagrid');\n        this._$main = this._$wrapper.find('.datagrid-main');\n\n        this.$('time.timesince').timesince();\n        this.$('.user').user_infobox();\n        this.$('.bugs').find('a').bug_infobox();\n        this.$('.review-request-link').review_request_infobox();\n\n        this.model.clearSelection();\n\n        _.each(this.$('input[data-checkbox-name=select]:checked'),\n               checkbox => this.model.select($(checkbox).data('object-id')));\n\n        if (RB.UserSession.instance.get('authenticated')) {\n            this._starManager = new RB.StarManagerView({\n                model: new RB.StarManager(),\n                el: this._$main,\n                datagridMode: true,\n            });\n        }\n\n        this._$datagrid\n            .on('reloaded', this._setupDatagrid.bind(this))\n            .on('datagridDisplayModeChanged',\n                this._reselectBatchCheckboxes.bind(this));\n        this._datagrid.resizeToFit();\n    },\n\n    /**\n     * Re-select any checkboxes that are part of the current selection.\n     *\n     * When the datagrid transitions between mobile and desktop modes,\n     * we use two different versions of the table, meaning two sets of\n     * checkboxes. This function updates the checkbox selection based on the\n     * currently selected items.\n     */\n    _reselectBatchCheckboxes() {\n        const checkboxMap = {};\n\n        this.$('input[data-checkbox-name=select]').each((idx, checkboxEl) => {\n            if (checkboxEl.checked) {\n                checkboxEl.checked = false;\n            }\n\n            checkboxMap[checkboxEl.dataset.objectId] = checkboxEl;\n        });\n\n        this.model.selection.each(selection => {\n            checkboxMap[selection.id].checked = true;\n        });\n    },\n\n    /**\n     * Show the actions drawer.\n     */\n    _showActions() {\n        this.drawer.show();\n    },\n\n    /**\n     * Hide the actions drawer.\n     */\n    _hideActions() {\n        this.drawer.hide();\n    },\n\n    /**\n     * Start the reload timer, if it's not already running.\n     */\n    _startReloadTimer() {\n        if (!this._reloadTimer) {\n            this._reloadTimer = setInterval(this._reload.bind(this),\n                                            this.RELOAD_INTERVAL_MS);\n        }\n    },\n\n    /**\n     * Stop the reload timer, if it's running.\n     */\n    _stopReloadTimer() {\n        if (this._reloadTimer) {\n            window.clearInterval(this._reloadTimer);\n            this._reloadTimer = null;\n        }\n    },\n\n    /**\n     * Reload the datagrid contents.\n     *\n     * This may be called periodically to reload the contents of the\n     * datagrid, if specified by the subclass.\n     *\n     * Args:\n     *     periodicReload (boolean):\n     *         Whether the datagrid should reload periodically.\n     */\n    _reload(periodicReload) {\n        const $editCols = this.$('.edit-columns');\n\n        if (periodicReload === false) {\n            this._stopReloadTimer();\n        }\n\n        this.model.clearSelection();\n\n        $editCols\n            .width($editCols.width() - $editCols.getExtents('b', 'lr'))\n            .html('<span class=\"fa fa-spinner fa-pulse\"></span>');\n\n        this._$wrapper.load(window.location + ' #content_container', () => {\n            this.$('.datagrid-wrapper').datagrid();\n\n            this._setupDatagrid();\n\n            if (periodicReload !== false) {\n                this._startReloadTimer();\n            }\n        });\n    },\n\n    /**\n     * Handler for when a row is selected.\n     *\n     * Records the row for any actions the user may wish to invoke.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the callback.\n     */\n    _onRowSelected(e) {\n        const $checkbox = $(e.target);\n        const objectID = $checkbox.data('object-id');\n\n        if ($checkbox.prop('checked')) {\n            this.model.select(objectID);\n        } else {\n            this.model.unselect(objectID);\n        }\n    },\n});\n"]}