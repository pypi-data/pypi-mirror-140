{"version":3,"sources":["repositorySelectionView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA,EAAE,CAAC,uBAAH,GAA6B,EAAE,CAAC,cAAH,CAAkB,MAAlB,CAAyB;AAClD,EAAA,OAAO,EAAE,IADyC;AAElD,EAAA,SAAS,EAAE,yCAFuC;AAGlD,EAAA,YAAY,EAAE,EAAE,CAAC,cAHiC;AAKlD,EAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,mkBALwC;AA0BlD,EAAA,MAAM,EAAE;AACJ,uCAAmC;AAD/B,GA1B0C;;AA8BlD;AACJ;AACA;AACI,EAAA,UAjCkD,wBAiCrC;AACT,IAAA,EAAE,CAAC,cAAH,CAAkB,SAAlB,CAA4B,UAA5B,CAAuC,KAAvC,CAA6C,IAA7C,EAAmD,SAAnD;AAEA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,aAAL,GAAqB,KAArB;AAEA,SAAK,QAAL,CAAc,KAAK,UAAnB,EAA+B,UAA/B,EAA2C,KAAK,qBAAhD;AACH,GAxCiD;;AA0ClD;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MAjDkD,oBAiDzC;AACL,SAAK,GAAL,CAAS,IAAT,CAAc,KAAK,QAAL,CAAc;AACxB,MAAA,iBAAiB,yBADO;AAExB,MAAA,WAAW;AAFa,KAAd,CAAd;AAKA,SAAK,UAAL,GAAkB,KAAK,CAAL,CAAO,4CAAP,CAAlB;AAEA,SAAK,WAAL,GAAmB,KAAK,CAAL,CAAO,2BAAP,CAAnB;AAEA,IAAA,EAAE,CAAC,cAAH,CAAkB,SAAlB,CAA4B,MAA5B,CAAmC,KAAnC,CAAyC,IAAzC,EAA+C,SAA/C;AAEA,WAAO,IAAP;AACH,GA9DiD;;AAgElD;AACJ;AACA;AACI,EAAA,QAnEkD,sBAmEvC;AAAA;;AACP,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAI,EAAI;AACvB,UAAI,IAAI,CAAC,KAAL,KAAe,KAAI,CAAC,SAAxB,EAAmC;AAC/B,QAAA,IAAI,CAAC,GAAL,CAAS,WAAT,CAAqB,QAArB;AACH;AACJ,KAJD;AAMA,SAAK,SAAL,GAAiB,IAAjB;AAEA,SAAK,OAAL,CAAa,UAAb,EAAyB,IAAzB;AACH,GA7EiD;;AA+ElD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,qBAzFkD,iCAyF5B,IAzF4B,EAyFtB;AACxB,SAAK,SAAL,GAAiB,IAAjB;AAEA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAI,EAAI;AACvB,UAAI,IAAI,CAAC,KAAL,KAAe,IAAnB,EAAyB;AACrB,QAAA,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,YAAlB;AACH,OAFD,MAEO;AACH,QAAA,IAAI,CAAC,GAAL,CAAS,WAAT,CAAqB,YAArB;AACH;AACJ,KAND;AAQA,SAAK,OAAL,CAAa,UAAb,EAAyB,IAAzB;AACH,GArGiD;;AAuGlD;AACJ;AACA;AACA;AACA;AACI,EAAA,gBA5GkD,8BA4G/B;AACf,QAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,GAAjB,GAAuB,WAAvB,EAAnB;;AAEA,SAAK,KAAL,CAAW,OAAX,CAAmB,UAAA,IAAI,EAAI;AACvB,MAAA,IAAI,CAAC,GAAL,CAAS,UAAT,CAAoB,IAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,UAAvB,MAAuC,CAAC,CAA5D;AACH,KAFD;AAGH;AAlHiD,CAAzB,CAA7B","file":"repositorySelectionView.js","sourcesContent":["/**\n * A view for selecting a repository from a collection.\n */\nRB.RepositorySelectionView = RB.CollectionView.extend({\n    tagName: 'ul',\n    className: 'rb-c-sidebar__items repository-selector',\n    itemViewType: RB.RepositoryView,\n\n    template: _.template(dedent`\n        <li class=\"rb-c-sidebar__section -no-icons\">\n         <header class=\"rb-c-sidebar__section-header\">\n          <%- repositoriesLabel %>\n         </header>\n         <ul class=\"rb-c-sidebar__items\">\n          <li class=\"rb-c-sidebar__item\">\n           <div class=\"rb-c-sidebar__item-label\">\n            <div class=\"rb-c-search-field\">\n             <span class=\"fa fa-search\"></span>\n             <input class=\"rb-c-search-field__input\"\n                    placeholder=\"<%- filterLabel %>\" />\n            </div>\n           </div>\n          </li>\n         </ul>\n         <ul class=\"rb-c-sidebar__items\n                    rb-c-new-review-request__repository-items\">\n        </li>\n    `),\n\n    events: {\n        'input .rb-c-search-field__input': '_onSearchChanged',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        RB.CollectionView.prototype.initialize.apply(this, arguments);\n\n        this._selected = null;\n        this._searchActive = false;\n\n        this.listenTo(this.collection, 'selected', this._onRepositorySelected);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.RepositorySelectionView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template({\n            repositoriesLabel: gettext('Repositories'),\n            filterLabel: gettext('Filter'),\n        }));\n\n        this.$container = this.$('.rb-c-new-review-request__repository-items');\n\n        this._$searchBox = this.$('.rb-c-search-field__input');\n\n        RB.CollectionView.prototype.render.apply(this, arguments);\n\n        return this;\n    },\n\n    /**\n     * Unselect a repository.\n     */\n    unselect() {\n        this.views.forEach(view => {\n            if (view.model === this._selected) {\n                view.$el.removeClass('active');\n            }\n        });\n\n        this._selected = null;\n\n        this.trigger('selected', null);\n    },\n\n    /**\n     * Callback for when an individual repository is selected.\n     *\n     * Ensures that the selected repository has the 'selected' class applied\n     * (and no others do), and triggers the 'selected' event on the view.\n     *\n     * Args:\n     *     item (RB.Repository):\n     *         The selected repository;\n     */\n    _onRepositorySelected(item) {\n        this._selected = item;\n\n        this.views.forEach(view => {\n            if (view.model === item) {\n                view.$el.addClass('-is-active');\n            } else {\n                view.$el.removeClass('-is-active');\n            }\n        });\n\n        this.trigger('selected', item);\n    },\n\n    /**\n     * Callback for when the text in the search input changes.\n     *\n     * Filters the visible items.\n     */\n    _onSearchChanged() {\n        const searchTerm = this._$searchBox.val().toLowerCase();\n\n        this.views.forEach(view => {\n            view.$el.setVisible(view.lowerName.indexOf(searchTerm) !== -1);\n        });\n    },\n});\n"]}