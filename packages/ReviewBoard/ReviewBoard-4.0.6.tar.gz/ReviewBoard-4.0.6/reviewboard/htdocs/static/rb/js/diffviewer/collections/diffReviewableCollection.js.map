{"version":3,"sources":["diffReviewableCollection.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,wBAAH,GAA8B,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B;AACrD,EAAA,KAAK,EAAE,EAAE,CAAC,cAD2C;;AAGrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UAjBqD,sBAiB1C,MAjB0C,EAiBlC,OAjBkC,EAiBzB;AACxB,SAAK,aAAL,GAAqB,OAAO,CAAC,aAA7B;AACH,GAnBoD;;AAqBrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UA/BqD,sBA+B1C,KA/B0C,EA+BnC;AAAA;;AACd,SAAK,QAAL,CAAc,KAAd,EAAqB,OAArB,EAA8B;AAAA,aAAM,KAAI,CAAC,kBAAL,CAAwB,KAAxB,CAAN;AAAA,KAA9B;;AACA,SAAK,kBAAL,CAAwB,KAAxB;AACH,GAlCoD;;AAoCrD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,kBAlDqD,8BAkDlC,KAlDkC,EAkD3B;AAAA;;AACtB,QAAM,aAAa,GAAG,KAAK,aAA3B;AAEA,IAAA,OAAO,CAAC,MAAR,CAAe,aAAf,EACe,uDADf;AAGA,SAAK,KAAL;AACA,SAAK,OAAL,CAAa,YAAb;AAEA,IAAA,KAAK,CAAC,IAAN,CAAW,UAAA,IAAI,EAAI;AACf,UAAM,QAAQ,GAAG,IAAI,CAAC,GAAL,CAAS,UAAT,CAAjB;AACA,UAAM,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,eAAT,CAAtB;AACA,UAAI,iBAAiB,GAAG,IAAxB;;AAEA,UAAI,aAAJ,EAAmB;AACf,QAAA,iBAAiB,GAAG,aAAa,CAAC,QAAlC;AACH,OAFD,MAEO,IAAI,IAAI,CAAC,GAAL,CAAS,gBAAT,CAAJ,EAAgC;AACnC,QAAA,iBAAiB,GAAG,IAAI,CAAC,GAAL,CAAS,wBAAT,CAApB;AACH;;AAED,MAAA,MAAI,CAAC,GAAL,CAAS;AACL,QAAA,cAAc,EAAE,IAAI,CAAC,GAAL,CAAS,gBAAT,CADX;AAEL,QAAA,aAAa,EAAE,aAFV;AAGL,QAAA,IAAI,EAAE,IAHD;AAIL,QAAA,UAAU,EAAE,QAAQ,CAAC,EAJhB;AAKL,QAAA,eAAe,EAAE,aAAa,GAAG,aAAa,CAAC,EAAjB,GAAsB,IAL/C;AAML,QAAA,QAAQ,EAAE,QAAQ,CAAC,QANd;AAOL,QAAA,iBAAiB,EAAE,iBAPd;AAQL,QAAA,uBAAuB,EAAE,IAAI,CAAC,GAAL,CAAS,eAAT;AARpB,OAAT;AAUH,KArBD;AAuBA,SAAK,OAAL,CAAa,WAAb;AACH;AAnFoD,CAA3B,CAA9B","file":"diffReviewableCollection.js","sourcesContent":["/**\n * A collection of RB.DiffReviewable instances.\n *\n * This manages a collection of :js:class:`RB.DiffReviewable`s and can\n * populate itself based on changes to a collection of files.\n *\n * When repopulating, this will emit a ``populating`` event. After populating,\n * it will emit a ``populated`` event.\n */\nRB.DiffReviewableCollection = Backbone.Collection.extend({\n    model: RB.DiffReviewable,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array):\n     *         Optional array of models.\n     *\n     *     options (object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     reviewRequest (RB.ReviewRequest):\n     *         The review request for the collection. This must be provided.\n     */\n    initialize(models, options) {\n        this.reviewRequest = options.reviewRequest;\n    },\n\n    /**\n     * Watch for changes to a collection of files.\n     *\n     * When the files change (and when invoking this method), this collection\n     * will be rebuilt based on those files.\n     *\n     * Args:\n     *     files (RB.DiffFileCollection):\n     *         The collection of files to watch.\n     */\n    watchFiles(files) {\n        this.listenTo(files, 'reset', () => this._populateFromFiles(files));\n        this._populateFromFiles(files);\n    },\n\n    /**\n     * Populate this collection from a collection of files.\n     *\n     * This will clear this collection and then loop through each file,\n     * adding a corresponding :js:class:`RB.DiffReviewable`.\n     *\n     * After clearing, but prior to adding any entries, this will emit a\n     * ``populating`` event. After all reviewables have been added, this\n     * will emit a ``populated`` event.\n     *\n     * Args:\n     *     files (RB.DiffFileCollection):\n     *         The collection of files to populate from.\n     */\n    _populateFromFiles(files) {\n        const reviewRequest = this.reviewRequest;\n\n        console.assert(reviewRequest,\n                       'RB.DiffReviewableCollection.reviewRequest must be set');\n\n        this.reset();\n        this.trigger('populating');\n\n        files.each(file => {\n            const filediff = file.get('filediff');\n            const interfilediff = file.get('interfilediff');\n            let interdiffRevision = null;\n\n            if (interfilediff) {\n                interdiffRevision = interfilediff.revision;\n            } else if (file.get('forceInterdiff')) {\n                interdiffRevision = file.get('forceInterdiffRevision');\n            }\n\n            this.add({\n                baseFileDiffID: file.get('baseFileDiffID'),\n                reviewRequest: reviewRequest,\n                file: file,\n                fileDiffID: filediff.id,\n                interFileDiffID: interfilediff ? interfilediff.id : null,\n                revision: filediff.revision,\n                interdiffRevision: interdiffRevision,\n                serializedCommentBlocks: file.get('commentCounts'),\n            });\n        });\n\n        this.trigger('populated');\n    },\n});\n"]}