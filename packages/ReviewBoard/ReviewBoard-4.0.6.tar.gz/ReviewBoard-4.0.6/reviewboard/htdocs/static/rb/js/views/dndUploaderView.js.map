{"version":3,"sources":["dndUploaderView.es6.js"],"names":[],"mappings":"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","file":"dndUploaderView.js","sourcesContent":["(function() {\n\n\n/**\n * A model for creating drag and drop targets.\n *\n * Registering a RB.DnDDropTarget with the RB.DnDUploader will create an\n * overlay on top of the target when files are dragged over the page. This\n * overlay will accept dropped files and run the dropAction for each file\n * dropped on it.\n *\n * Model Attributes:\n *     $target (jQuery):\n *         The target element to allow file drops on.\n *\n *     callback (function):\n *         The function to call when a file is dropped.\n *\n *     dropText (string):\n *         The string to show in the overlay.\n */\nconst DnDDropTarget = Backbone.Model.extend({\n    defaults() {\n        return {\n            $target: $(window),\n            callback: function() {},\n            dropText: gettext('Drop to upload')\n        };\n    }\n});\n\n\n/**\n * Displays an overlay over an element that accepts file drops.\n *\n * The overlay appears as semi-transparent black with the dropText message in\n * the center.\n *\n * If the user cancels the drop or moves the mouse out of the page, the\n * overlay will fade away.\n */\nconst DnDDropOverlayView = Backbone.View.extend({\n    className: 'dnd-overlay',\n\n    events: {\n        'dragenter': '_onDragEnter',\n        'dragover': '_onDragOver',\n        'dragleave': '_onDragLeave',\n        'drop': '_onDrop'\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     DnDDropOverlayView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.text(this.model.get('dropText'));\n\n        return this;\n    },\n\n    /**\n     * Show the overlay.\n     */\n    show() {\n        const $target = this.model.get('$target');\n        $target.addClass('dnd-overlay-visible');\n\n        /*\n         * Adding the class to the target may change its visibility or size.\n         * Let that clear before trying to position/size the overlay.\n         */\n        _.defer(() => {\n            const offset = $target.offset();\n            const width = $target.outerWidth() + 'px';\n            const height = $target.outerHeight() + 'px';\n\n            this.$el\n                .css({\n                    width: width,\n                    height: height,\n                    'line-height': height,\n                    left: offset.left + 'px',\n                    top: offset.top + 'px'\n                })\n                .show();\n        });\n    },\n\n    /**\n     * Hide the overlay.\n     */\n    hide() {\n        this.model.get('$target').removeClass('dnd-overlay-visible');\n        this.$el.hide();\n    },\n\n    /**\n     * Close the overlay.\n     *\n     * The overlay will fade out, and once it's gone, it will emit the \"closed\"\n     * event and remove itself from the page.\n     */\n    close() {\n        this.$el.fadeOut(() => {\n            this.trigger('closed');\n            this.remove();\n        });\n    },\n\n    /**\n     * Handle drop events on the overlay.\n     *\n     * This will call the appropriate callback for all dropped files.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n        const files = dt && dt.files;\n\n        if (files) {\n            const callback = this.model.get('callback');\n\n            for (let file of Array.from(files)) {\n                callback(file);\n            }\n        }\n\n        this.trigger('closing');\n    },\n\n    /**\n     * Handle dragenter events on the overlay.\n     *\n     * If there's files being dragged, the drop effect (usually represented\n     * by a mouse cursor) will be set to indicate a copy of the files.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDragEnter(e) {\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n\n        if (dt) {\n            dt.dropEffect = 'copy';\n            this.$el.addClass('dnd-overlay-highlight');\n        }\n    },\n\n    /**\n     * Handle dragover events on the overlay.\n     *\n     * This merely prevents the default action, which indicates to the\n     * underlying API that this element can be dropped on.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event which triggered the callback.\n     */\n    _onDragOver(e) {\n        e.preventDefault();\n    },\n\n    /**\n     * Handle dragleave events on the overlay.\n     *\n     * If there were files previously being dragged over the overlay,\n     * the drop effect will be reset.\n     *\n     * The overlay is always closed on a dragleave.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _onDragLeave(e) {\n        e.preventDefault();\n\n        const dt = e.originalEvent.dataTransfer;\n\n        if (dt) {\n            dt.dropEffect = 'none';\n            this.$el.removeClass('dnd-overlay-highlight');\n        }\n    }\n});\n\n\n/*\n * Handles drag-and-drop file uploads for a review request.\n *\n * This makes it possible to drag files from a file manager and drop them\n * into Review Board. This requires browser support for HTML 5 file\n * drag-and-drop, which is available in most modern browsers.\n *\n * The moment the DnDUploader is created, it will begin listening for\n * DnD-related events on the window.\n */\nRB.DnDUploader = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._dropTargets = new Backbone.Collection({\n            model: DnDDropTarget\n        });\n        this._dropOverlays = [];\n        this._hideOverlayTimeout = null;\n        this._overlaysVisible = false;\n        this._overlaysHiding = false;\n\n        _.bindAll(this, '_showOverlays', '_hideOverlays');\n\n        $(window)\n            .on('dragstart dragenter dragover', this._showOverlays)\n            .on('dragend dragleave', this._hideOverlays);\n    },\n\n    /**\n     * Register a new drop target.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The target element for drops.\n     *\n     *     dropText (string):\n     *         The text to show on the overlay.\n     *\n     *     callback (function):\n     *         The function to call when a file is dropped. This takes a single\n     *         file argument, and will be called for each file that is dropped\n     *         on the target.\n     */\n    registerDropTarget($target, dropText, callback) {\n        if (this._dropTargets.findWhere({ $target }) === undefined) {\n            const target = new DnDDropTarget({\n                $target,\n                dropText,\n                callback\n            });\n            this._dropTargets.add(target);\n\n            const overlay = new DnDDropOverlayView({\n                model: target\n            });\n\n            overlay.render().$el\n                .hide()\n                .appendTo(document.body);\n            this.listenTo(overlay, 'closing', this._hideOverlays);\n\n            this._dropOverlays.push(overlay);\n        } else {\n            console.error('Drop target was already registered!', $target);\n        }\n    },\n\n    /**\n     * Unregister an existing drop target.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The target element for drops.\n     */\n    unregisterDropTarget($target) {\n        const target = this._dropTargets.findWhere({ $target: $target });\n        const overlayIx = this._dropOverlays.findIndex(\n            overlay => (overlay.model === target));\n\n        if (overlayIx !== -1) {\n            this._dropOverlays[overlayIx].remove();\n            this._dropOverlays.splice(overlayIx, 1);\n        }\n\n        if (target !== undefined) {\n            this._dropTargets.remove(target);\n        }\n    },\n\n    /**\n     * Show the drop overlays.\n     *\n     * An overlay will be displayed over all the registered drop targets to\n     * give the user a place to drop the files onto. The overlay will report\n     * any files dropped.\n     *\n     * Args:\n     *     e (DragEvent):\n     *         The event that triggered the callback.\n     */\n    _showOverlays(e) {\n        if (e.originalEvent.dataTransfer !== undefined &&\n            Array.from(e.originalEvent.dataTransfer.types).includes('Files')) {\n            this._overlaysHiding = false;\n\n            if (!this._overlaysVisible) {\n                this._overlaysVisible = true;\n                this._dropOverlays.forEach(overlay => overlay.show());\n            }\n        }\n    },\n\n    /**\n     * Hide the drop overlays.\n     */\n    _hideOverlays() {\n        /*\n         * This will get called many times because the event bubbles up from\n         * all the children of the document. We only want to hide the overlays\n         * when the drag exits the window.\n         *\n         * In order to make this work reliably, we only hide the overlays after\n         * a timeout (to make sure there's not a dragenter event coming\n         * immediately after this).\n         */\n        if (this._hideOverlayTimeout) {\n            clearTimeout(this._hideOverlayTimeout);\n        }\n\n        this._overlaysHiding = true;\n        this._hideOverlayTimeout = setTimeout(() => {\n            if (this._overlaysHiding) {\n                this._overlaysVisible = false;\n                this._dropOverlays.forEach(overlay => overlay.hide());\n            }\n        }, 200);\n    }\n}, {\n    instance: null,\n\n    /**\n     * Create the DnDUploader instance.\n     *\n     * Returns:\n     *     RB.DnDUploader:\n     *     The new instance.\n     */\n    create() {\n        console.assert(RB.DnDUploader.instance === null,\n                       'DnDUploader.create may only be called once');\n\n        RB.DnDUploader.instance = new RB.DnDUploader();\n        return RB.DnDUploader.instance;\n    }\n});\n\n\n})();\n"]}