{"version":3,"sources":["baseStatusUpdatesEntryViewTests.es6.js"],"names":[],"mappings":"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","file":"baseStatusUpdatesEntryViewTests.js","sourcesContent":["suite('rb/reviewRequestPage/views/BaseStatusUpdatesEntryView', function() {\n    /* It's much easier to test against a stub than the full page. */\n    const TestPage = Backbone.View.extend({\n        stopWatchingEntryUpdates() {},\n        watchEntryUpdates() {},\n        queueLoadDiff() {},\n    });\n\n    const statusUpdateHTML = dedent`\n        <div id=\"initial_status_updates\"\n             class=\"review-request-page-entry status-updates\">\n         <a name=\"initial_status_updates\"></a>\n         <div class=\"review-request-page-entry-contents\">\n          <div class=\"header status-update-state-pending\">\n           <div class=\"collapse-button btn\">\n            <div class=\"rb-icon rb-icon-collapse-review\"></div>\n           </div>\n           <div class=\"header-details\">\n            <div class=\"summary\">\n             <span class=\"review-request-page-entry-title\">\n              Checks run (1 waiting to run)\n             </span>\n            </div>\n            <a href=\"#initial_status_updates\" class=\"timestamp\">\n             <time class=\"timesince\"\n                   datetime=\"2018-11-27T00:18:43.664524+00:00\"\n                   title=\"Nov. 27, 2018, 12:18 a.m.\">0 minutes ago</time>\n            </a>\n           </div>\n          </div>\n          <div class=\"banners\"></div>\n          <div class=\"body\">\n           <section class=\"status-update-summary\">\n            <div class=\"status-update-summary-entry\n             status-update-state-not-yet-run\">\n             <span class=\"summary\">nyc</span>\n             Waiting to run\n             <input type=\"button\" value=\"Run\" class=\"status-update-request-run\"\n                    data-status-update-id=\"1\">\n            </div>\n           </section>\n          </div>\n         </div>\n        </div>\n    `;\n\n    let entryView;\n    let page;\n    let entry;\n\n    beforeEach(function() {\n        const reviewRequest = new RB.ReviewRequest({ id: 5 });\n        const editor = new RB.ReviewRequestEditor({\n            reviewRequest: reviewRequest\n        });\n\n        entry = new RB.ReviewRequestPage.StatusUpdatesEntry({\n            reviews: [\n                reviewRequest.createReview(100, {\n                    loaded: true,\n                    links: {\n                        replies: {\n                            href: '/api/review/100/replies/'\n                        }\n                    }\n                }),\n                reviewRequest.createReview(101, {\n                    loaded: true,\n                    links: {\n                        replies: {\n                            href: '/api/review/101/replies/'\n                        }\n                    }\n                }),\n            ],\n            localSitePrefix: null,\n            reviewRequest: reviewRequest,\n            reviewRequestEditor: editor,\n            reviewRequestId: 5,\n            id: '0',\n            typeID: 'initial_status_updates',\n            addedTimestamp: new Date(Date.UTC(2017, 7, 18, 13, 40, 25)),\n            updatedTimestamp: new Date(Date.UTC(2017, 7, 18, 16, 20, 0)),\n            pendingStatusUpdates: true,\n            diffCommentsData: [\n                ['1', '100'],\n                ['2', '100-101'],\n            ],\n        });\n\n        const $el = $(statusUpdateHTML).appendTo($testsScratch);\n\n        entryView = new RB.ReviewRequestPage.BaseStatusUpdatesEntryView({\n            el: $el,\n            model: entry,\n        });\n\n        page = new TestPage();\n        page.diffFragmentQueue = new RB.DiffFragmentQueueView({\n            containerPrefix: 'comment',\n        });\n        entry.set('page', page);\n        RB.PageManager.setPage(page);\n    });\n\n    afterEach(function() {\n        RB.PageManager.setPage(null);\n    });\n\n    describe('Dynamic Updating', function() {\n        describe('Update checking', function() {\n            it('Enabled when pendingStatusUpdates=true', function() {\n                spyOn(entry, 'watchUpdates');\n\n                entry.set('pendingStatusUpdates', true);\n                entryView.render();\n\n                expect(entry.watchUpdates).toHaveBeenCalled();\n            });\n\n            it('Disabled when pendingStatusUpdates=false', function() {\n                spyOn(entry, 'watchUpdates');\n\n                entry.set('pendingStatusUpdates', false);\n                entryView.render();\n\n                expect(entry.watchUpdates).not.toHaveBeenCalled();\n            });\n        });\n\n        it('Saves fragments on beforeApplyUpdate', function() {\n            spyOn(page.diffFragmentQueue, 'saveFragment');\n            spyOn(page, 'stopWatchingEntryUpdates');\n\n            entryView.beforeApplyUpdate();\n            expect(page.diffFragmentQueue.saveFragment.calls.count()).toBe(2);\n            expect(page.diffFragmentQueue.saveFragment.calls.argsFor(0))\n                .toEqual(['1']);\n            expect(page.diffFragmentQueue.saveFragment.calls.argsFor(1))\n                .toEqual(['2']);\n            expect(page.stopWatchingEntryUpdates).toHaveBeenCalled();\n        });\n    });\n\n    describe('render', function() {\n        it('Creates ReviewViews', function() {\n            entryView.render();\n\n            expect(entryView._reviewViews.length).toBe(2);\n        });\n    });\n\n    describe('Run status update', function() {\n        it('Runs and checks for updates when button is clicked', function() {\n            spyOn(entryView.model, 'stopWatchingUpdates');\n            spyOn(entryView.model, 'watchUpdates');\n            spyOn(RB, 'apiCall').and.callThrough();\n            spyOn($, 'ajax').and.callFake(request => {\n                expect(request.type).toBe('PUT');\n                expect(request.url).toBe('/api/review-requests/5/status-updates/1/');\n                request.success();\n            });\n\n            entryView.$el.find('.status-update-request-run').first().click();\n\n            expect(RB.apiCall).toHaveBeenCalled();\n            expect($.ajax).toHaveBeenCalled();\n            expect(entryView.model.stopWatchingUpdates).toHaveBeenCalled();\n            expect(entryView.model.watchUpdates).toHaveBeenCalled();\n        });\n    });\n});\n"]}