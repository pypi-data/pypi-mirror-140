{"version":3,"sources":["reviewModelTests.es6.js"],"names":[],"mappings":"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","file":"reviewModelTests.js","sourcesContent":["suite('rb/resources/models/Review', function() {\n    let model;\n\n    beforeEach(function() {\n        model = new RB.Review({\n            parentObject: new RB.ReviewRequest(),\n        });\n    });\n\n    describe('createReply', function() {\n        it('Returns cached draft reply', function() {\n            expect(model.get('draftReply')).toBe(null);\n\n            const reviewReply = model.createReply();\n            expect(model.get('draftReply')).toBe(reviewReply);\n\n            const reviewReply2 = model.createReply();\n            expect(reviewReply).toBe(reviewReply2);\n        });\n\n        it('Cached draft reply resets on publish', function() {\n            const reviewReply = model.createReply();\n            expect(model.get('draftReply')).toBe(reviewReply);\n\n            reviewReply.trigger('published');\n            expect(model.get('draftReply')).toBe(null);\n        });\n    });\n\n    describe('parse', function() {\n        beforeEach(function() {\n            model.rspNamespace = 'my_review';\n        });\n\n        it('Common API payloads', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    id: 42,\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    'public': false,\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    ship_it: false,\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.id).toBe(42);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.public).toBe(false);\n            expect(data.bodyTopRichText).toBe(true);\n            expect(data.bodyBottomRichText).toBe(false);\n            expect(data.shipIt).toBe(false);\n        });\n\n        it('With raw_text_fields', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    raw_text_fields: {\n                        body_top: 'raw body top',\n                        body_top_text_type: 'raw',\n                        body_bottom: 'raw body bottom',\n                        body_bottom_text_type: 'raw',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.bodyTopRichText).toBe(false);\n            expect(data.bodyBottomRichText).toBe(false);\n\n            expect(data.rawTextFields).toBeTruthy();\n            expect(data.rawTextFields.bodyTop).toBe('raw body top');\n            expect(data.rawTextFields.bodyBottom).toBe('raw body bottom');\n        });\n\n        it('With markdown_text_fields', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    markdown_text_fields: {\n                        body_top: 'Markdown body top',\n                        body_top_text_type: 'markdown',\n                        body_bottom: 'Markdown body bottom',\n                        body_bottom_text_type: 'markdown',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.bodyTopRichText).toBe(true);\n            expect(data.bodyBottomRichText).toBe(false);\n\n            expect(data.markdownTextFields).toBeTruthy();\n            expect(data.markdownTextFields.bodyTop).toBe('Markdown body top');\n            expect(data.markdownTextFields.bodyBottom)\n                .toBe('Markdown body bottom');\n        });\n\n        it('With html_text_fields', function() {\n            const data = model.parse({\n                stat: 'ok',\n                my_review: {\n                    body_top: 'my body top',\n                    body_bottom: 'my body bottom',\n                    body_top_text_type: 'markdown',\n                    body_bottom_text_type: 'plain',\n                    html_text_fields: {\n                        body_top: 'HTML body top',\n                        body_top_text_type: 'html',\n                        body_bottom: 'HTML body bottom',\n                        body_bottom_text_type: 'html',\n                    },\n                },\n            });\n\n            expect(data).not.toBe(undefined);\n            expect(data.bodyTop).toBe('my body top');\n            expect(data.bodyBottom).toBe('my body bottom');\n            expect(data.bodyTopRichText).toBe(true);\n            expect(data.bodyBottomRichText).toBe(false);\n\n            expect(data.htmlTextFields).toBeTruthy();\n            expect(data.htmlTextFields.bodyTop).toBe('HTML body top');\n            expect(data.htmlTextFields.bodyBottom).toBe('HTML body bottom');\n        });\n    });\n\n    describe('toJSON', function() {\n        describe('bodyTop field', function() {\n            it('With value', function() {\n                model.set('bodyTop', 'foo');\n                const data = model.toJSON();\n                expect(data.body_top).toBe('foo');\n            });\n        });\n\n        describe('bodyBottom field', function() {\n            it('With value', function() {\n                model.set('bodyBottom', 'foo');\n                const data = model.toJSON();\n                expect(data.body_bottom).toBe('foo');\n            });\n        });\n\n        describe('force_text_type field', function() {\n            it('With value', function() {\n                model.set('forceTextType', 'html');\n                const data = model.toJSON();\n                expect(data.force_text_type).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.force_text_type).toBe(undefined);\n            });\n        });\n\n        describe('include_text_types field', function() {\n            it('With value', function() {\n                model.set('includeTextTypes', 'html');\n                const data = model.toJSON();\n                expect(data.include_text_types).toBe('html');\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n\n                expect(data.include_text_types).toBe(undefined);\n            });\n        });\n\n        describe('public field', function() {\n            it('With value', function() {\n                model.set('public', true);\n                const data = model.toJSON();\n                expect(data.public).toBe(1);\n            });\n\n            it('Without value', function() {\n                const data = model.toJSON();\n                expect(data.public).toBe(undefined);\n            });\n        });\n\n        describe('bodyTopRichText field', function() {\n            it('With true', function() {\n                model.set('bodyTopRichText', true);\n                const data = model.toJSON();\n                expect(data.body_top_text_type).toBe('markdown');\n            });\n\n            it('With false', function() {\n                model.set('bodyTopRichText', false);\n                const data = model.toJSON();\n                expect(data.body_top_text_type).toBe('plain');\n            });\n        });\n\n        describe('bodyBottomRichText field', function() {\n            it('With true', function() {\n                model.set('bodyBottomRichText', true);\n                const data = model.toJSON();\n                expect(data.body_bottom_text_type).toBe('markdown');\n            });\n\n            it('With false', function() {\n                model.set('bodyBottomRichText', false);\n                const data = model.toJSON();\n                expect(data.body_bottom_text_type).toBe('plain');\n            });\n        });\n\n        describe('shipIt field', function() {\n            it('With value', function() {\n                model.set('shipIt', true);\n                const data = model.toJSON();\n                expect(data.ship_it).toBe(true);\n            });\n        });\n    });\n});\n"]}