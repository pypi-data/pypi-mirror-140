{"version":3,"sources":["diffFragmentViewTests.es6.js"],"names":[],"mappings":";;AAAA,KAAK,CAAC,2BAAD,EAA8B,YAAW;AAC1C,MAAM,gBAAgB,GAAG,CAAC,CAAC,QAAF,woBAAzB;;AAmCA,MAAI,IAAJ;AACA,MAAI,QAAJ;AAEA,EAAA,UAAU,CAAC,YAAW;AAClB,IAAA,QAAQ,GAAG,OAAO,CAAC,SAAR,CAAkB,UAAlB,CAAX;AAEA,IAAA,IAAI,GAAG,IAAI,EAAE,CAAC,gBAAP,CAAwB;AAC3B,MAAA,QAAQ,EAAE,QADiB;AAE3B,MAAA,WAAW,EAAE;AAFc,KAAxB,CAAP;AAIA,IAAA,IAAI,CAAC,GAAL,CAAS,IAAT,CAAc,gBAAgB,EAA9B;AACA,IAAA,aAAa,CAAC,MAAd,CAAqB,IAAI,CAAC,GAA1B;AAEA;;AACA,IAAA,KAAK,CAAC,CAAD,EAAI,OAAJ,CAAL,CAAkB,GAAlB,CAAsB,QAAtB,CAA+B,UAAA,EAAE;AAAA,aAAI,EAAE,EAAN;AAAA,KAAjC;AACA,IAAA,KAAK,CAAC,CAAD,EAAI,OAAJ,CAAL,CAAkB,GAAlB,CAAsB,QAAtB,CAA+B,UAAA,EAAE;AAAA,aAAI,EAAE,EAAN;AAAA,KAAjC;AACH,GAbS,CAAV;AAeA,EAAA,QAAQ,CAAC,QAAD,EAAW,YAAW;AAC1B,IAAA,EAAE,CAAC,uCAAD,EAA0C,YAAW;AACnD,MAAA,IAAI,CAAC,MAAL;AAEA,MAAA,MAAM,CAAC,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,mBAAlB,CAAD,CAAN,CAA+C,IAA/C,CAAoD,IAApD;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,KAA/C;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,IAAhD;AAEA;AACZ;AACA;AACA;AACA;;AACY,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,GAAtC,CAA0C,IAA1C,CAA+C,MAA/C;;AAEA,MAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,QAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,GAArC,CAAyC,IAAzC,CAA8C,MAA9C;AACH,OAFD;AAGH,KAjBC,CAAF;AAmBA,IAAA,EAAE,CAAC,sCAAD,EAAyC,YAAW;AAClD,MAAA,IAAI,CAAC,GAAL,CAAS,IAAT;AACA,MAAA,IAAI,CAAC,MAAL;AAEA,MAAA,MAAM,CAAC,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,mBAAlB,CAAD,CAAN,CAA+C,IAA/C,CAAoD,IAApD;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;AAEA;AACZ;AACA;AACA;AACA;;AACY,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;AAEA,MAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,QAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;AACH,OAFD;AAGH,KAlBC,CAAF;AAoBA,IAAA,EAAE,CAAC,4BAAD,EAA+B,YAAW;AACxC,MAAA,IAAI,CAAC,YAAL,GAAoB,KAApB;AACA,MAAA,IAAI,CAAC,MAAL;AAEA,MAAA,MAAM,CAAC,IAAI,CAAC,GAAL,CAAS,QAAT,CAAkB,mBAAlB,CAAD,CAAN,CAA+C,IAA/C,CAAoD,KAApD;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;AACA,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;AAEA;AACZ;AACA;AACA;AACA;;AACY,MAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;AAEA,MAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,QAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;AACH,OAFD;AAGH,KAlBC,CAAF;AAmBH,GA3DO,CAAR;AA6DA,EAAA,QAAQ,CAAC,QAAD,EAAW,YAAW;AAC1B,IAAA,EAAE,CAAC,wBAAD,EAA2B,YAAW;AACpC,MAAA,IAAI,CAAC,MAAL;AACA,MAAA,IAAI,CAAC,CAAL,CAAO,kBAAP,EAA2B,EAA3B,CAA8B,CAA9B,EAAiC,KAAjC;AAEA,MAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,gBAAjB;AACA,MAAA,MAAM,CAAC,QAAQ,CAAC,KAAT,CAAe,UAAf,GAA4B,IAA5B,CAAiC,CAAjC,EAAoC,cAArC,CAAN,CACK,IADL,CACU,MADV;AAEH,KAPC,CAAF;AASA,IAAA,EAAE,CAAC,uBAAD,EAA0B,YAAW;AACnC,MAAA,IAAI,CAAC,MAAL;AACA,MAAA,IAAI,CAAC,CAAL,CAAO,oBAAP,EAA6B,EAA7B,CAAgC,CAAhC,EAAmC,KAAnC;AAEA,MAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,gBAAjB;AACA,MAAA,MAAM,CAAC,QAAQ,CAAC,KAAT,CAAe,UAAf,GAA4B,IAA5B,CAAiC,CAAjC,EAAoC,cAArC,CAAN,CACK,IADL,CACU,KADV;AAEH,KAPC,CAAF;AASA,IAAA,QAAQ,CAAC,YAAD,EAAe,YAAW;AAC9B,MAAA,EAAE,CAAC,2BAAD,EAA8B,YAAW;AACvC,QAAA,IAAI,CAAC,MAAL;AAEA,QAAA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,UAAA,GAAG,EAAI;AACtC,UAAA,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;AAEA,iBAAO,IAAP;AACH,SAJD;AAKA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;AAEA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;AAEA,QAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,UAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;AACH,SAFD;AAGH,OAjBC,CAAF;AAmBA,MAAA,EAAE,CAAC,4BAAD,EAA+B,YAAW;AACxC,QAAA,IAAI,CAAC,YAAL,GAAoB,KAApB;AACA,QAAA,IAAI,CAAC,MAAL;AAEA,QAAA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,UAAA,GAAG,EAAI;AACtC,UAAA,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;AAEA,iBAAO,IAAP;AACH,SAJD;AAKA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;AAEA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;AAEA,QAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,UAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;AACH,SAFD;AAGH,OAlBC,CAAF;AAmBH,KAvCO,CAAR;AAyCA,IAAA,QAAQ,CAAC,YAAD,EAAe,YAAW;AAC9B,MAAA,EAAE,CAAC,2BAAD,EAA8B,YAAW;AACvC,YAAI,UAAU,GAAG,IAAjB;AAEA,QAAA,IAAI,CAAC,MAAL;AAEA;;AACA,QAAA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,UAAA,GAAG,EAAI;AACtC,UAAA,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;AAEA,iBAAO,UAAP;AACH,SAJD;AAKA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;AAEA;;AACA,QAAA,UAAU,GAAG,KAAb;AACA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;AAEA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,IAAhD;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,KAA/C;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,GAAtC,CAA0C,IAA1C,CAA+C,MAA/C;;AAEA,QAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,UAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,GAArC,CAAyC,IAAzC,CAA8C,MAA9C;AACH,SAFD;AAGH,OAxBC,CAAF;AA0BA,MAAA,EAAE,CAAC,4BAAD,EAA+B,YAAW;AACxC,YAAI,UAAU,GAAG,IAAjB;AAEA,QAAA,IAAI,CAAC,YAAL,GAAoB,KAApB;AACA,QAAA,IAAI,CAAC,MAAL;AAEA;;AACA,QAAA,KAAK,CAAC,IAAI,CAAC,GAAN,EAAW,IAAX,CAAL,CAAsB,GAAtB,CAA0B,QAA1B,CAAmC,UAAA,GAAG,EAAI;AACtC,UAAA,MAAM,CAAC,GAAD,CAAN,CAAY,IAAZ,CAAiB,QAAjB;AAEA,iBAAO,UAAP;AACH,SAJD;AAKA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;AAEA;;AACA,QAAA,UAAU,GAAG,KAAb;AACA,QAAA,IAAI,CAAC,GAAL,CAAS,OAAT,CAAiB,YAAjB;AAEA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,WAAtB,CAAD,CAAN,CAA2C,IAA3C,CAAgD,KAAhD;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,UAAtB,CAAD,CAAN,CAA0C,IAA1C,CAA+C,IAA/C;AACA,QAAA,MAAM,CAAC,IAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAD,CAAN,CAAsC,IAAtC,CAA2C,MAA3C;;AAEA,QAAA,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,aAAZ,EAA2B,UAAA,QAAQ,EAAI;AACnC,UAAA,MAAM,CAAC,CAAC,CAAC,QAAD,CAAD,CAAY,GAAZ,CAAgB,WAAhB,CAAD,CAAN,CAAqC,IAArC,CAA0C,MAA1C;AACH,SAFD;AAGH,OAzBC,CAAF;AA0BH,KArDO,CAAR;AAsDH,GAlHO,CAAR;AAmHH,CAtOI,CAAL","file":"diffFragmentViewTests.js","sourcesContent":["suite('rb/views/DiffFragmentView', function() {\n    const fragmentTemplate = _.template(dedent`\n        <table>\n         <thead>\n         </thead>\n         <tbody class=\"diff-header diff-header-above\">\n          <tr>\n           <td>\n            <div>\n             <a href=\"#\" class=\"diff-expand-btn\"\n                data-lines-of-context=\"20,0\"></a>\n            </div>\n           </td>\n          </tr>\n         </tbody>\n         <tbody class=\"insert\"></tbody>\n         <tbody class=\"insert\">\n          <tr>\n           <td>\n            <div class=\"diff-collapse-btn\" data-lines-of-context=\"0,0\"></div>\n           </td>\n          </tr>\n         </tbody>\n         <tbody class=\"diff-header diff-header-below\">\n          <tr>\n           <td>\n            <div>\n             <a href=\"#\" class=\"diff-expand-btn\"\n                data-lines-of-context=\"0,20\"></a>\n            </div>\n           </td>\n          </tr>\n         </tbody>\n        </table>\n    `);\n\n    let view;\n    let loadDiff;\n\n    beforeEach(function() {\n        loadDiff = jasmine.createSpy('loadDiff');\n\n        view = new RB.DiffFragmentView({\n            loadDiff: loadDiff,\n            collapsible: true,\n        });\n        view.$el.html(fragmentTemplate());\n        $testsScratch.append(view.$el);\n\n        /* Make all the deferred/delayed functions run immediately. */\n        spyOn(_, 'defer').and.callFake(cb => cb());\n        spyOn(_, 'delay').and.callFake(cb => cb());\n    });\n\n    describe('render', function() {\n        it('With visible and collapsible === true', function() {\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(true);\n            expect(view._$table.hasClass('expanded')).toBe(false);\n            expect(view._$table.hasClass('collapsed')).toBe(true);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).not.toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).not.toBe('none');\n            });\n        });\n\n        it('With hidden and collapsible === true', function() {\n            view.$el.hide();\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(true);\n            expect(view._$table.hasClass('expanded')).toBe(true);\n            expect(view._$table.hasClass('collapsed')).toBe(false);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).toBe('none');\n            });\n        });\n\n        it('With collapsible === false', function() {\n            view._collapsible = false;\n            view.render();\n\n            expect(view.$el.hasClass('allow-transitions')).toBe(false);\n            expect(view._$table.hasClass('expanded')).toBe(true);\n            expect(view._$table.hasClass('collapsed')).toBe(false);\n\n            /*\n             * Ideally we'd check for the proper transform values we're setting\n             * (or part of them anyway), but browsers may turn those into\n             * \"matrix(...)\" values. So this is better than nothing.\n             */\n            expect(view._$thead.css('transform')).toBe('none');\n\n            _.each(view._$diffHeaders, headerEl => {\n                expect($(headerEl).css('transform')).toBe('none');\n            });\n        });\n    });\n\n    describe('Events', function() {\n        it('click expansion button', function() {\n            view.render();\n            view.$('.diff-expand-btn').eq(0).click();\n\n            expect(loadDiff).toHaveBeenCalled();\n            expect(loadDiff.calls.mostRecent().args[0].linesOfContext)\n                .toBe('20,0');\n        });\n\n        it('click collapse button', function() {\n            view.render();\n            view.$('.diff-collapse-btn').eq(0).click();\n\n            expect(loadDiff).toHaveBeenCalled();\n            expect(loadDiff.calls.mostRecent().args[0].linesOfContext)\n                .toBe('0,0');\n        });\n\n        describe('mouseenter', function() {\n            it('With collapsible === true', function() {\n                view.render();\n\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return true;\n                });\n                view.$el.trigger('mouseenter');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n\n            it('With collapsible === false', function() {\n                view._collapsible = false;\n                view.render();\n\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return true;\n                });\n                view.$el.trigger('mouseenter');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n        });\n\n        describe('mouseleave', function() {\n            it('With collapsible === true', function() {\n                let isHovering = true;\n\n                view.render();\n\n                /* First, trigger a mouseenter. */\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return isHovering;\n                });\n                view.$el.trigger('mouseenter');\n\n                /* Now the mouse leave. */\n                isHovering = false;\n                view.$el.trigger('mouseleave');\n\n                expect(view._$table.hasClass('collapsed')).toBe(true);\n                expect(view._$table.hasClass('expanded')).toBe(false);\n                expect(view._$thead.css('transform')).not.toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).not.toBe('none');\n                });\n            });\n\n            it('With collapsible === false', function() {\n                let isHovering = true;\n\n                view._collapsible = false;\n                view.render();\n\n                /* First, trigger a mouseenter. */\n                spyOn(view.$el, 'is').and.callFake(sel => {\n                    expect(sel).toBe(':hover');\n\n                    return isHovering;\n                });\n                view.$el.trigger('mouseenter');\n\n                /* Now the mouse leave. */\n                isHovering = false;\n                view.$el.trigger('mouseleave');\n\n                expect(view._$table.hasClass('collapsed')).toBe(false);\n                expect(view._$table.hasClass('expanded')).toBe(true);\n                expect(view._$thead.css('transform')).toBe('none');\n\n                _.each(view._$diffHeaders, headerEl => {\n                    expect($(headerEl).css('transform')).toBe('none');\n                });\n            });\n        });\n    });\n});\n"]}