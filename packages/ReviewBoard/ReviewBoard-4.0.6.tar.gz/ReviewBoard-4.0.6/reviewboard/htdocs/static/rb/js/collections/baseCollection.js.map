{"version":3,"sources":["baseCollection.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,cAAH,GAAoB,QAAQ,CAAC,UAAT,CAAoB,MAApB,CAA2B;AAC3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,KAf2C,mBAeN;AAAA,QAA/B,OAA+B,uEAAvB,EAAuB;AAAA,QAAnB,OAAmB,uEAAX,SAAW;AACjC,IAAA,OAAO,GAAG,CAAC,CAAC,aAAF,CAAgB,OAAhB,EAAyB,OAAzB,CAAV;AAEA,WAAO,QAAQ,CAAC,UAAT,CAAoB,SAApB,CAA8B,KAA9B,CAAoC,IAApC,CAAyC,IAAzC,EAA+C,OAA/C,CAAP;AACH,GAnB0C;;AAqB3C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,IAxC2C,gBAwCtC,MAxCsC,EAwC9B,KAxC8B,EAwCX;AAAA,QAAZ,OAAY,uEAAJ,EAAI;AAC5B,WAAO,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,IAAnB,EAAyB,MAAzB,EAAiC,KAAjC,EAAwC,CAAC,CAAC,QAAF,CAAW;AACtD,MAAA,KAAK,EAAE,eAAA,GAAG,EAAI;AACV,QAAA,EAAE,CAAC,aAAH,CAAiB,GAAjB;;AAEA,YAAI,CAAC,CAAC,UAAF,CAAa,OAAO,CAAC,KAArB,CAAJ,EAAiC;AAC7B,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACH;AACJ;AAPqD,KAAX,EAQ5C,OAR4C,CAAxC,CAAP;AASH;AAlD0C,CAA3B,CAApB","file":"baseCollection.js","sourcesContent":["/**\n * The base class used for Review Board collections.\n *\n * This is a thin subclass over Backbone.Collection that just provides\n * some useful additional abilities.\n */\nRB.BaseCollection = Backbone.Collection.extend({\n    /**\n     * Fetch models from the server.\n     *\n     * This behaves just like Backbone.Collection.fetch, except it\n     * takes a context parameter for callbacks.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to be used when calling success/error/complete\n     *         callbacks.\n     */\n    fetch(options={}, context=undefined) {\n        options = _.bindCallbacks(options, context);\n\n        return Backbone.Collection.prototype.fetch.call(this, options);\n    },\n\n    /**\n     * Handle all AJAX communication for the collection.\n     *\n     * Backbone.js will internally call the model's sync function to\n     * communicate with the server, which usually uses Backbone.sync.\n     *\n     * This will parse error response from Review Board so we can provide\n     * a more meaningful error callback.\n     *\n     * Args:\n     *     method (string):\n     *         The HTTP method to use for the AJAX request.\n     *\n     *     model (object):\n     *         The model to sync.\n     *\n     *     options (object):\n     *         Options for the sync operation.\n     */\n    sync(method, model, options={}) {\n        return Backbone.sync.call(this, method, model, _.defaults({\n            error: xhr => {\n                RB.storeAPIError(xhr);\n\n                if (_.isFunction(options.error)) {\n                    options.error(xhr);\n                }\n            }\n        }, options));\n    }\n});\n"]}