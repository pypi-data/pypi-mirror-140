{"version":3,"sources":["relatedGroupSelectorView.es6.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AAGZ,MAAM,cAAc,GAAG,CAAC,CAAC,QAAF,kFAAvB;AAOA;AACA;AACA;;;AACA,EAAA,EAAE,CAAC,wBAAH,GAA8B,OAAO,CAAC,yBAAR,CAAkC,MAAlC,CAAyC;AACnE,IAAA,qBAAqB,iCAD8C;;AAGnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,UAtBmE,sBAsBxD,OAtBwD,EAsB/C;AAChB,MAAA,OAAO,CAAC,yBAAR,CAAkC,SAAlC,CAA4C,UAA5C,CAAuD,IAAvD,CACI,IADJ,EAEI,CAAC,CAAC,QAAF,CAAW;AACP,QAAA,gBAAgB,EAAE;AACd,UAAA,WAAW,EAAE,CAAC,MAAD,EAAS,cAAT,CADC;AAEd,UAAA,SAAS,EAAE,CACP;AAAC,YAAA,KAAK,EAAE;AAAR,WADO,EAEP;AAAC,YAAA,KAAK,EAAE;AAAR,WAFO,CAFG;AAMd,UAAA,UAAU,EAAE;AANE;AADX,OAAX,EASG,OATH,CAFJ;AAaA,WAAK,gBAAL,GAAwB,OAAO,CAAC,eAAR,IAA2B,EAAnD;AACA,WAAK,WAAL,GAAmB,OAAO,CAAC,UAA3B;AACH,KAtCkE;;AAwCnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,YAnDmE,wBAmDtD,IAnDsD,EAmDhD;AACf,aAAO,cAAc,CAAC,IAAD,CAArB;AACH,KArDkE;;AAuDnE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,IAAA,WAnEmE,uBAmEvD,KAnEuD,EAmEhD,QAnEgD,EAmEtC;AAAA;;AACzB,UAAM,MAAM,GAAG;AACX,uBAAe,kCADJ;AAEX,QAAA,WAAW,EAAE;AAFF,OAAf;;AAKA,UAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACpB,QAAA,MAAM,CAAC,CAAP,GAAW,KAAX;AACH;;AAED,MAAA,CAAC,CAAC,IAAF,CAAO;AACH,QAAA,IAAI,EAAE,KADH;AAEH,QAAA,GAAG,YAAK,SAAL,SAAiB,KAAK,gBAAtB,gBAFA;AAGH,QAAA,IAAI,EAAE,MAHH;AAIH,QAAA,OAAO,EAAE,iBAAA,OAAO,EAAI;AAChB;AAChB;AACgB,cAAI,KAAI,CAAC,WAAL,KAAqB,IAAzB,EAA+B;AAC3B,YAAA,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAR,CAAe,MAAf,CAAsB,UAAA,GAAG,EAAI;AAC1C,qBAAO,GAAG,CAAC,WAAX;AACH,aAFgB,CAAjB;AAGH;;AACD,UAAA,QAAQ,CAAC,OAAO,CAAC,MAAR,CAAe,GAAf,CAAmB,UAAA,CAAC;AAAA,mBAAK;AAC9B,cAAA,IAAI,EAAE,CAAC,CAAC,IADsB;AAE9B,cAAA,YAAY,EAAE,CAAC,CAAC,YAFc;AAG9B,cAAA,EAAE,EAAE,CAAC,CAAC,EAHwB;AAI9B,cAAA,WAAW,EAAE,CAAC,CAAC;AAJe,aAAL;AAAA,WAApB,CAAD,CAAR;AAMH,SAlBE;AAmBH,QAAA,KAAK,EAAE,iBAAa;AAAA,4CAAT,IAAS;AAAT,YAAA,IAAS;AAAA;;AAChB,UAAA,OAAO,CAAC,KAAR,CAAc,oBAAd,EAAoC,IAApC;AACA,UAAA,QAAQ;AACX;AAtBE,OAAP;AAwBH;AArGkE,GAAzC,CAA9B;AAyGC,CAtHD","file":"relatedGroupSelectorView.js","sourcesContent":["(function() {\n\n\nconst optionTemplate = _.template(dedent`\n    <div>\n     <span class=\"title\"><%- name %> : <%- display_name %></span>\n    </div>\n`);\n\n\n/**\n * A widget to select related groups using search and autocomplete.\n */\nRB.RelatedGroupSelectorView = Djblets.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for groups...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     inviteOnly (boolean):\n     *         Whether or not we want to only search for inviteOnly review\n     *         groups.\n     */\n    initialize(options) {\n        Djblets.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['name', 'display_name'],\n                    sortField: [\n                        {field: 'name'},\n                        {field: 'display_name'},\n                    ],\n                    valueField: 'name',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._inviteOnly = options.inviteOnly;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(item);\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            'only-fields': 'invite_only,name,display_name,id',\n            displayname: 1,\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/groups/`,\n            data: params,\n            success: results => {\n                /* This is done because we cannot filter using invite_only in\n                the groups api. */\n                if (this._inviteOnly === true) {\n                    results.groups = results.groups.filter(obj => {\n                        return obj.invite_only;\n                    });\n                }\n                callback(results.groups.map(u => ({\n                    name: u.name,\n                    display_name: u.display_name,\n                    id: u.id,\n                    invite_only: u.invite_only\n                })));\n            },\n            error: (...args) => {\n                console.error('Group query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"]}