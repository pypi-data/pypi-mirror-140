{"version":3,"sources":["reviewablePageModel.es6.js"],"names":[],"mappings":"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","file":"reviewablePageModel.js","sourcesContent":["/**\n * A page used for editing, viewing, or reviewing review requests.\n *\n * This is responsible for setting up objects needed for manipulating a\n * review request or related state, for performing reviews, or otherwise\n * handling review-related tasks.\n *\n * This can be used directly or can be subclassed in order to provide\n * additional logic.\n *\n * Attributes:\n *     commentIssueManager (RB.CommentIssueManager):\n *         Manages the issue states for published comments.\n *\n *     reviewRequestEditor (RB.ReviewRequestEditor):\n *         Manages the edit states and capabilities for the review request\n *         for the page.\n *\n * Model Attributes:\n *     checkForUpdates (boolean):\n *         Whether the page should periodically check the server for updates\n *         made to the page.\n *\n *     checkUpdatesType (string):\n *         A type identifier used to represent the page for any update checks.\n *         This corresponds to strings used server-side. Arbitrary values\n *         have undefined behavior.\n *\n *     lastActivityTimestamp (string):\n *         A string-encoded timestamp representing the last time there was\n *         known activity on the review request.\n *\n *     pendingReview (RB.Review):\n *         The pending review (which may or may not yet have a server-side\n *         representation) used for any new review content.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that this page is for.\n */\nRB.ReviewablePage = RB.Page.extend({\n    defaults: _.defaults({\n        checkForUpdates: false,\n        checkUpdatesType: null,\n        lastActivityTimestamp: null,\n        pendingReview: null,\n        reviewRequest: null,\n    }, RB.Page.prototype.defaults),\n\n    /**\n     * Initialize the page.\n     *\n     * This will construct a series of objects needed to work with reviews\n     * and the review request. It will also begin checking for updates made\n     * to the page, notifying the user if anything has changed.\n     *\n     * Args:\n     *     attributes (object):\n     *         Initial attributes passed to the constructor. This is used to\n     *         access initial state that won't otherwise be stored in this\n     *         page.\n     */\n    initialize(attributes) {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        const reviewRequest = this.get('reviewRequest');\n\n        console.assert(\n            reviewRequest,\n            'The reviewRequest attribute or parse=true must be provided.');\n        console.assert(\n            this.get('pendingReview'),\n            'The pendingReview attribute or parse=true must be provided.');\n\n        this.commentIssueManager = new RB.CommentIssueManager({\n            reviewRequest: reviewRequest,\n        });\n\n        const editorData = attributes.editorData || {};\n        const fileAttachments = new Backbone.Collection(\n            _.map(editorData.fileAttachments,\n                  (editorData.mutableByUser\n                   ? attrs => reviewRequest.draft.createFileAttachment(attrs)\n                   : attrs => reviewRequest.createFileAttachment(attrs))),\n            {\n                model: RB.FileAttachment,\n            });\n\n        this.reviewRequestEditor = new RB.ReviewRequestEditor(\n            _.defaults({\n                commentIssueManager: this.commentIssueManager,\n                reviewRequest: reviewRequest,\n                fileAttachments: fileAttachments,\n            }, editorData),\n            {parse: true});\n\n        this.listenTo(reviewRequest, 'updated',\n                      info => this.trigger('reviewRequestUpdated', info));\n\n        if (this.get('checkForUpdates')) {\n            this._registerForUpdates();\n        }\n    },\n\n    /**\n     * Post a review marked as Ship It.\n     *\n     * This will create and publish a review, setting the Ship It state and\n     * changing the text to say \"Ship It!\".\n     */\n    markShipIt() {\n        const pendingReview = this.get('pendingReview');\n\n        pendingReview.ready({\n            ready() {\n                pendingReview.set({\n                    shipIt: true,\n                    bodyTop: gettext('Ship It!'),\n                });\n                pendingReview.publish();\n            },\n        });\n    },\n\n    /**\n     * Parse the data for the page.\n     *\n     * This will take data from the server and turn it into a series of\n     * objects and attributes needed for parts of the page.\n     *\n     * Args:\n     *     rsp (object):\n     *         The incoming data provided for the page.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes for the page.\n     */\n    parse(rsp) {\n        let reviewRequestData;\n\n        if (rsp.reviewRequestData) {\n            reviewRequestData = _.defaults({\n                state: RB.ReviewRequest[rsp.reviewRequestData.state],\n                visibility: RB.ReviewRequest['VISIBILITY_' +\n                                             rsp.reviewRequestData.visibility],\n            }, rsp.reviewRequestData);\n\n            if (reviewRequestData.repository) {\n                reviewRequestData.repository = new RB.Repository(\n                    _.defaults({\n                        localSitePrefix: rsp.reviewRequestData.localSitePrefix,\n                    }, rsp.reviewRequestData.repository));\n            }\n        }\n\n        const reviewRequest = new RB.ReviewRequest(\n            reviewRequestData,\n            {\n                extraDraftAttrs: rsp.extraReviewRequestDraftData,\n            });\n\n        return {\n            reviewRequest: reviewRequest,\n            pendingReview: reviewRequest.createReview(),\n            lastActivityTimestamp: rsp.lastActivityTimestamp,\n            checkForUpdates: rsp.checkForUpdates,\n            checkUpdatesType: rsp.checkUpdatesType,\n        };\n    },\n\n    /**\n     * Register for update notification to the review request from the server.\n     *\n     * The server will be periodically checked for new updates. When a new\n     * update arrives, an update bubble will be displayed in the bottom-right\n     * of the page, and if the user has allowed desktop notifications in their\n     * account settings, a desktop notification will be shown with the update\n     * information.\n     */\n    _registerForUpdates() {\n        this.get('reviewRequest').beginCheckForUpdates(\n            this.get('checkUpdatesType'),\n            this.get('lastActivityTimestamp'));\n    },\n});\n"]}