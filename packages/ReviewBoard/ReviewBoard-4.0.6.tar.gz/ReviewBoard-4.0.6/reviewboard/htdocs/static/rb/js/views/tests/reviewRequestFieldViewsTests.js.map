{"version":3,"sources":["reviewRequestFieldViewsTests.es6.js"],"names":[],"mappings":"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","file":"reviewRequestFieldViewsTests.js","sourcesContent":["suite('rb/views/reviewRequestFieldViews', function() {\n    let reviewRequest;\n    let draft;\n    let extraData;\n    let rawTextFields;\n    let editor;\n    let editorView;\n    let field;\n\n    beforeEach(function() {\n        reviewRequest = new RB.ReviewRequest({\n            id: 1,\n        });\n\n        draft = reviewRequest.draft;\n        extraData = draft.get('extraData');\n\n        rawTextFields = {\n            extra_data: {},\n        };\n        draft.set('rawTextFields', rawTextFields);\n\n        editor = new RB.ReviewRequestEditor({\n            reviewRequest: reviewRequest,\n        });\n\n        editorView = new RB.ReviewRequestEditorView({\n            model: editor,\n        });\n\n        spyOn(draft, 'save');\n        spyOn(draft, 'ready').and.callFake(function(options, context) {\n            options.ready.call(context);\n        });\n    });\n\n    describe('BaseFieldView', function() {\n        beforeEach(function() {\n            field = new RB.ReviewRequestFields.BaseFieldView({\n                model: editor,\n                fieldID: 'my_field',\n            });\n        });\n\n        describe('Initialization', function() {\n            it('Default behavior', function() {\n                expect(field.$el.data('field-id')).toBe('my_field');\n                expect(field.jsonFieldName).toBe('my_field');\n            });\n\n            it('With custom jsonFieldName', function() {\n                const field = new RB.ReviewRequestFields.BaseFieldView({\n                    model: editor,\n                    fieldID: 'my_field',\n                    jsonFieldName: 'my_custom_name',\n                });\n\n                expect(field.$el.data('field-id')).toBe('my_field');\n                expect(field.jsonFieldName).toBe('my_custom_name');\n            });\n        });\n\n        describe('Properties', function() {\n            it('fieldName', function() {\n                expect(field.fieldName()).toBe('myField');\n            });\n        });\n\n        describe('Methods', function() {\n            describe('_loadValue', function() {\n                it('Built-in field', function() {\n                    field.useExtraData = false;\n                    draft.set('myField', 'this is a test');\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n\n                it('Custom field', function() {\n                    extraData.my_field = 'this is a test';\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n\n                it('Custom field and custom jsonFieldName', function() {\n                    const field = new RB.ReviewRequestFields.BaseFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                    });\n\n                    extraData.foo = 'this is a test';\n\n                    expect(field._loadValue()).toBe('this is a test');\n                });\n            });\n\n            describe('_saveValue', function() {\n                it('Built-in field', function() {\n                    field.useExtraData = false;\n                    field._saveValue('test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        my_field: 'test',\n                    });\n                });\n\n                it('Custom field', function() {\n                    field._saveValue('this is a test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        'extra_data.my_field': 'this is a test',\n                    });\n                });\n\n                it('Custom field and custom jsonFieldName', function() {\n                    const field = new RB.ReviewRequestFields.BaseFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                    });\n\n                    field._saveValue('this is a test');\n\n                    expect(draft.save.calls.argsFor(0)[0].data).toEqual({\n                        'extra_data.foo': 'this is a test',\n                    });\n                });\n            });\n        });\n    });\n\n    describe('TextFieldView', function() {\n        beforeEach(function() {\n            field = new RB.ReviewRequestFields.TextFieldView({\n                model: editor,\n                fieldID: 'my_field',\n            });\n            editorView.addFieldView(field);\n        });\n\n        describe('Properties', function() {\n            describe('jsonTextTypeFieldName', function() {\n                it('With fieldID != \"text\"', function() {\n                    expect(field.jsonTextTypeFieldName)\n                        .toBe('my_field_text_type');\n                });\n\n                it('With fieldID = \"text\"', function() {\n                    field = new RB.ReviewRequestFields.TextFieldView({\n                        model: editor,\n                        fieldID: 'text',\n                    });\n\n                    expect(field.jsonTextTypeFieldName).toBe('text_type');\n                });\n            });\n\n            describe('richTextAttr', function() {\n                it('With allowRichText=true', function() {\n                    field.allowRichText = true;\n\n                    expect(field.richTextAttr()).toBe('myFieldRichText');\n                });\n\n                it('With allowRichText=false', function() {\n                    field.allowRichText = false;\n\n                    expect(field.richTextAttr()).toBe(null);\n                });\n            });\n        });\n\n        describe('Methods', function() {\n            describe('render', function() {\n                beforeEach(function() {\n                    field.$el.addClass('editable');\n                    rawTextFields.extra_data = {\n                        my_field: '**Hello world**',\n                        my_field_text_type: 'markdown',\n                    };\n                });\n\n                describe('With allowRichText=true', function() {\n                    beforeEach(function() {\n                        field.allowRichText = true;\n                    });\n\n                    it('With richText=true', function() {\n                        rawTextFields.extra_data.my_field_text_type =\n                            'markdown';\n\n                        field.render();\n\n                        expect(field.inlineEditorView.textEditor.richText)\n                            .toBe(true);\n                        expect(field.inlineEditorView.options.rawValue)\n                            .toBe('**Hello world**');\n                    });\n\n                    it('With richText=false', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'plain';\n\n                        field.render();\n\n                        expect(field.inlineEditorView.textEditor.richText)\n                            .toBe(false);\n                        expect(field.inlineEditorView.options.rawValue)\n                            .toBe('**Hello world**');\n                    });\n                });\n            });\n\n            describe('_formatField', function() {\n                it('With built-in field', function() {\n                    field.useExtraData = false;\n\n                    draft.set('myField', 'Hello world');\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('Hello world');\n                });\n\n                it('With custom field', function() {\n                    editorView.addFieldView(field);\n\n                    extraData.my_field = 'Hello world';\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('Hello world');\n                });\n\n                it('With formatValue as function', function() {\n                    field.formatValue = function(value) {\n                        this.$el.text(`[${value}]`);\n                    };\n\n                    extraData.my_field = 'Hello world';\n\n                    field._formatField();\n                    expect(field.$el.text()).toBe('[Hello world]');\n                });\n            });\n\n            describe('_getInlineEditorClass', function() {\n                it('With allowRichText=true', function() {\n                    field.allowRichText = true;\n\n                    expect(field._getInlineEditorClass())\n                        .toBe(RB.RichTextInlineEditorView);\n                });\n\n                it('With allowRichText=false', function() {\n                    field.allowRichText = false;\n\n                    expect(field._getInlineEditorClass())\n                        .toBe(RB.InlineEditorView);\n                });\n            });\n\n            describe('_loadRichTextValue', function() {\n                beforeEach(function() {\n                    field.allowRichText = true;\n                });\n\n                describe('With built-in field', function() {\n                    beforeEach(function() {\n                        field.useExtraData = false;\n                    });\n\n                    it('With value=undefined', function() {\n                        draft.set('myFieldRichText', undefined);\n                        expect(field._loadRichTextValue()).toBe(undefined);\n                    });\n\n                    it('With value=false', function() {\n                        draft.set('myFieldRichText', false);\n                        expect(field._loadRichTextValue()).toBe(false);\n                    });\n\n                    it('With value=true', function() {\n                        draft.set('myFieldRichText', true);\n                        expect(field._loadRichTextValue()).toBe(true);\n                    });\n                });\n\n                describe('With custom field', function() {\n                    it('With textType=undefined', function() {\n                        expect(field._loadRichTextValue()).toBe(undefined);\n                    });\n\n                    it('With textType=plain', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'plain';\n                        expect(field._loadRichTextValue()).toBe(false);\n                    });\n\n                    it('With textType=markdown', function() {\n                        rawTextFields.extra_data.my_field_text_type =\n                            'markdown';\n                        expect(field._loadRichTextValue()).toBe(true);\n                    });\n\n                    it('With textType=invalid value', function() {\n                        rawTextFields.extra_data.my_field_text_type = 'html';\n\n                        try {\n                            field._loadRichTextValue();\n                        } catch (e) {}\n\n                        expect(console.assert).toHaveBeenCalledWith(\n                            false,\n                            'Text type \"html\" in field \"my_field_text_type\" ' +\n                            'not supported.');\n                    });\n                });\n            });\n        });\n    });\n\n    describe('MultilineTextFieldView', function() {\n        describe('Initialization from DOM', function() {\n            let $el;\n\n            beforeEach(function() {\n                $el = $('<span data-allow-markdown=\"true\"/>')\n                    .text('DOM text value');\n            });\n\n            describe('allowRichText', function() {\n                it('allow-markdown=true', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(field.allowRichText).toBe(true);\n                });\n\n                it('allow-markdown=false', function() {\n\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.attr('data-allow-markdown', 'false'),\n                    });\n\n                    expect(field.allowRichText).toBe(false);\n                });\n\n                it('allow-markdown unset', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.removeAttr('data-allow-markdown'),\n                    });\n\n                    expect(field.allowRichText).toBe(undefined);\n                });\n            });\n\n            describe('Text value', function() {\n                it('raw-value set', function() {\n\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.attr('data-raw-value', 'attr text value'),\n                    });\n\n                    expect(extraData.foo).toBe('attr text value');\n                    expect($el.attr('data-raw-value')).toBe(undefined);\n                });\n\n                it('raw-value unset', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(extraData.foo).toBe('DOM text value');\n                });\n            });\n\n            describe('Text type value', function() {\n                it('rich-text class present', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el.addClass('rich-text'),\n                    });\n\n                    expect(extraData.foo_text_type).toBe('markdown');\n                });\n\n                it('rich-text class not present', function() {\n                    field = new RB.ReviewRequestFields.MultilineTextFieldView({\n                        model: editor,\n                        fieldID: 'my_field',\n                        jsonFieldName: 'foo',\n                        el: $el,\n                    });\n\n                    expect(extraData.foo_text_type).toBe('plain');\n                });\n            });\n        });\n    });\n});\n"]}