{"version":3,"sources":["fileAttachmentCommentBlockModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,0BAAH,GAAgC,EAAE,CAAC,oBAAH,CAAwB,MAAxB,CAA+B;AAC3D,EAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW;AACjB,IAAA,gBAAgB,EAAE,IADD;AAEjB,IAAA,2BAA2B,EAAE;AAFZ,GAAX,EAGP,EAAE,CAAC,oBAAH,CAAwB,SAAxB,CAAkC,QAH3B,CADiD;;AAM3D;AACJ;AACA;AACA;AACA;AACA;AACI,EAAA,gBAAgB,EAAE,EAZyC;;AAc3D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,aA5B2D,yBA4B7C,EA5B6C,EA4BzC;AACd,QAAM,OAAO,GAAG,KAAK,GAAL,CAAS,QAAT,EAAmB,2BAAnB,CACZ,EADY,EAEZ,KAAK,GAAL,CAAS,kBAAT,CAFY,EAGZ,KAAK,GAAL,CAAS,6BAAT,CAHY,CAAhB;;AAKA,IAAA,CAAC,CAAC,MAAF,CAAS,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAT,EACS,CAAC,CAAC,IAAF,CAAO,KAAK,UAAZ,EAAwB,KAAK,gBAA7B,CADT;;AAGA,WAAO,OAAP;AACH;AAtC0D,CAA/B,CAAhC","file":"fileAttachmentCommentBlockModel.js","sourcesContent":["/**\n * Represents the comments on a file attachment.\n *\n * FileAttachmentCommentBlock deals with creating and representing comments\n * that exist on a file attachment. It's a base class that is meant to be\n * subclassed.\n *\n * Model Attributes:\n *     fileAttachmentID (number):\n *         The ID of the file attachment being commented upon.\n *\n *     diffAgainstFileAttachmentID (number):\n *         An optional ID of the file attachment being diffed against.\n *\n * See Also:\n *     :js:class:`RB.AbstractCommentBlock`:\n *         For attributes defined on the base model.\n */\nRB.FileAttachmentCommentBlock = RB.AbstractCommentBlock.extend({\n    defaults: _.defaults({\n        fileAttachmentID: null,\n        diffAgainstFileAttachmentID: null\n    }, RB.AbstractCommentBlock.prototype.defaults),\n\n    /**\n     * The list of extra fields on this model.\n     *\n     * These will be stored on the server in the FileAttachmentComment's\n     * extra_data field.\n     */\n    serializedFields: [],\n\n    /**\n     * Create a FileAttachmentComment for the given comment ID.\n     *\n     * The subclass's storeCommentData will be called, allowing additional\n     * data to be stored along with the comment.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment to instantiate the model for.\n     *\n     * Returns:\n     *     RB.FileAttachmentComment:\n     *     The new comment model.\n     */\n    createComment(id) {\n        const comment = this.get('review').createFileAttachmentComment(\n            id,\n            this.get('fileAttachmentID'),\n            this.get('diffAgainstFileAttachmentID'));\n\n        _.extend(comment.get('extraData'),\n                 _.pick(this.attributes, this.serializedFields));\n\n        return comment;\n    },\n});\n"]}