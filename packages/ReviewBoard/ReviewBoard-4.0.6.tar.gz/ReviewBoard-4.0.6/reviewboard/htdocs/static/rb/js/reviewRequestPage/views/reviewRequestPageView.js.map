{"version":3,"sources":["reviewRequestPageView.es6.js"],"names":[],"mappings":"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","file":"reviewRequestPageView.js","sourcesContent":["(function() {\n\n\nconst commentTypeToIDPrefix = {\n    diff: '',\n    file: 'f',\n    screenshot: 's',\n};\n\n\n/**\n * Manages the review request page.\n *\n * This manages all the reviews on the page, diff fragment loading, and\n * other functionality needed for the main review request page.\n */\nRB.ReviewRequestPage.ReviewRequestPageView = RB.ReviewablePageView.extend({\n    events: _.extend({\n        'click #collapse-all': '_onCollapseAllClicked',\n        'click #expand-all': '_onExpandAllClicked',\n    }, RB.ReviewablePageView.prototype.events),\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.ReviewablePageView.prototype.initialize.apply(this, arguments);\n\n        this._entryViews = [];\n        this._entryViewsByID = {};\n        this._rendered = false;\n        this._issueSummaryTableView = null;\n\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this.diffFragmentQueue = new RB.DiffFragmentQueueView({\n            reviewRequestPath: reviewRequest.get('reviewURL'),\n            containerPrefix: 'comment_container',\n            queueName: 'diff_fragments',\n            el: document.getElementById('content'),\n            diffFragmentViewOptions: {\n                collapsible: true,\n            },\n        });\n\n        /*\n         * Listen for when a new set of updates have been processed. After\n         * processing, this will attempt to load any new diff fragments that\n         * may have been added in any updated views.\n         */\n        this.listenTo(this.model, 'updatesProcessed',\n                      () => this.diffFragmentQueue.loadFragments());\n\n        /*\n         * Listen for updates to any entries on the page. When updated,\n         * we'll store the collapse state on the entry so we can re-apply it\n         * after. We listen to the other events that are part of the update so\n         * we can update the DOM and restore state at the correct time.\n         */\n        this.listenTo(this.model, 'applyingUpdate:entry', (metadata, html) => {\n            const entryID = metadata.entryID;\n            const entryView = this._entryViewsByID[entryID];\n            const collapsed = entryView.isCollapsed();\n\n            this._onApplyingUpdate(entryView, metadata);\n\n            this.listenToOnce(\n                this.model,\n                `appliedModelUpdate:entry:${entryID}`,\n                (metadata, html) => this._reloadView(entryView, html));\n\n            this.listenToOnce(\n                this.model,\n                `appliedUpdate:entry:${entryID}`,\n                metadata => {\n                    this._onAppliedUpdate(entryView, metadata);\n\n                    if (collapsed) {\n                        entryView.collapse();\n                    } else {\n                        entryView.expand();\n                    }\n                });\n        });\n    },\n\n    /**\n     * Render the page.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewRequestPageView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.ReviewablePageView.prototype.render.call(this);\n\n        /*\n         * Render each of the entries on the page.\n         */\n        this._entryViews.forEach(entryView => entryView.render());\n\n        /*\n         * Navigate to the right anchor on the page, if there's a valid hash\n         * in the URL. We'll also do this whenever it changes, if the browser\n         * supports this.\n         */\n        this._onHashChanged();\n\n        if ('onhashchange' in window) {\n            window.onhashchange = this._onHashChanged.bind(this);\n        }\n\n        /*\n         * Load all the diff fragments queued up in each review.\n         */\n        this.diffFragmentQueue.loadFragments();\n\n        /*\n         * Set up the Issue Summary Table and begin listening for related\n         * events.\n         */\n        this._issueSummaryTableView =\n            new RB.ReviewRequestPage.IssueSummaryTableView({\n                el: $('#issue-summary'),\n                model: this.model.commentIssueManager,\n            });\n\n        this._issueSummaryTableView.render();\n\n        this.listenTo(this._issueSummaryTableView,\n                      'issueClicked',\n                      this._onIssueClicked);\n        this.listenTo(this.model, 'appliedUpdate:issue-summary-table',\n                      (metadata, html) => {\n            this._reloadView(this._issueSummaryTableView, html);\n        });\n\n        this._rendered = true;\n\n        return this;\n    },\n\n    /**\n     * Add a new entry and view to the page.\n     *\n     * Args:\n     *     entryView (RB.ReviewRequestPage.EntryView):\n     *         The new entry's view to add.\n     */\n    addEntryView(entryView) {\n        const entry = entryView.model;\n\n        this._entryViews.push(entryView);\n        this._entryViewsByID[entry.id] = entryView;\n        this.model.addEntry(entry);\n\n        if (this._rendered) {\n            entryView.render();\n        }\n    },\n\n    /**\n     * Queue a diff fragment for loading.\n     *\n     * The diff fragment will be part of a comment made on a diff.\n     *\n     * Args:\n     *     commentID (string):\n     *         The ID of the comment to load the diff fragment for.\n     *\n     *     key (string):\n     *         Either a single filediff ID, or a pair (filediff ID and\n     *         interfilediff ID) separated by a hyphen.\n     *\n     *     onFragmentRendered (function, optional):\n     *         Optional callback for when the view for the fragment has\n     *         rendered. Contains the view as a parameter.\n     */\n    queueLoadDiff(commentID, key, onFragmentRendered) {\n        this.diffFragmentQueue.queueLoad(commentID, key, onFragmentRendered);\n    },\n\n    /**\n     * Open a comment editor for the given comment.\n     *\n     * This is used when clicking Reply from a comment dialog on another\n     * page.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being edited (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being edited, if appropriate.\n     */\n    openCommentEditor(contextType, contextID) {\n        for (let i = 0; i < this._entryViews.length; i++) {\n            const entryView = this._entryViews[i];\n            const reviewReplyEditorView = (\n                _.isFunction(entryView.getReviewReplyEditorView)\n                ? entryView.getReviewReplyEditorView(contextType, contextID)\n                : null);\n\n            if (reviewReplyEditorView) {\n                reviewReplyEditorView.openCommentEditor();\n                break;\n            }\n        }\n    },\n\n    /**\n     * Reload the HTML for a view.\n     *\n     * This will replace the view's element with a new one consisting of the\n     * provided HTML. This is done in response to an update from the server.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view to set new HTML for.\n     *\n     *     html (string):\n     *         The new HTML to set.\n     */\n    _reloadView(view, html) {\n        const $oldEl = view.$el;\n        const $newEl = $(html);\n\n        view.setElement($newEl);\n        $oldEl.replaceWith($newEl);\n        view.render();\n    },\n\n    /**\n     * Handler for when a new update is being applied to a view.\n     *\n     * This will call the ``beforeApplyUpdate`` method on the view, if it\n     * exists. This is called before the model's equivalent handler.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view being updated.\n     *\n     *     metadata (object):\n     *         The metadata set in the update.\n     */\n    _onApplyingUpdate(view, metadata) {\n        if (view && _.isFunction(view.beforeApplyUpdate)) {\n            view.beforeApplyUpdate(metadata);\n        }\n    },\n\n    /**\n     * Handler for when a new update has been applied to a view.\n     *\n     * This will call the ``afterApplyUpdate`` method on the view, if it\n     * exists. This is called after the model's equivalent handler.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view that has been updated.\n     *\n     *     metadata (object):\n     *         The metadata set in the update.\n     */\n    _onAppliedUpdate(view, metadata) {\n        if (view && _.isFunction(view.afterApplyUpdate)) {\n            view.afterApplyUpdate(metadata);\n        }\n    },\n\n    /**\n     * Handler for when the location hash changes.\n     *\n     * This will attempt to locate a proper anchor point for the given\n     * hash, if one is provided, and scroll down to that anchor. The\n     * scrolling will take any docked floating banners (the review draft,\n     * specifically) into consideration to ensure the entirety of the comment\n     * is shown on-screen.\n     */\n    _onHashChanged() {\n        const hash = RB.getLocationHash();\n        let selector = null;\n\n        if (hash !== '') {\n            if (hash.includes('comment')) {\n                selector = `a[name=${hash}]`;\n            } else {\n                selector = `#${hash}`;\n            }\n        }\n\n        if (!selector) {\n            return;\n        }\n\n        /*\n         * If trying to link to some anchor in some entry, we'll expand the\n         * first entry containing that anchor.\n         */\n        for (let i = 0; i < this._entryViews.length; i++) {\n            const entryView = this._entryViews[i];\n            const $anchor = entryView.$(selector);\n\n            if ($anchor.length > 0) {\n                /*\n                 * We found the entry containing the specified anchor.\n                 * Expand it and stop searching the rest of the entries.\n                 */\n                entryView.expand();\n\n                /*\n                 * Scroll down to the particular anchor, now that the entry\n                 * is expanded.\n                 */\n                RB.scrollManager.scrollToElement($anchor);\n                break;\n            }\n        }\n    },\n\n    /**\n     * Handle a press on the Collapse All button.\n     *\n     * Collapses each entry.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onCollapseAllClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._entryViews.forEach(entryView => entryView.collapse());\n    },\n\n    /**\n     * Handle a press on the Expand All button.\n     *\n     * Expands each entry.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onExpandAllClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._entryViews.forEach(entryView => entryView.expand());\n    },\n\n    /**\n     * Handler for when an issue in the issue summary table is clicked.\n     *\n     * This will expand the review entry that contains the comment for the\n     * issue, and navigate to the comment.\n     *\n     * Args:\n     *     params (object):\n     *         Parameters passed to the event handler.\n     */\n    _onIssueClicked(params) {\n        const prefix = commentTypeToIDPrefix[params.commentType];\n        const selector = `#${prefix}comment${params.commentID}`;\n\n        this._entryViews.forEach(entryView => {\n            if (entryView.$el.find(selector).length > 0) {\n                entryView.expand();\n            }\n        });\n\n        window.location = params.commentURL;\n    },\n});\n\n\n})();\n"]}