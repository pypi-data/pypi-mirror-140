{"version":3,"sources":["issueSummaryTableView.es6.js"],"names":[],"mappings":"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","file":"issueSummaryTableView.js","sourcesContent":["/**\n * View that manages a display of issues filed on a review request.\n *\n * This displays all the issues filed against a review request, and allows\n * sorting by state and reviewer. As issues are updated on reviews, the\n * table is updated to reflect the new states.\n */\nRB.ReviewRequestPage.IssueSummaryTableView = Backbone.View.extend({\n    events: {\n        'change .rb-c-issue-summary-table__reviewer-filter':\n            '_onReviewerChanged',\n        'click thead th': '_onHeaderClicked',\n        'click .rb-c-tabs__tab': '_onTabChanged',\n        'click tbody tr[data-issue-id]': '_onIssueClicked',\n    },\n\n    /** Maps a status filter state to its corresponding selector. */\n    stateToSelectorMap: {\n        open: '.-is-open',\n        dropped: '.-is-dropped',\n        resolved: '.-is-resolved',\n        verifying: '.-is-verifying-resolved, .-is-verifying-dropped',\n        all: '',\n    },\n\n    /** Maps an issue status type to its corresponding icon. */\n    statusIconsMap: {\n        open: 'rb-icon-issue-open',\n        dropped: 'rb-icon-issue-dropped',\n        resolved: 'rb-icon-issue-resolved',\n        verifying: 'rb-icon-issue-verifying',\n    },\n\n    COLUMN_DESCRIPTION: 1,\n    COLUMN_REVIEWER: 2,\n    COLUMN_LAST_UPDATED: 3,\n\n    _noIssuesTemplate: _.template(dedent`\n        <tr class=\"rb-c-issue-summary-table__no-issues\">\n         <td colspan=\"5\"><em><%- text %></em></td>\n        </tr>\n    `),\n\n    /**\n     * Initialize the issue summary table.\n     */\n    initialize() {\n        this.statusFilterState = null;\n        this.reviewerFilterState = null;\n\n        // Maps a reviewer name to issues issued by the reviewer.\n        this.reviewerToSelectorMap = null;\n\n        // Maps comment IDs to rows in the table.\n        this.commentIDToRowMap = {};\n\n        this._lastWindowWidth = null;\n        this._$window = $(window);\n        this._$currentTab = null;\n\n        _.bindAll(this, '_onWindowResize');\n    },\n\n    /**\n     * Render the issue summary table.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.IssueSummaryTableView:\n     *     This instance, for chaining.\n     */\n    render() {\n        const $issueSummaryTable =\n            this.$el.children('.rb-c-issue-summary-table');\n\n        this._$header = $issueSummaryTable.children(\n            '.rb-c-review-request-field-tabular__header');\n        this._$tabs = this._$header.children('.rb-c-tabs');\n        this._$filters = this._$header.children(\n            '.rb-c-review-request-field-tabular__filters');\n        this._$reviewerFilter = this._$filters.children(\n            '.rb-c-issue-summary-table__reviewer-filter');\n        this._$table = $issueSummaryTable.children(\n            '.rb-c-review-request-field-tabular__data');\n        this._$thead = this._$table.children('thead');\n        this._$tbody = this._$table.children('tbody');\n        this._$reviewerHeader = this._$thead.find(\n            `tr :nth-child(${this.COLUMN_REVIEWER})`);\n        this._$noIssues = null;\n\n        let hasExistingState = false;\n\n        if (this.statusFilterState === null) {\n            this._$currentTab = this.$('.rb-c-tabs__tab.-is-active');\n            console.assert(this._$currentTab.length === 1);\n\n            this.statusFilterState = this._$currentTab.data('issue-state');\n        } else {\n            this.$('.rb-c-tabs__tab.-is-active').removeClass('-is-active');\n            this._$currentTab =\n                this.$('.rb-c-tabs__tab' +\n                       `[data-issue-state=${this.statusFilterState}]`)\n                    .addClass('-is-active');\n            hasExistingState = true;\n        }\n\n        this._buildMaps();\n\n        if (this.reviewerFilterState === null) {\n            this.reviewerFilterState = this._$reviewerFilter.val();\n        } else {\n            this._$reviewerFilter.val(this.reviewerFilterState);\n            hasExistingState = true;\n        }\n\n        if (hasExistingState) {\n            this._resetFilters();\n            this._applyFilters();\n        } else {\n            this._checkIssues();\n        }\n\n        this.stopListening(this.model, 'issueStatusUpdated');\n        this.listenTo(this.model, 'issueStatusUpdated',\n                      this._onIssueStatusChanged);\n\n        this._$window.off('resize', this._onWindowResize);\n        this._$window.on('resize', this._onWindowResize);\n        this._onWindowResize();\n\n        this.$('.user').user_infobox();\n        this.$('time.timesince').timesince();\n        Djblets.enableRetinaImages(this.$el);\n\n        return this;\n    },\n\n    /**\n     * Reset the filters on the list.\n     *\n     * This will unhide all rows, preparing the list for a new filter.\n     */\n    _resetFilters() {\n        this._getIssueRows().filter('.-is-hidden').removeClass('-is-hidden');\n    },\n\n    /**\n     * Apply the filters on the list.\n     *\n     * This will show or hide rows, based on the current state and reviewer\n     * filters.\n     */\n    _applyFilters() {\n        const sel = this.stateToSelectorMap[this.statusFilterState] +\n                    this.reviewerToSelectorMap[this.reviewerFilterState];\n\n        if (sel) {\n            this._getIssueRows()\n                .not(sel)\n                .addClass('-is-hidden');\n        }\n\n        this._checkIssues();\n        this._updateReviewersPos();\n    },\n\n    /**\n     * Update the position of the reviewers filter.\n     *\n     * The filter will be aligned with the header column in the table.\n     */\n    _updateReviewersPos() {\n        if (this._$reviewerHeader.is(':visible')) {\n            this._$filters.css({\n                left: this._$reviewerHeader.offset().left -\n                      this._$table.offset().left +\n                      this._$reviewerHeader.getExtents('p', 'l'),\n            });\n        } else {\n            this._$filters.css('left', '');\n        }\n    },\n\n    /**\n     * Update the UI to reflect whether the issue list is empty.\n     *\n     * If the issue list is empty, this will add a row saying there are no\n     * issues, using wording that reflects the current filter state.\n     */\n    _checkIssues() {\n        if (this._$noIssues !== null) {\n            this._$noIssues.remove();\n            this._$noIssues = null;\n        }\n\n        this._$thead.show();\n\n        if (this._getIssueRows().not('.-is-hidden').length === 0) {\n            const reviewerFilter = this.reviewerFilterState;\n            const statusFilter = this.statusFilterState;\n            let text;\n\n            if (reviewerFilter !== 'all') {\n                if (statusFilter === 'open') {\n                    text = interpolate(\n                        gettext('There are no open issues from %s'),\n                        [reviewerFilter]);\n                } else if (statusFilter === 'verifying') {\n                    text = interpolate(\n                        gettext('There are no issues waiting for verification from %s'),\n                        [reviewerFilter]);\n                } else if (statusFilter === 'dropped') {\n                    text = interpolate(\n                        gettext('There are no dropped issues from %s'),\n                        [reviewerFilter]);\n                } else if (statusFilter === 'resolved') {\n                    text = interpolate(\n                        gettext('There are no resolved issues from %s'),\n                        [reviewerFilter]);\n                }\n            } else {\n                if (statusFilter === 'open') {\n                    text = gettext('There are no open issues');\n                } else if (statusFilter === 'verifying') {\n                    text = gettext('There are no issues waiting for verification');\n                } else if (statusFilter === 'dropped') {\n                    text = gettext('There are no dropped issues');\n                } else if (statusFilter === 'resolved') {\n                    text = gettext('There are no resolved issues');\n                }\n            }\n\n            this._$thead.hide();\n\n            this._$noIssues =\n                $(this._noIssuesTemplate({\n                    text: text,\n                }))\n                .appendTo(this._$tbody);\n        }\n    },\n\n    /**\n     * Return the table rows containing issues.\n     *\n     * Returns:\n     *     jQuery:\n     *     A selector for the rows containing issues.\n     */\n    _getIssueRows() {\n        return this._$tbody\n            .children()\n            .not('.rb-c-issue-summary-table__no-issues');\n    },\n\n    /**\n     * Sort the issues by the selected column in ascending order.\n     *\n     * The Last Updated column will be sorted based on its timestamp. All\n     * other columns will be sorted based on their normalized text contents.\n     *\n     * Args:\n     *     colIndex (number):\n     *         The 0-based index of the column clicked.\n     *\n     *     ascending (boolean):\n     *         Whether to sort by ascending order.\n     */\n    _sortByCol(colIndex, ascending) {\n        this._$tbody.html(this._getIssueRows().sort((issueA, issueB) => {\n            const $issueA = $(issueA);\n            const $issueB = $(issueB);\n            const $columnA = $issueA.children(`td:nth-child(${colIndex})`);\n            const $columnB = $issueB.children(`td:nth-child(${colIndex})`);\n            let value1;\n            let value2;\n\n            if (colIndex === this.COLUMN_LAST_UPDATED) {\n                /*\n                 * Note that we're reversing the values here. We want newer\n                 * timestamps (which is \"greater\", comparison-wise).\n                 */\n                value1 = $columnB.children('time').attr('datetime');\n                value2 = $columnA.children('time').attr('datetime');\n            } else {\n                value1 = $columnA.text().strip().toLowerCase();\n                value2 = $columnB.text().strip().toLowerCase();\n            }\n\n            /*\n             * If the two values are the same, we'll want to order by\n             * issue ID instead, helping to keep ordering consistent within\n             * an author or published timestamp.\n             *\n             * They should always be in ascending order, relative to the\n             * column being sorted.\n             */\n            if (value1 === value2) {\n                const issueID1 = $issueA.data('issue-id');\n                const issueID2 = $issueB.data('issue-id');\n\n                if (ascending) {\n                    value1 = issueID1;\n                    value2 = issueID2;\n                } else {\n                    value1 = issueID2;\n                    value2 = issueID1;\n                }\n            }\n\n            /*\n             * Compute an initial value intended for ascending order. Then\n             * we'll negate it if sorting in descending order.\n             */\n            let result;\n\n            if (value1 < value2) {\n                result = -1;\n            } else if (value1 > value2) {\n                result = 1;\n            } else {\n                result = 0;\n            }\n\n            if (!ascending) {\n                result = -result;\n            }\n\n            return result;\n        }));\n    },\n\n    /**\n     * Build maps for looking up issue rows based on state.\n     *\n     * This will build a map (and filter entries) for reviewers, and build\n     * a map of comment IDs to rows.\n     */\n    _buildMaps() {\n        this._$reviewerFilter.children().not('[value=\"all\"]').remove();\n\n        this.reviewerToSelectorMap = {\n            all: '',\n        };\n\n        _.each(this._getIssueRows(), issueEl => {\n            const $issue = $(issueEl);\n\n            this.commentIDToRowMap[$issue.data('issue-id')] = $issue;\n\n            const reviewer = $issue.data('reviewer');\n\n            if (!_.has(this.reviewerToSelectorMap, reviewer)) {\n                this.reviewerToSelectorMap[reviewer] =\n                    `[data-reviewer=\"${reviewer}\"]`;\n                this._$reviewerFilter.append(\n                    $('<option>').text(reviewer).val(reviewer));\n            }\n        });\n    },\n\n    /**\n     * Handler for when the issue status of a comment changes.\n     *\n     * Updates the display of the table to reflect the state of that issue.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment whose issue has changed.\n     *\n     *     oldStatus (string):\n     *         The old status.\n     *\n     *     timestamp (Date):\n     *         The new timestamp for the comment.\n     */\n    _onIssueStatusChanged(comment, oldStatus, timestamp) {\n        const $entry = this.commentIDToRowMap[comment.id];\n        const newStatus = comment.get('issueStatus');\n\n        RB.scrollManager.markForUpdate(this.$el);\n\n        /* Update the icon for this entry to reflect the new status. */\n        $entry\n            .removeClass(`-is-${oldStatus}`)\n            .addClass(`-is-${newStatus}`)\n            .find('.rb-icon')\n                .removeClass(this.statusIconsMap[oldStatus])\n                .addClass(this.statusIconsMap[newStatus]);\n\n        /* Show or hide the entry according to the current filter state. */\n        if (this.statusFilterState !== newStatus &&\n            this.statusFilterState !== 'all') {\n            $entry.addClass('-is-hidden');\n        } else {\n            $entry.removeClass('-is-hidden');\n        }\n\n        /* Update the displayed counters for this issue type. */\n        const $oldCounter =\n            this._$tabs\n            .children(`[data-issue-state=${oldStatus}]`)\n            .find('.rb-c-issue-summary-table__counter');\n        const $newCounter =\n            this._$tabs\n            .children(`[data-issue-state=${newStatus}]`)\n            .find('.rb-c-issue-summary-table__counter');\n\n        $oldCounter.text(parseInt($oldCounter.text(), 10) - 1);\n        $newCounter.text(parseInt($newCounter.text(), 10) + 1);\n\n        /* Update the timestamp for this issue's entry. */\n        $entry.find('time')\n            .attr('datetime', new Date(timestamp).toISOString())\n            .text(timestamp)\n            .timesince();\n\n        /*\n         * If we're no longer showing any issues for this filter, update\n         * the table accordingly.\n         */\n        this._checkIssues();\n\n        /*\n         * The updates may have impacted the reviewers filter, so update its\n         * position.\n         */\n        this._updateReviewersPos();\n\n        /*\n         * Update the scroll position to counteract the addition/deletion\n         * of the entry in the issue summary table, so the page doesn't\n         * appear to jump.\n         */\n        RB.scrollManager.markUpdated(this.$el);\n    },\n\n    /**\n     * Handler for when a header on the table is clicked.\n     *\n     * This will sort the table by the header.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onHeaderClicked(evt) {\n        evt.stopPropagation();\n\n        if (this._getIssueRows().not('.-is-hidden').length !== 0) {\n            this._sortByCol(\n                $(evt.target).parent().children().index(evt.target) + 1,\n                !evt.shiftKey);\n        }\n    },\n\n    /**\n     * Handler for when an issue is clicked.\n     *\n     * This will notify any listeners to the ``issueClicked`` event that the\n     * issue has been clicked, providing the comment type and the issue ID.\n     *\n     * It will then navigate to the URL for that particular comment.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onIssueClicked(evt) {\n        if (evt.target.tagName === 'A') {\n            /* Allow the link to go through. */\n            return;\n        }\n\n        evt.stopPropagation();\n\n        /*\n         * Extract the comment's attributes from the issue element and trigger\n         * the issueClicked event so the page can navigate the user to the\n         * relevant issue comment.\n         */\n        const $el = $(evt.currentTarget);\n\n        this.trigger('issueClicked', {\n            commentType: $el.data('comment-type'),\n            commentID: $el.data('issue-id'),\n            commentURL: $el.data('comment-href'),\n        });\n    },\n\n    /**\n     * Handler for when the tab has changed.\n     *\n     * This will switch the view to show the issues that match the tab's\n     * issue state and the current reviewer filter.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onTabChanged(evt) {\n        const $tab = $(evt.currentTarget);\n\n        this._$currentTab.removeClass('-is-active');\n\n        this._resetFilters();\n        this.statusFilterState = $tab.data('issue-state');\n        this._applyFilters();\n\n        $tab.addClass('-is-active');\n        this._$currentTab = $tab;\n    },\n\n    /**\n     * Handler for when the reviewer filter changes.\n     *\n     * This will switch the view to show issues that match the reviewer\n     * and the current issue filter state.\n     */\n    _onReviewerChanged() {\n        this._resetFilters();\n        this.reviewerFilterState = this._$reviewerFilter.val();\n        this._applyFilters();\n    },\n\n    /**\n     * Handler for when the window resizes.\n     *\n     * Updates the calculated position of the reviewers filter.\n     */\n    _onWindowResize() {\n        const winWidth = this._$window.width();\n\n        if (winWidth !== this._lastWindowWidth) {\n            this._updateReviewersPos();\n        }\n\n        this._lastWindowWidth = winWidth;\n    }\n});\n"]}