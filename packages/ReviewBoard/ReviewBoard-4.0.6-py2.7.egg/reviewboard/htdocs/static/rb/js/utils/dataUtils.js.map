{"version":3,"sources":["dataUtils.es6.js"],"names":[],"mappings":"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","file":"dataUtils.js","sourcesContent":["RB.DataUtils = {\n    ArrayBufferTypes: {\n        int8: {\n            size: 1,\n            funcName: 'setInt8',\n        },\n        uint8: {\n            size: 1,\n            funcName: 'setUint8',\n        },\n        int16: {\n            size: 2,\n            funcName: 'setInt16',\n        },\n        uint16: {\n            size: 2,\n            funcName: 'setUint16',\n        },\n        int32: {\n            size: 4,\n            funcName: 'setInt32',\n        },\n        uint32: {\n            size: 4,\n            funcName: 'setUint32',\n        },\n        float32: {\n            size: 4,\n            funcName: 'setFloat32',\n        },\n        float64: {\n            size: 8,\n            funcName: 'setFloat64',\n        },\n    },\n\n    /**\n     * Read a Blob as an ArrayBuffer.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as an :js:class:`ArrayBuffer`.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting :js:class:`ArrayBuffer` as an argument.\n     */\n    readBlobAsArrayBuffer(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsArrayBuffer', blob, onLoaded);\n    },\n\n    /**\n     * Read a Blob as a text string.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting string as an argument.\n     */\n    readBlobAsString(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsText', blob, onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual ArrayBuffers.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s instances to read as\n     *         :js:class:`ArrayBuffer`s\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded :js:class:`ArrayBuffer`, in the order\n     *         provided for the blobs.\n     */\n    readManyBlobsAsArrayBuffers(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsArrayBuffer', blobs,\n                                      onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual text strings.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded string, in the order provided for the\n     *         blobs.\n     */\n    readManyBlobsAsStrings(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsString', blobs, onLoaded);\n    },\n\n    /**\n     * Build an ArrayBuffer based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`ArrayBuffer`. Each item in the schema is an object specifying\n     * the type and the list of values of that type to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         is an object that looks like::\n     *\n     *             {\n     *                 type: 'uint8', // Or another type\n     *                 values: [1, 2, 3, ...],\n     *             }\n     *\n     *         See :js:data:`RB.DataUtils.ArrayBufferTypes`.\n     *\n     * Returns:\n     *     ArrayBuffer:\n     *     The resulting buffer built from the schema.\n     */\n    buildArrayBuffer(schema) {\n        const ArrayBufferTypes = RB.DataUtils.ArrayBufferTypes;\n        let arrayLen = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n\n            arrayLen += ArrayBufferTypes[item.type].size * item.values.length;\n        }\n\n        const arrayBuffer = new ArrayBuffer(arrayLen);\n        const dataView = new DataView(arrayBuffer);\n        let pos = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n            const values = item.values;\n            const littleEndian = !item.bigEndian;\n            const typeInfo = ArrayBufferTypes[item.type];\n            const func = dataView[typeInfo.funcName];\n            const size = typeInfo.size;\n\n            for (let j = 0; j < values.length; j++) {\n                func.call(dataView, pos, values[j], littleEndian);\n                pos += size;\n            }\n        }\n\n        return arrayBuffer;\n    },\n\n    /**\n     * Build a Blob based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`Blob`. Each item in the schema is either an array of objects\n     * specifying the type and the list of values of that type to add (see\n     * :js:func:`RB.DataUtils.buildArrayBuffer` for details), a\n     * :js:class:`Blob`, or string to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         must be a :js:class:`Blob`, string, or an array of objects\n     *         supported by :js:func:`RB.DataUtils.buildArrayBuffer`.\n     *\n     * Returns:\n     *     Blob:\n     *     The resulting blob built from the schema.\n     */\n    buildBlob(schema) {\n        const parts = [];\n\n        for (let i = 0; i < schema.length; i++) {\n            const schemaItem = schema[i];\n\n            if (_.isArray(schemaItem)) {\n                parts.push(RB.DataUtils.buildArrayBuffer(schemaItem));\n            } else {\n                parts.push(schemaItem);\n            }\n        }\n\n        return new Blob(parts);\n    },\n\n    /**\n     * Read a Blob using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function designed to load a blob as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blob (Blob):\n     *         The blob to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting value as an argument.\n     */\n    _readBlobAs(readFuncName, blob, onLoaded) {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', () => onLoaded(reader.result));\n        reader[readFuncName](blob);\n    },\n\n    /**\n     * Read several Blobs using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function, chaining multiple results in order to asynchronously load\n     * each of the blobs as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blobs (Array):\n     *         The array of Blobs to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         an argument per value loaded.\n     */\n    _readManyBlobsAs(readFuncName, blobs, onLoaded) {\n        const loadFunc = RB.DataUtils[readFuncName];\n        let result = new Array(blobs.length);\n        let numLoaded = 0;\n\n        function onBlobLoaded(i, text) {\n            result[i] = text;\n            numLoaded++;\n\n            if (numLoaded === blobs.length) {\n                onLoaded.apply(null, result);\n            }\n        }\n\n        blobs.forEach((blob, i) => {\n            loadFunc(blob, text => onBlobLoaded(i, text));\n        });\n    },\n};\n"]}