{"version":3,"sources":["regionCommentBlockModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,kBAAH,GAAwB,EAAE,CAAC,0BAAH,CAA8B,MAA9B,CAAqC;AACzD,EAAA,QAAQ,EAAE,CAAC,CAAC,QAAF,CAAW;AACjB,IAAA,CAAC,EAAE,IADc;AAEjB,IAAA,CAAC,EAAE,IAFc;AAGjB,IAAA,KAAK,EAAE,IAHU;AAIjB,IAAA,MAAM,EAAE;AAJS,GAAX,EAKP,EAAE,CAAC,oBAAH,CAAwB,SAAxB,CAAkC,QAL3B,CAD+C;AAQzD,EAAA,gBAAgB,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,OAAX,EAAoB,QAApB,CARuC;;AAUzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,KAxByD,iBAwBnD,MAxBmD,EAwB3C;AACV,IAAA,MAAM,CAAC,CAAP,GAAW,QAAQ,CAAC,MAAM,CAAC,CAAR,EAAW,EAAX,CAAR,IAA0B,SAArC;AACA,IAAA,MAAM,CAAC,CAAP,GAAW,QAAQ,CAAC,MAAM,CAAC,CAAR,EAAW,EAAX,CAAR,IAA0B,SAArC;AACA,IAAA,MAAM,CAAC,KAAP,GAAe,QAAQ,CAAC,MAAM,CAAC,KAAR,EAAe,EAAf,CAAR,IAA8B,SAA7C;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,QAAQ,CAAC,MAAM,CAAC,MAAR,EAAgB,EAAhB,CAAR,IAA+B,SAA/C;AAEA,WAAO,MAAP;AACH,GA/BwD;;AAiCzD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,eA3CyD,6BA2CvC;AACd,WAAO,CAAC,CAAC,OAAF,CAAU,KAAK,GAAL,CAAS,oBAAT,CAAV,CAAP;AACH,GA7CwD;;AA+CzD;AACJ;AACA;AACA;AACA;AACA;AACI,EAAA,sBArDyD,oCAqDhC;AAAA;;AACrB,QAAM,YAAY,GAAG,KAAK,GAAL,CAAS,cAAT,CAArB;AAEA,IAAA,YAAY,CAAC,KAAb,CAAmB;AACf,MAAA,KAAK,EAAE,iBAAM;AACT,YAAM,SAAS,GAAG,YAAY,CAAC,GAAb,CAAiB,WAAjB,CAAlB;AAEA,QAAA,SAAS,CAAC,CAAV,GAAc,KAAI,CAAC,GAAL,CAAS,GAAT,CAAd;AACA,QAAA,SAAS,CAAC,CAAV,GAAc,KAAI,CAAC,GAAL,CAAS,GAAT,CAAd;AACA,QAAA,SAAS,CAAC,KAAV,GAAkB,KAAI,CAAC,GAAL,CAAS,OAAT,CAAlB;AACA,QAAA,SAAS,CAAC,MAAV,GAAmB,KAAI,CAAC,GAAL,CAAS,QAAT,CAAnB;AAEA,QAAA,YAAY,CAAC,IAAb,CAAkB;AACd,UAAA,KAAK,EAAE,CACH,cADG,EAEH,cAFG,EAGH,kBAHG,EAIH,mBAJG,CADO;AAOd,UAAA,aAAa,EAAE;AAPD,SAAlB;AASH;AAlBc,KAAnB;AAoBH;AA5EwD,CAArC,CAAxB","file":"regionCommentBlockModel.js","sourcesContent":["/**\n * Represents the comments on a region of an image or document.\n *\n * RegionCommentBlock deals with creating and representing comments\n * that exist in a specific region of some content.\n *\n * Model Attributes:\n *     x (number):\n *         The X position of the region being commented upon.\n *\n *     y (number):\n *         The Y position of the region being commented upon.\n *\n *     width (number):\n *         The width of the region being commented upon.\n *\n *     height (number):\n *         The height of the region being commented upon.\n *\n * See Also:\n *     :js:class:`RB.FileAttachmentCommentBlock`:\n *         For attributes defined on the base model.\n *\n *     :js:class:`RB.AbstractCommentBlock`:\n *         For attributes defined on all comment block models.\n */\nRB.RegionCommentBlock = RB.FileAttachmentCommentBlock.extend({\n    defaults: _.defaults({\n        x: null,\n        y: null,\n        width: null,\n        height: null,\n    }, RB.AbstractCommentBlock.prototype.defaults),\n\n    serializedFields: ['x', 'y', 'width', 'height'],\n\n    /**\n     * Parse the incoming attributes for the comment block.\n     *\n     * The fields are stored server-side as strings, so we need to convert\n     * them back to integers where appropriate.\n     *\n     * Args:\n     *     fields (object):\n     *         The serialized fields for the comment.\n     *\n     * Returns:\n     *     object:\n     *     The parsed data.\n     */\n    parse(fields) {\n        fields.x = parseInt(fields.x, 10) || undefined;\n        fields.y = parseInt(fields.y, 10) || undefined;\n        fields.width = parseInt(fields.width, 10) || undefined;\n        fields.height = parseInt(fields.height, 10) || undefined;\n\n        return fields;\n    },\n\n    /**\n     * Return whether the bounds of this region can be updated.\n     *\n     * If there are any existing published comments on this region, it\n     * cannot be updated.\n     *\n     * Returns:\n     *     boolean:\n     *     A value indicating whether new bounds can be set for this region.\n     */\n    canUpdateBounds() {\n        return _.isEmpty(this.get('serializedComments'));\n    },\n\n    /**\n     * Save the new bounds of the draft comment to the server.\n     *\n     * The new bounds will be stored in the comment's ``x``, ``y``,\n     * ``width``, and ``height`` keys in ``extra_data``.\n     */\n    saveDraftCommentBounds() {\n        const draftComment = this.get('draftComment');\n\n        draftComment.ready({\n            ready: () => {\n                const extraData = draftComment.get('extraData');\n\n                extraData.x = this.get('x');\n                extraData.y = this.get('y');\n                extraData.width = this.get('width');\n                extraData.height = this.get('height');\n\n                draftComment.save({\n                    attrs: [\n                        'extra_data.x',\n                        'extra_data.y',\n                        'extra_data.width',\n                        'extra_data.height',\n                    ],\n                    boundsUpdated: true,\n                });\n            }\n        });\n    },\n});\n"]}