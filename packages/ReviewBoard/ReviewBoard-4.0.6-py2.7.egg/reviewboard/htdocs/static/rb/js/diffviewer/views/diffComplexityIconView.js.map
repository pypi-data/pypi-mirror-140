{"version":3,"sources":["diffComplexityIconView.es6.js"],"names":[],"mappings":"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","file":"diffComplexityIconView.js","sourcesContent":["/**\n * Renders an icon showing the general complexity of a diff.\n *\n * This icon is a pie graph showing the percentage of inserts vs deletes\n * vs replaces. The size of the white inner radius is a relative indicator\n * of how large the change is for the file, representing the unchanged lines.\n * Smaller inner radiuses indicate much larger changes, whereas larger\n * radiuses represent smaller changes.\n *\n * Callers are not required to supply the total number of lines or the number\n * of replaces, allowing this to be used when only the most basic insert and\n * delete counts are available.\n */\nRB.DiffComplexityIconView = Backbone.View.extend({\n    ICON_SIZE: 20,\n\n    /**\n     * Initialize the view.\n     *\n     * Each of the provided values will be normalized to something\n     * the view expects.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     numInserts (number, optional):\n     *         The number of inserts in the diff file.\n     *\n     *     numDeletes (number, optional):\n     *         The number of deletes in the diff file.\n     *\n     *     numReplaces (number, optional):\n     *         The number of replaces in the diff file.\n     *\n     *     totalLines (number, optional):\n     *         The total number of lines in the file.\n     */\n    initialize(options) {\n        this.numInserts = options.numInserts || 0;\n        this.numDeletes = options.numDeletes || 0;\n        this.numReplaces = options.numReplaces || 0;\n        this.totalLines = options.totalLines || null;\n    },\n\n    /**\n     * Render the icon.\n     *\n     * Returns:\n     *     RB.DiffComplexityIconView:\n     *     This object, for chaining.\n     */\n    render() {\n        const numTotal = this.numInserts + this.numDeletes + this.numReplaces;\n        const numInsertsPct = this.numInserts / numTotal;\n        const numDeletesPct = this.numDeletes / numTotal;\n        const numReplacesPct = this.numReplaces / numTotal;\n        const minValue = 360 * 0.15;\n        const innerRadius = (\n            0.5 * (this.totalLines === null\n                   ? 1\n                   : (this.totalLines - numTotal) / this.totalLines));\n        const iconColors = RB.DiffComplexityIconView.getIconColors();\n\n        this.$el\n            .width(this.ICON_SIZE)\n            .height(this.ICON_SIZE)\n            .plot(\n                [\n                    {\n                        color: iconColors.insertColor,\n                        data: this._clampValue(numInsertsPct * 360, minValue)\n                    },\n                    {\n                        color: iconColors.deleteColor,\n                        data: this._clampValue(numDeletesPct * 360, minValue)\n                    },\n                    {\n                        color: iconColors.replaceColor,\n                        data: this._clampValue(numReplacesPct * 360, minValue)\n                    },\n                ],\n                {\n                    series: {\n                        pie: {\n                            show: true,\n                            innerRadius: innerRadius,\n                            radius: 0.8,\n                        },\n                    },\n                }\n            );\n\n        return this;\n    },\n\n    /**\n     * Clamp the number to be, at minimum, minValue, unless it is 0.\n     *\n     * Args:\n     *     val (number):\n     *         The number to clamp.\n     *\n     *     minValue (number):\n     *         The minimum to clamp ``val`` to.\n     *\n     * Returns:\n     *     number:\n     *     The clamped number.\n     */\n    _clampValue(val, minValue) {\n        return val === 0 ? 0 : Math.max(val, minValue);\n    },\n}, {\n    _iconColors: null,\n\n    /**\n     * Return the colors used for the complexity icons.\n     *\n     * This will create a temporary icon on the DOM and apply the CSS\n     * styles for each type of change the icon can show. It will then\n     * copy these colors, caching them for all future icons, and return\n     * them.\n     *\n     * Returns:\n     *     object:\n     *     An object containing the colors to use for the icon.\n     */\n    getIconColors() {\n        if (!this._iconColors) {\n            this._iconColors = {};\n\n            const $iconColor = $('<div/>')\n                .hide()\n                .appendTo(document.body);\n\n            $iconColor[0].className = 'diff-changes-icon-insert';\n            this._iconColors.insertColor = $iconColor.css('color');\n\n            $iconColor[0].className = 'diff-changes-icon-replace';\n            this._iconColors.replaceColor = $iconColor.css('color');\n\n            $iconColor[0].className = 'diff-changes-icon-delete';\n            this._iconColors.deleteColor = $iconColor.css('color');\n\n            $iconColor.remove();\n        }\n\n        return this._iconColors;\n    },\n});\n"]}