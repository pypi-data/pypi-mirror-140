{"version":3,"sources":["diffModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,IAAH,GAAU,EAAE,CAAC,YAAH,CAAgB,MAAhB,CAAuB;AAC7B,EAAA,QAD6B,sBAClB;AACP,WAAO,CAAC,CAAC,QAAF,CAAW;AACd,MAAA,IAAI,EAAE,IADQ;AAEd,MAAA,UAAU,EAAE,IAFE;AAGd,MAAA,OAAO,EAAE;AAHK,KAAX,EAIJ,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EAJI,CAAP;AAKH,GAP4B;AAS7B,EAAA,YAAY,EAAE,MATe;AAW7B,EAAA,aAAa,EAAE;AACX,IAAA,IAAI,EAAE,MADK;AAEX,IAAA,UAAU,EAAE;AAFD,GAXc;AAgB7B,EAAA,eAAe,EAAE,CACb,SADa,EAEb,MAFa,EAGb,YAHa,EAIf,MAJe,CAIR,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,eAJlB,CAhBY;AAsB7B,EAAA,eAAe,EAAE,CAAC,MAAD,EAAS,kBAAT,CAtBY;AAwB7B,EAAA,OAAO,EAAE,OAxBoB;;AA0B7B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,cArC6B,0BAqCd,GArCc,EAqCT;AAChB,QAAI,GAAG,CAAC,GAAJ,CAAQ,IAAR,KAAiB,EAAE,CAAC,SAAH,CAAa,mBAAlC,EAAuD;AACnD,aAAO,WAAW,2FAEd;AACI,QAAA,IAAI,EAAE,GAAG,CAAC,IADd;AAEI,QAAA,QAAQ,EAAE,GAAG,CAAC;AAFlB,OAFc,EAMd,IANc,CAAlB;AAOH;;AAED,WAAO,GAAG,CAAC,GAAJ,CAAQ,GAAf;AACH;AAjD4B,CAAvB,CAAV","file":"diffModel.js","sourcesContent":["/**\n * A diff to be uploaded to a server.\n *\n * For now, this is used only for uploading new diffs.\n *\n * It is expected that parentObject will be set to a ReviewRequest instance.\n */\nRB.Diff = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            diff: null,\n            parentDiff: null,\n            basedir: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'diff',\n\n    attrToJsonMap: {\n        diff: 'path',\n        parentDiff: 'parent_diff_path'\n    },\n\n    serializedAttrs: [\n        'basedir',\n        'diff',\n        'parentDiff'\n    ].concat(RB.BaseResource.prototype.serializedAttrs),\n\n    payloadFileKeys: ['path', 'parent_diff_path'],\n\n    listKey: 'diffs',\n\n    /**\n     * Return a user-facing error string for a given server response.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     string:\n     *     A string to show to the user.\n     */\n    getErrorString(rsp) {\n        if (rsp.err.code === RB.APIErrors.REPO_FILE_NOT_FOUND) {\n            return interpolate(\n                gettext('The file \"%(file)s\" (revision %(revision)s) was not found in the repository'),\n                {\n                    file: rsp.file,\n                    revision: rsp.revision\n                },\n                true);\n        }\n\n        return rsp.err.msg;\n    }\n});\n"]}