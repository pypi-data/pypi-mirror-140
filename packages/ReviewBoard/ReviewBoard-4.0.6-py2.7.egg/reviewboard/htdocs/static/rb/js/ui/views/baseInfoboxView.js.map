{"version":3,"sources":["baseInfoboxView.es6.js"],"names":[],"mappings":"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","file":"baseInfoboxView.js","sourcesContent":["/**\n * An infobox pop-up.\n *\n * This binds to an ``<a>`` element (expected to be either a bug, a user, or a\n * review request right now), and loads the contents of the infobox from a URL\n * built from that element's ``href`` attribute plus the string \"infobox/\".\n */\nRB.BaseInfoboxView = Backbone.View.extend({\n    /**\n     * The unique ID for the infobox.\n     *\n     * This will also be used as the CSS class for the infobox.\n     */\n    infoboxID: null,\n\n    DEFAULT_POSITIONING: {\n        side: 'tb',\n        xOffset: -20,\n        yDistance: 10,\n    },\n\n    events: {\n        'mouseenter .infobox-hover-item-anchor': '_onHoverItemMouseEnter',\n        'mouseleave .infobox-hover-item': '_onHoverItemMouseLeave',\n        'mouseenter .infobox-scrollable-section': '_onScrollableMouseEnter',\n        'mouseleave .infobox-scrollable-section': '_onScrollableMouseLeave',\n    },\n\n    /**\n     * Initialize the infobox.\n     */\n    initialize() {\n        /* Set the default positioning. This can be overridden by pages. */\n        this.positioning = this.DEFAULT_POSITIONING;\n\n        this._scrollbarWidth = null;\n    },\n\n    /**\n     * Return the class name for the infobox.\n     *\n     * Returns:\n     *     string:\n     *     The CSS class name for the infobox element.\n     */\n    className() {\n        return `infobox ${this.infoboxID}`;\n    },\n\n    /**\n     * Return the infobox contents URL for a given target.\n     *\n     * By default, this uses the ``href`` argument on the target, appending\n     * ``infobox/``. Infoboxes can override this to provide a different URL.\n     */\n    getURLForTarget($target) {\n        return `${$target.attr('href')}infobox/`;\n    },\n\n    /**\n     * Set new contents for the infobox.\n     *\n     * This will replace the HTML of the infobox element and then cause\n     * :js:meth:`render` to be called.\n     *\n     * Args:\n     *     html (string):\n     *         The new HTML to set.\n     */\n    setContents(html) {\n        this.$el.html(html);\n        this.render();\n    },\n\n    /**\n     * Render the infobox.\n     *\n     * Subclasses can override this to provide specific rendering. By default,\n     * there's no custom rendering performed here.\n     *\n     * Subclasses should always call the parent method.\n     *\n     * Returns:\n     *     RB.BaseInfoboxView:\n     *     This infobox instance, for chaining.\n     */\n    render() {\n        /*\n         * We want to be smart about how the scrollbar is handled when\n         * hovering over scrollable sections. If we leave this up to CSS,\n         * the contents within will either get less space on hover, possibly\n         * wrapping (due to the scrollbars appearing), or the window will\n         * expand, potentially influencing other elements in the infobox.\n         * Neither are good.\n         *\n         * So what we do is compute the width of the scrollbar and reserve\n         * that much space to the right of the content. After we have that,\n         * we figure out the natural width for this infobox and then force\n         * that width so that the infobox can't unexpectedly widen.\n         *\n         * When hovering over the scrollable section, the additional padding\n         * will go away and the scrollbar will appear, ensuring that neither\n         * the content nor the window will alter in size.\n         */\n        this._scrollbarWidth = null;\n\n        this.$el\n            .css('width', '')\n            .find('.infobox-scrollable-section')\n                .css('padding-right', this._getScrollbarWidth());\n\n        _.defer(() => this.$el.width(this.$el.width()));\n\n        return this;\n    },\n\n    /**\n     * Return the width of the scrollbar.\n     *\n     * This will create a temporary off-screen element, measure its width,\n     * and then force the display of a scrollbar, and measure that. The\n     * difference in widths is the width of the scrollbar.\n     *\n     * This value may be 0, depending on how the browser renders scrollbars\n     * for content. macOS, by default, won't have any measurable width for the\n     * scrollbar.\n     *\n     * Returns:\n     *     number:\n     *     The width of the scrollbar.\n     */\n    _getScrollbarWidth() {\n        if (this._scrollbarWidth === null) {\n            const $el = $('<div>test</div>')\n                .css({\n                    visibility: 'hidden',\n                    position: 'absolute',\n                    left: -10000,\n                    top: -10000,\n                })\n                .appendTo(document.body);\n            const width = $el.width();\n\n            $el.css('overflow-y', 'scroll');\n            const newWidth = $el.width();\n\n            $el.remove();\n\n            this._scrollbarWidth = newWidth - width;\n        }\n\n        return this._scrollbarWidth;\n    },\n\n    /**\n     * Handler for mouseenter events on hover item anchors.\n     *\n     * This will display the hover details for the item.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseenter event.\n     */\n    _onHoverItemMouseEnter(evt) {\n        $(evt.target).closest('.infobox-hover-item')\n            .addClass('infobox-hover-item-opened');\n    },\n\n    /**\n     * Handler for mouseleave events on hover items or their children.\n     *\n     * This will hide the hover details for the item.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseleave event.\n     */\n    _onHoverItemMouseLeave(evt) {\n        $(evt.target).closest('.infobox-hover-item')\n            .removeClass('infobox-hover-item-opened');\n    },\n\n    /**\n     * Handler for mouseenter events on the description area.\n     *\n     * This will turn off the padding so the scrollbar has room.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseenter event.\n     */\n    _onScrollableMouseEnter(evt) {\n        $(evt.target).closest('.infobox-scrollable-section')\n            .css('padding-right', 0);\n    },\n\n    /**\n     * Handler for mouseleave events on the description area.\n     *\n     * This will re-enable the padding where the scrollbar would be.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseleave event.\n     */\n    _onScrollableMouseLeave(evt) {\n        $(evt.target).closest('.infobox-scrollable-section')\n            .css('padding-right', this._getScrollbarWidth());\n    },\n});\n"]}