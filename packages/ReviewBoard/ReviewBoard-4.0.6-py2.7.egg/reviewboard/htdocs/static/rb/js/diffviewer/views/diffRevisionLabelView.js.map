{"version":3,"sources":["diffRevisionLabelView.es6.js"],"names":[],"mappings":"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","file":"diffRevisionLabelView.js","sourcesContent":["/**\n * A view which explains the currently-shown revision of the diff.\n */\nRB.DiffRevisionLabelView = Backbone.View.extend({\n    events: {\n        'click .select-latest': '_onSelectLatest',\n        'click .select-changed': '_onSelectChanged',\n    },\n\n    /**\n     * Templates for various strings.\n     *\n     * We use _.template instead of interpolate to make sure that revision\n     * strings are HTML-escaped.\n     */\n    template: _.template(dedent`\n        <h1><%- header %></h1>\n        <% if (detail) { %><p><%= detail %><% } %>\n    `),\n    _interdiffTemplate: _.template(gettext(\n        'Changes between revision <%- revision %> and <%- interdiffRevision %>')),\n    _latestTemplate: _.template(gettext(\n        'Diff Revision <%- revision %> (Latest)')),\n    _oldHeaderTemplate: _.template(gettext('Diff Revision <%- revision %>')),\n    _oldDetailTemplate: _.template(\n        /* Translators: This string should be valid HTML (including any necessary escaping for entities). */\n        gettext('This is not the most recent revision of the diff. The <a href=\"#\" class=\"select-latest\">latest diff</a> is revision <%- latestRevision %>. <a href=\"#\" class=\"select-changed\">See what\\'s changed.</a>')),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this.listenTo(this.model, 'change', this.render);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.DiffRevisionLabelView:\n     *     This object, for chaining.\n     */\n    render() {\n        const revision = this.model.get('revision');\n        const latestRevision = this.model.get('latestRevision');\n        let header = '';\n        let detail = null;\n\n        if (this.model.get('isInterdiff')) {\n            const interdiffRevision = this.model.get('interdiffRevision');\n\n            header = this._interdiffTemplate({\n                revision: revision,\n                interdiffRevision: interdiffRevision,\n            });\n        } else if (revision === latestRevision) {\n            header = this._latestTemplate({\n                revision: revision,\n            });\n        } else if (this.model.get('isDraftDiff')) {\n            header = gettext('Draft diff');\n            /* Translators: This string should be valid HTML (including any necessary escaping for entities). */\n            detail = gettext('This diff is part of your current draft. Other users will not see this diff until you publish your draft.');\n        } else {\n            header = this._oldHeaderTemplate({\n                revision: revision,\n            });\n            detail = this._oldDetailTemplate({\n                revision: revision,\n                latestRevision: latestRevision,\n            });\n        }\n\n        this.$el.html(this.template({\n            header: header,\n            detail: detail,\n        }));\n\n        return this;\n    },\n\n    /**\n     * Callback when the \"latest diff\" link is clicked.\n     *\n     * This is shown in the \"This is not the most recent revision\"\n     * explanation.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onSelectLatest(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.trigger('revisionSelected',\n                     [0, this.model.get('latestRevision')]);\n    },\n\n    /*\n     * Callback for when \"See what's changed\" is clicked.\n     *\n     * This is shown in the \"This is not the most recent revision\"\n     * explanation.\n     *\n     * Args:\n     *     ev (Event):\n     *         The click event.\n     */\n    _onSelectChanged(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        this.trigger('revisionSelected',\n                     [this.model.get('revision'),\n                      this.model.get('latestRevision')]);\n    },\n});\n"]}