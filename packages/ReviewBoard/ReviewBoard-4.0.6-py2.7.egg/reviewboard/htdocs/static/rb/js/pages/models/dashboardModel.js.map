{"version":3,"sources":["dashboardModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,SAAH,GAAe,EAAE,CAAC,YAAH,CAAgB,MAAhB,CAAuB;AAClC,EAAA,aAAa,EAAE,EAAE,CAAC,aADgB;;AAGlC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,mBApBkC,+BAoBd,OApBc,EAoBL;AACzB,QAAM,cAAc,GAAG,KAAK,SAAL,CAAe,KAAf,EAAvB;AACA,QAAM,SAAS,GAAG,EAAlB;AACA,QAAM,QAAQ,GAAG,EAAjB;;AAEA,aAAS,SAAT,GAAqB;AACjB,UAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,aAAK,SAAL,CAAe,KAAf;AACA,aAAK,OAAL,CAAa,SAAb;AACA,QAAA,OAAO,CAAC,MAAR,CAAe,SAAf,EAA0B,QAA1B;AACA;AACH;;AAED,UAAM,aAAa,GAAG,cAAc,CAAC,KAAf,EAAtB;AAEA,MAAA,aAAa,CAAC,KAAd,CAAoB;AAChB,QAAA,IAAI,EAAE,OAAO,CAAC,SADE;AAEhB,QAAA,OAAO,EAAE;AAAA,iBAAM,SAAS,CAAC,IAAV,CAAe,aAAf,CAAN;AAAA,SAFO;AAGhB,QAAA,KAAK,EAAE;AAAA,iBAAM,QAAQ,CAAC,IAAT,CAAc,aAAd,CAAN;AAAA,SAHS;AAIhB,QAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,IAAf;AAJM,OAApB;AAMH;;AAED,IAAA,SAAS,CAAC,IAAV,CAAe,IAAf;AACH,GA5CiC;;AA8ClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,gBA1DkC,4BA0DjB,cA1DiB,EA0DD;AAC7B,QAAM,cAAc,GAAG,KAAK,SAAL,CAAe,KAAf,EAAvB;AACA,QAAM,SAAS,GAAG,EAAlB;AACA,QAAM,QAAQ,GAAG,EAAjB;;AAEA,aAAS,QAAT,GAAoB;AAAA;;AAChB,UAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EAAiC;AAC7B,aAAK,SAAL,CAAe,KAAf;AACA,aAAK,OAAL,CAAa,SAAb;AACA;AACH;;AAED,UAAM,aAAa,GAAG,cAAc,CAAC,KAAf,EAAtB;AAEA,MAAA,cAAc,CACV,aADU,EAEV;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,SAAS,CAAC,IAAV,CAAe,aAAf;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AACH,SAJL;AAKI,QAAA,KAAK,EAAE,iBAAM;AACT,UAAA,QAAQ,CAAC,IAAT,CAAc,aAAd;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AACH;AARL,OAFU,CAAd;AAYH;;AAED,IAAA,QAAQ,CAAC,IAAT,CAAc,IAAd;AACH;AAvFiC,CAAvB,CAAf","file":"dashboardModel.js","sourcesContent":["/**\n * Models the dashboard and its operations.\n *\n * This will keep track of any selected review requests, and can\n * perform operations on them.\n */\nRB.Dashboard = RB.DatagridPage.extend({\n    rowObjectType: RB.ReviewRequest,\n\n    /**\n     * Close all selected review requests.\n     *\n     * This will keep track of all the successes and failures and report\n     * them back to the caller once completed.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     closeType (string):\n     *         The close type to use (submitted or discarded).\n     *\n     *     onDone (function):\n     *         A function to call when the operation is complete.\n     */\n    closeReviewRequests(options) {\n        const reviewRequests = this.selection.clone();\n        const successes = [];\n        const failures = [];\n\n        function closeNext() {\n            if (reviewRequests.length === 0) {\n                this.selection.reset();\n                this.trigger('refresh');\n                options.onDone(successes, failures);\n                return;\n            }\n\n            const reviewRequest = reviewRequests.shift();\n\n            reviewRequest.close({\n                type: options.closeType,\n                success: () => successes.push(reviewRequest),\n                error: () => failures.push(reviewRequest),\n                complete: closeNext.bind(this),\n            });\n        }\n\n        closeNext.call(this);\n    },\n\n    /**\n     * Update the visibility of the selected review requests.\n     *\n     * This expects to be passed in a properly bound function (either\n     * addImmediately or removeImmediately) on either archivedReviewRequests or\n     * mutedReviewRequests. This will keep track of all the successes and\n     * failures, reporting them back to the caller.\n     *\n     * Args:\n     *     visibilityFunc (function):\n     *         The function to call for each review request.\n     */\n    updateVisibility(visibilityFunc) {\n        const reviewRequests = this.selection.clone();\n        const successes = [];\n        const failures = [];\n\n        function hideNext() {\n            if (reviewRequests.length === 0) {\n                this.selection.reset();\n                this.trigger('refresh');\n                return;\n            }\n\n            const reviewRequest = reviewRequests.shift();\n\n            visibilityFunc(\n                reviewRequest,\n                {\n                    success: () => {\n                        successes.push(reviewRequest);\n                        hideNext.call(this);\n                    },\n                    error: () => {\n                        failures.push(reviewRequest);\n                        hideNext.call(this);\n                    },\n                });\n        }\n\n        hideNext.call(this);\n    },\n});\n"]}