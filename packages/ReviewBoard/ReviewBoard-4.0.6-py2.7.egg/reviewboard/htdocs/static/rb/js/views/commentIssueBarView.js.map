{"version":3,"sources":["commentIssueBarView.es6.js"],"names":[],"mappings":"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","file":"commentIssueBarView.js","sourcesContent":["/**\n * Manages a comment's issue status bar.\n *\n * The buttons on the bar will update the comment's issue status on the server\n * when clicked. The bar will update to reflect the issue status of any\n * comments tracked by the issue summary table.\n */\nRB.CommentIssueBarView = Backbone.View.extend({\n    events: {\n        'click .reopen': '_onReopenClicked',\n        'click .resolve': '_onFixedClicked',\n        'click .drop': '_onDropClicked',\n        'click .verify-dropped': '_onVerifyDroppedClicked',\n        'click .verify-resolved': '_onVerifyFixedClicked',\n    },\n\n    statusInfo: {\n        open: {\n            visibleButtons: ['.drop', '.resolve'],\n            text: gettext('An issue was opened.'),\n        },\n        resolved: {\n            visibleButtons: ['.reopen'],\n            text: gettext('The issue has been resolved.'),\n        },\n        dropped: {\n            visibleButtons: ['.reopen'],\n            text: gettext('The issue has been dropped.'),\n        },\n        'verifying-dropped': {\n            visibleButtons: ['.reopen'],\n            text: gettext('Waiting for verification before dropping...'),\n        },\n        'verifying-resolved': {\n            visibleButtons: ['.reopen'],\n            text: gettext('Waiting for verification before resolving...'),\n        },\n    },\n\n    template: _.template(dedent`\n        <div class=\"issue-state\">\n         <div class=\"issue-container\">\n          <span class=\"rb-icon\"></span>\n          <span class=\"issue-details\">\n           <span class=\"issue-message\"></span>\n           <% if (interactive) { %>\n            <span class=\"issue-actions\">\n             <input type=\"button\" class=\"issue-button resolve\"\n                    value=\"<%- fixedLabel %>\">\n             <input type=\"button\" class=\"issue-button drop\"\n                    value=\"<%- dropLabel %>\">\n             <input type=\"button\" class=\"issue-button reopen\"\n                    value=\"<%- reopenLabel %>\">\n             <input type=\"button\" class=\"issue-button verify-resolved\"\n                    value=\"<%- verifyFixedLabel %>\">\n             <input type=\"button\" class=\"issue-button verify-dropped\"\n                    value=\"<%- verifyDroppedLabel %>\">\n            </span>\n           <% } %>\n          </span>\n         </div>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     canVerify (boolean):\n     *         Whether the user has permission to verify issues that require\n     *         it.\n     *\n     *     commentID (number):\n     *         The ID of the comment object.\n     *\n     *     commentIssueManager (RB.CommentIssueManager):\n     *         The issue manager.\n     *\n     *     commentType (string):\n     *         The type of comment being modified.\n     *\n     *     interactive (boolean):\n     *         Whether the comment issue bar is interactive or not.\n     *\n     *     issueStatus (string):\n     *         The current issue status.\n     *\n     *     reviewID (number):\n     *         The ID of the review that the comment is on.\n     */\n    initialize(options) {\n        this.options = options;\n\n        const page = RB.PageManager.getPage();\n\n        this._manager = (this.options.commentIssueManager ||\n                         page.model.commentIssueManager);\n        this._issueStatus = this.options.issueStatus;\n        this._$buttons = null;\n        this._$state = null;\n        this._$icon = null;\n        this._$message = null;\n    },\n\n    /**\n     * Render the issue status bar.\n     *\n     * Returns:\n     *     RB.CommentIssueBarView:\n     *     This object, for chaining.\n     */\n    render() {\n        if (this.$el.children().length === 0) {\n            this.$el.append(this.template({\n                interactive: this.options.interactive,\n                fixedLabel: gettext('Fixed'),\n                dropLabel: gettext('Drop'),\n                reopenLabel: gettext('Re-open'),\n                verifyDroppedLabel: gettext('Verify Dropped'),\n                verifyFixedLabel: gettext('Verify Fixed'),\n            }));\n        }\n\n        this._$buttons = this.$('.issue-button');\n        this._$state = this.$('.issue-state');\n        this._$icon = this.$('.rb-icon');\n        this._$message = this.$('.issue-message');\n\n        this._manager.on('issueStatusUpdated',\n                         this._onIssueStatusUpdated,\n                         this);\n        this._showStatus(this._issueStatus);\n\n        return this;\n    },\n\n    /**\n     * Set the issue status of the comment on the server.\n     *\n     * Args:\n     *     issueStatus (string):\n     *         The new issue status (one of ``open``, ``resolved``, or\n     *         ``dropped``).\n     */\n    _setStatus(issueStatus) {\n        this._$buttons.prop('disabled', true);\n        this._manager.setCommentState(this.options.reviewID,\n                                      this.options.commentID,\n                                      this.options.commentType,\n                                      issueStatus);\n    },\n\n    /**\n     * Show the current issue status of the comment.\n     *\n     * This will affect the button visibility and the text of the bar.\n     *\n     * Args:\n     *     issueStatus (string):\n     *         The issue status to show (one of ``open``, ``resolved``, or\n     *         ``dropped``).\n     */\n    _showStatus(issueStatus) {\n        const statusInfo = this.statusInfo[issueStatus];\n        const prevStatus = this._issueStatus;\n\n        this._issueStatus = issueStatus;\n\n        this._$state\n            .removeClass(prevStatus)\n            .addClass(issueStatus);\n\n        let iconClass;\n\n        if (issueStatus === RB.BaseComment.STATE_VERIFYING_DROPPED ||\n            issueStatus === RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n            iconClass = 'rb-icon rb-icon-issue-verifying';\n        } else {\n            iconClass = `rb-icon rb-icon-issue-${issueStatus}`;\n        }\n\n        this._$icon.attr('class', iconClass);\n        this._$buttons.hide();\n        this._$message.text(statusInfo.text);\n\n        if (this.options.interactive) {\n            let visibleButtons = statusInfo.visibleButtons;\n\n            if (this.options.canVerify) {\n                if (issueStatus === RB.BaseComment.STATE_VERIFYING_DROPPED) {\n                    visibleButtons.push('.verify-dropped');\n                } else if (issueStatus ===\n                           RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n                    visibleButtons.push('.verify-resolved');\n                }\n            }\n\n            this._$buttons.filter(visibleButtons.join(',')).show();\n            this._$buttons.prop('disabled', false);\n        }\n\n        this.trigger('statusChanged', prevStatus, issueStatus);\n    },\n\n    /**\n     * Handler for when \"Re-open\" is clicked.\n     *\n     * Reopens the issue.\n     */\n    _onReopenClicked() {\n        this._setStatus(RB.BaseComment.STATE_OPEN);\n    },\n\n    /**\n     * Handler for when \"Fixed\" is clicked.\n     *\n     * Marks the issue as fixed.\n     */\n    _onFixedClicked() {\n        const comment = this._manager.getComment(this.options.reviewID,\n                                                 this.options.commentID,\n                                                 this.options.commentType);\n\n        comment.ready({\n            ready: () => {\n                if (comment.requiresVerification() &&\n                    comment.getAuthorUsername() !==\n                        RB.UserSession.instance.get('username')) {\n                    this._setStatus(RB.BaseComment.STATE_VERIFYING_RESOLVED);\n                } else {\n                    this._setStatus(RB.BaseComment.STATE_RESOLVED);\n                }\n            },\n        });\n    },\n\n    /**\n     * Handler for when \"Drop\" is clicked.\n     *\n     * Marks the issue as dropped.\n     */\n    _onDropClicked() {\n        const comment = this._manager.getComment(this.options.reviewID,\n                                                 this.options.commentID,\n                                                 this.options.commentType);\n\n        comment.ready({\n            ready: () => {\n                if (comment.requiresVerification() &&\n                    comment.getAuthorUsername() !==\n                        RB.UserSession.instance.get('username')) {\n                    this._setStatus(RB.BaseComment.STATE_VERIFYING_DROPPED);\n                } else {\n                    this._setStatus(RB.BaseComment.STATE_DROPPED);\n                }\n            },\n        });\n    },\n\n    /**\n     * Handler for when \"Verify Fixed\" is clicked.\n     */\n    _onVerifyFixedClicked() {\n        this._setStatus(RB.BaseComment.STATE_RESOLVED);\n    },\n\n    /**\n     * Handler for when \"Verify Dropped\" is clicked.\n     */\n    _onVerifyDroppedClicked() {\n        this._setStatus(RB.BaseComment.STATE_DROPPED);\n    },\n\n    /**\n     * Handler for when the issue status for the comment changes.\n     *\n     * Updates the dispaly to reflect the issue's current status.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment model which was updated.\n     */\n    _onIssueStatusUpdated(comment) {\n        if (comment.id === this.options.commentID) {\n            this._showStatus(comment.get('issueStatus'));\n        }\n    },\n});\n"]}