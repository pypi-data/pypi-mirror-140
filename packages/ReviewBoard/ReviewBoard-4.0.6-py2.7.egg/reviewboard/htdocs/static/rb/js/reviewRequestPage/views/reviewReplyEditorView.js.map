{"version":3,"sources":["reviewReplyEditorView.es6.js"],"names":[],"mappings":"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","file":"reviewReplyEditorView.js","sourcesContent":["/**\n * Handles editing a reply to a comment in a review.\n *\n * This will handle the \"New Comment\" link and the draft banners for the\n * review.\n */\nRB.ReviewRequestPage.ReviewReplyEditorView = Backbone.View.extend({\n    commentTemplate: _.template(dedent`\n        <li <% if (isDraft) { %>class=\"draft\"<% } %>\n            <% if (commentID) { %>data-comment-id=\"<%= commentID %>\"<% } %>>\n         <% if (anchorName) { %>\n          <a class=\"comment-anchor\" name=\"<%- anchorName %>\"></a>\n          <div class=\"floating-anchor\">\n           <a href=\"#<%- anchorName %>\"\n              class=\"fa fa-link fa-flip-horizontal\"></a>\n          </div>\n         <% } %>\n         <div class=\"comment-author\">\n          <label for=\"<%= id %>\">\n           <div class=\"avatar-container\"><%= avatarHTML %></div>\n           <div class=\"user-reply-info\">\n            <a href=\"<%= userPageURL %>\" class=\"user\"><%- fullName %></a>\n        <% if (timestamp) { %>\n            <span class=\"timestamp\">\n             <time class=\"timesince\" datetime=\"<%= timestampISO %>\">\n        <%= timestamp %></time>\n            </span>\n        <% } %>\n           </div>\n          </label>\n         </div>\n         <div>\n          <pre id=\"<%= id %>\" class=\"comment-text reviewtext\"><%- text %></pre>\n         </div>\n        </li>\n    `),\n\n    events: {\n        'click .add_comment_link': '_onAddCommentClicked',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     reviewRequestEditor (RB.ReviewRequestEditor):\n     *         The editor model.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$addCommentLink = null;\n        this._$draftComment = null;\n        this._$editor = null;\n        this._$commentsList = null;\n    },\n\n    /**\n     * Render the comment section.\n     *\n     * If there were any draft comments found, then editors will be\n     * created for them, the New Comment link will be hidden.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$addCommentLink = this.$('.add_comment_link');\n        this._$commentsList = this.$('.reply-comments');\n\n        /* See if there's a draft comment to import from the page. */\n        const $draftComment = this._$commentsList.children('.draft');\n\n        if ($draftComment.length !== 0) {\n            const $time = $draftComment.find('time');\n            const $reviewText = $draftComment.find('.reviewtext');\n\n            this.model.set({\n                commentID: $draftComment.data('comment-id'),\n                text: $reviewText.html(),\n                timestamp: new Date($time.attr('datetime')),\n                richText: $reviewText.hasClass('rich-text'),\n                hasDraft: true,\n            });\n            this._createCommentEditor($draftComment);\n        }\n\n        this.listenTo(this.model, 'textUpdated', () => {\n            if (this._$editor) {\n                const reviewRequest =\n                    this.model.get('review').get('parentObject');\n\n                RB.formatText(this._$editor, {\n                    newText: this.model.get('text'),\n                    richText: this.model.get('richText'),\n                    bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n                });\n            }\n        });\n\n        this.model.on('resetState', () => {\n            if (this._$draftComment) {\n                this._$draftComment.fadeOut(() => {\n                    this._$draftComment.remove();\n                    this._$draftComment = null;\n                });\n            }\n\n            this._$addCommentLink.fadeIn();\n        });\n\n        this.model.on('published', this._onPublished, this);\n    },\n\n    /**\n     * Open the comment editor for a new comment.\n     */\n    openCommentEditor() {\n        this._createCommentEditor(this._makeCommentElement());\n        this._$editor.inlineEditor('startEdit');\n    },\n\n    /**\n     * Create a comment editor for an element.\n     *\n     * Args:\n     *     $draftComment (jQuery):\n     *         The draft comment element.\n     */\n    _createCommentEditor($draftComment) {\n        const reviewRequestEditor = this.options.reviewRequestEditor;\n\n        this._$draftComment = $draftComment;\n\n        this._$editor = $draftComment.find('pre.reviewtext');\n        this._$editor\n            .inlineEditor(\n                _.extend({\n                    cls: 'inline-comment-editor',\n                    editIconClass: 'rb-icon rb-icon-edit',\n                    notifyUnchangedCompletion: true,\n                    multiline: true,\n                    hasRawValue: true,\n                    rawValue: this._$editor.data('raw-value') || '',\n                },\n                RB.TextEditorView.getInlineEditorOptions({\n                    richText: this._$editor.hasClass('rich-text'),\n                }))\n            )\n            .removeAttr('data-raw-value')\n            .on({\n                beginEdit: () => {\n                    if (reviewRequestEditor) {\n                        reviewRequestEditor.incr('editCount');\n                    }\n                },\n                complete: (e, value) => {\n                    const textEditor = RB.TextEditorView.getFromInlineEditor(\n                        this._$editor);\n\n                    if (reviewRequestEditor) {\n                        reviewRequestEditor.decr('editCount');\n                    }\n\n                    this.model.set({\n                        text: value,\n                        richText: textEditor.richText,\n                    });\n                    this.model.save();\n                },\n                cancel: () => {\n                    if (reviewRequestEditor) {\n                        reviewRequestEditor.decr('editCount');\n                    }\n\n                    this.model.resetStateIfEmpty();\n                },\n            });\n\n        this._$addCommentLink.hide();\n    },\n\n    /**\n     * Create an element for the comment form.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the comment element.\n     *\n     * Option Args:\n     *     now (Moment):\n     *         The current time.\n     *\n     *     richText (boolean):\n     *         Whether the text is in a rich-text format.\n     *\n     *     text (string):\n     *         The text for the comment.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly-created element.\n     */\n    _makeCommentElement(options={}) {\n        const userSession = RB.UserSession.instance;\n        const reviewRequest = this.model.get('review').get('parentObject');\n\n        const now = (\n            options.now ||\n            moment().utcOffset(userSession.get('timezoneOffset')));\n\n        const $el = $(this.commentTemplate(_.extend({\n                anchorName: null,\n                id: _.uniqueId('draft_comment_'),\n                text: '',\n                commentID: null,\n                userPageURL: userSession.get('userPageURL'),\n                fullName: userSession.get('fullName'),\n                avatarHTML: userSession.getAvatarHTML(32),\n                isDraft: true,\n                timestampISO: now.format(),\n\n                /*\n                 * Note that we format the a.m./p.m. this way to match\n                 * what's coming from the Django templates.\n                 */\n                timestamp: now.format('MMMM Do, YYYY, h:mm ') +\n                           (now.hour() < 12 ? 'a.m.' : 'p.m.'),\n            }, options)))\n            .find('.user')\n                .user_infobox()\n            .end()\n            .find('time.timesince')\n                .timesince()\n            .end();\n\n        Djblets.enableRetinaImages($el);\n\n        if (options.text) {\n            RB.formatText($el.find('.reviewtext'), {\n                newText: options.text,\n                richText: options.richText,\n                bugTrackerURL: reviewRequest.get('bugTrackerURL'),\n            });\n        }\n\n        $el.appendTo(this._$commentsList);\n\n        return $el;\n    },\n\n    /**\n     * Handler for when the New Comment link is clicked.\n     *\n     * Creates a new comment form and editor.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the callback.\n     */\n    _onAddCommentClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.openCommentEditor();\n    },\n\n    /**\n     * Handler for when the reply is published.\n     *\n     * Updates the draft comment to be a standard comment, and brings back\n     * the New Comment link.\n     */\n    _onPublished() {\n        if (this._$draftComment) {\n            const model = this.model;\n            const contextType = model.get('contextType');\n\n            this._$draftComment.replaceWith(this._makeCommentElement({\n                anchorName: model.get('anchorPrefix') +\n                            model.get('replyObject').id,\n                commentID: model.get('commentID'),\n                text: model.get('text'),\n                richText: model.get('richText'),\n                isDraft: false,\n            }));\n\n            this._$draftComment = null;\n        }\n    },\n});\n"]}