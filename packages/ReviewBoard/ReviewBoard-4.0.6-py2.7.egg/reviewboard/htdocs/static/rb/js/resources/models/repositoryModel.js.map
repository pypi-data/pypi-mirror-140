{"version":3,"sources":["repositoryModel.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,UAAH,GAAgB,EAAE,CAAC,YAAH,CAAgB,MAAhB,CAAuB;AACnC,EAAA,QADmC,sBACxB;AACP,WAAO,CAAC,CAAC,QAAF,CAAW;AACd,MAAA,SAAS,EAAE,KADG;AAEd,MAAA,eAAe,EAAE,IAFH;AAGd,MAAA,IAAI,EAAE,IAHQ;AAId,MAAA,eAAe,EAAE,KAJH;AAKd,MAAA,oBAAoB,EAAE,KALR;AAMd,MAAA,WAAW,EAAE,IANC;AAOd,MAAA,kBAAkB,EAAE;AAPN,KAAX,EAQJ,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,QAA1B,EARI,CAAP;AASH,GAXkC;AAanC,EAAA,YAAY,EAAE,YAbqB;;AAenC;AACJ;AACA;AACI,EAAA,UAlBmC,wBAkBtB;AACT,IAAA,EAAE,CAAC,YAAH,CAAgB,SAAhB,CAA0B,UAA1B,CAAqC,KAArC,CAA2C,IAA3C,EAAiD,SAAjD;AAEA,SAAK,QAAL,GAAgB,IAAI,EAAE,CAAC,kBAAP,EAAhB;AACA,SAAK,QAAL,CAAc,GAAd,GAAoB,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,KAAf,IAAwB,WAA5C;AACH,GAvBkC;;AAyBnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UA5CmC,sBA4CxB,OA5CwB,EA4Cf;AAChB,WAAO,IAAI,EAAE,CAAC,iBAAP,CAAyB,EAAzB,EAA6B;AAChC,MAAA,OAAO,EAAE,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,KAAf,IAAwB,UADD;AAEhC,MAAA,KAAK,EAAE,OAAO,CAAC,KAFiB;AAGhC,MAAA,MAAM,EAAE,OAAO,CAAC;AAHgB,KAA7B,CAAP;AAKH,GAlDkC;;AAoDnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,GA3DmC,iBA2D7B;AACF,QAAM,GAAG,GAAG,SAAS,IAAI,KAAK,GAAL,CAAS,iBAAT,KAA+B,EAAnC,CAAT,GACA,mBADZ;AAGA,WAAO,KAAK,KAAL,KAAe,GAAf,aAAwB,GAAxB,SAA8B,KAAK,EAAnC,MAAP;AACH;AAhEkC,CAAvB,CAAhB","file":"repositoryModel.js","sourcesContent":["/**\n * A client-side representation of a repository on the server.\n *\n * Model Attributes:\n *     filesOnly (boolean):\n *         Whether this repository is the fake \"file attachments only\" entry.\n *\n *     localSitePrefix (string):\n *         The URL prefix for the local site, if any.\n *\n *     name (string):\n *         The name of the repository.\n *\n *     requiresBasedir (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of a \"base directory\" (the relative path between the\n *         repository root and the filenames in the diff file).\n *\n *     requiresChangeNumber (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of the associated change number.\n *\n *     scmtoolName (string):\n *         The name of the SCM that this repository uses.\n *\n *     supportsPostCommit (boolean):\n *         Whether this repository supports the APIs necessary to enable the\n *         post-commit UI.\n */\nRB.Repository = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            filesOnly: false,\n            localSitePrefix: null,\n            name: null,\n            requiresBasedir: false,\n            requiresChangeNumber: false,\n            scmtoolName: null,\n            supportsPostCommit: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'repository',\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        RB.BaseResource.prototype.initialize.apply(this, arguments);\n\n        this.branches = new RB.RepositoryBranches();\n        this.branches.url = _.result(this, 'url') + 'branches/';\n    },\n\n    /**\n     * Get a collection of commits from a given starting point.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the commits collection.\n     *\n     * Option Args:\n     *     start (string):\n     *         The starting commit (which will be the most recent commit\n     *         listed).\n     *\n     *     branch (string):\n     *         The branch to fetch commits from.\n     *\n     * Returns:\n     *     RB.RepositoryCommits:\n     *     The commits collection.\n     */\n    getCommits(options) {\n        return new RB.RepositoryCommits([], {\n            urlBase: _.result(this, 'url') + 'commits/',\n            start: options.start,\n            branch: options.branch\n        });\n    },\n\n    /**\n     * Return the URL for syncing the model.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/repositories/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    }\n});\n"]}