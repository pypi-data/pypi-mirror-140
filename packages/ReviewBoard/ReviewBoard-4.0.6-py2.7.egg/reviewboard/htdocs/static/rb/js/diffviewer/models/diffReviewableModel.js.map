{"version":3,"sources":["diffReviewableModel.es6.js"],"names":[],"mappings":"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","file":"diffReviewableModel.js","sourcesContent":["/**\n * Provides state and utility functions for loading and reviewing diffs.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff.\n *\n *     file (RB.DiffFile):\n *         Information on the file associated with this diff.\n *\n *     interdiffRevision (number):\n *         The revision on the end of an interdiff range.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff on the end of an interdiff range.\n *\n *     revision (number):\n *         The revision of the FileDiff.\n *\n * See Also:\n *     :js:class:`RB.AbstractReviewable`:\n *         For the attributes defined by the base model.\n */\nRB.DiffReviewable = RB.AbstractReviewable.extend({\n    defaults: _.defaults({\n        baseFileDiffID: null,\n        file: null,\n        fileDiffID: null,\n        interdiffRevision: null,\n        interFileDiffID: null,\n        revision: null,\n    }, RB.AbstractReviewable.prototype.defaults),\n\n    commentBlockModel: RB.DiffCommentBlock,\n\n    defaultCommentBlockFields: [\n        'baseFileDiffID',\n        'fileDiffID',\n        'interFileDiffID',\n    ],\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        this.createCommentBlock({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: serializedCommentBlock.linenum,\n            endLineNum: serializedCommentBlock.linenum +\n                        serializedCommentBlock.num_lines - 1,\n            serializedComments: serializedCommentBlock.comments || [],\n        });\n    },\n\n    /**\n     * Return the rendered diff for a file.\n     *\n     * The rendered file will be fetched from the server and eventually\n     * returned as the argument to the success callback.\n     *\n     * Args:\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     *     options (object, optional):\n     *         The option arguments that control the behavior of this function.\n     *\n     * Option Args:\n     *     showDeleted (boolean):\n     *         Determines whether or not we want to requeue the corresponding\n     *         diff in order to show its deleted content.\n     */\n    getRenderedDiff(callbacks, context, options={}) {\n        let url = this._buildRenderedDiffURL();\n\n        if (url.includes('?')) {\n            url += '&';\n        } else {\n            url += '?';\n        }\n\n        url += 'index=';\n        url += this.get('file').get('index');\n\n        if (options.showDeleted) {\n            url += '&show-deleted=1';\n        }\n\n        url += '&' + TEMPLATE_SERIAL;\n\n        this._fetchFragment({\n            url: url,\n            noActivityIndicator: true,\n        }, callbacks, context);\n    },\n\n    /**\n     * Return a rendered fragment of a diff.\n     *\n     * The fragment will be fetched from the server and eventually returned\n     * as the argument to the success callback.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     *\n     * Option Args:\n     *     chunkIndex (string):\n     *         The chunk index to load.\n     */\n    getRenderedDiffFragment(options, callbacks, context) {\n        console.assert(options.chunkIndex !== undefined,\n                       'chunkIndex must be provided');\n\n        this._fetchFragment({\n            url: `${this._buildRenderedDiffURL()}chunk/${options.chunkIndex}/`,\n            data: {\n                'index': this.get('file').get('index'),\n                'lines-of-context': options.linesOfContext\n            }\n        }, callbacks, context);\n    },\n\n    /**\n     * Fetch the diff fragment from the server.\n     *\n     * This is used internally by getRenderedDiff and getRenderedDiffFragment\n     * to do all the actual fetching and calling of callbacks.\n     *\n     * Args:\n     *     options (object):\n     *         The option arguments that control the behavior of this function.\n     *\n     *     callbacks (object):\n     *         The functions used to fetch the corresponding diff fragments.\n     *\n     *     context (object):\n     *         The context passed to each callback function.\n     */\n    _fetchFragment(options, callbacks, context) {\n        RB.apiCall(_.defaults(\n            {\n                type: 'GET',\n                dataType: 'html'\n            },\n            options,\n            _.bindCallbacks(callbacks, context)\n        ));\n    },\n\n    /**\n     * Return a URL that forms the base of a diff fragment fetch.\n     *\n     * Returns:\n     *     string:\n     *     The URL for fetching diff fragments.\n     */\n    _buildRenderedDiffURL() {\n        const interdiffRevision = this.get('interdiffRevision');\n        const interFileDiffID = this.get('interFileDiffID');\n        const baseFileDiffID = this.get('baseFileDiffID');\n        let revisionStr = this.get('revision');\n\n        if (interdiffRevision) {\n            revisionStr += '-' + interdiffRevision;\n        }\n\n        return this.get('reviewRequest').get('reviewURL') + 'diff/' +\n               revisionStr + '/fragment/' + this.get('fileDiffID') +\n               (interFileDiffID ? '-' + interFileDiffID : '') +\n               '/' +\n               (baseFileDiffID ? '?base-filediff-id=' + baseFileDiffID : '');\n    },\n});\n"]}