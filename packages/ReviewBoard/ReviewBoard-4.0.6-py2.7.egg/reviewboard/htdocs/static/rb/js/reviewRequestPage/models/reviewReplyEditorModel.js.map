{"version":3,"sources":["reviewReplyEditorModel.es6.js"],"names":[],"mappings":"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","file":"reviewReplyEditorModel.js","sourcesContent":["/**\n * An editor for replying to parts of a review.\n *\n * This will track the editing state of a reply to the body top/bottom of\n * a review or a comment, and handles saving of the reply.\n */\nRB.ReviewRequestPage.ReviewReplyEditor = Backbone.Model.extend({\n    defaults: {\n        anchorPrefix: null,\n        contextID: null,\n        contextType: null,\n        commentID: null,\n        hasDraft: false,\n        replyObject: null,\n        review: null,\n        reviewReply: null,\n        richText: null,\n        text: '',\n    },\n\n    replyClasses: {\n        diff_comments: RB.DiffCommentReply,\n        screenshot_comments: RB.ScreenshotCommentReply,\n        file_attachment_comments: RB.FileAttachmentCommentReply,\n        general_comments: RB.GeneralCommentReply,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this.on('change:reviewReply', this._setupReviewReply, this);\n        this._setupReviewReply();\n    },\n\n    /**\n     * Save the current reply.\n     *\n     * This will trigger the \"saving\" event before saving, and will trigger\n     * \"saved\" after it succeeds.\n     */\n    save() {\n        const contextType = this.get('contextType');\n        const reviewReply = this.get('reviewReply');\n        let valueAttr;\n        let richTextAttr;\n        let obj;\n\n        if (contextType === 'body_top') {\n            valueAttr = 'bodyTop';\n            richTextAttr = 'bodyTopRichText';\n            obj = reviewReply;\n        } else if (contextType === 'body_bottom') {\n            valueAttr = 'bodyBottom';\n            richTextAttr = 'bodyBottomRichText';\n            obj = reviewReply;\n        } else {\n            valueAttr = 'text';\n            richTextAttr = 'richText';\n            obj = this.get('replyObject');\n\n            if (!obj) {\n                const ReplyClass = this.replyClasses[contextType];\n\n                console.assert(ReplyClass,\n                               \"Unexpected context type '%s'\",\n                               contextType);\n\n                obj = new ReplyClass({\n                    parentObject: reviewReply,\n                    replyToID: this.get('contextID'),\n                    id: this.get('commentID'),\n                });\n            }\n        }\n\n        this.set('replyObject', obj);\n\n        this.trigger('saving');\n\n        obj.ready({\n            ready: () => {\n                const text = this.get('text');\n\n                if (text) {\n                    obj.set(valueAttr, text);\n                    obj.set(richTextAttr, this.get('richText'));\n                    obj.set({\n                        forceTextType: 'html',\n                        includeTextTypes: 'raw',\n                    });\n\n                    obj.save({\n                        attrs: [valueAttr, richTextAttr, 'forceTextType',\n                                'includeTextTypes', 'replyToID'],\n                        success: function() {\n                            this.set({\n                                hasDraft: true,\n                                text: obj.get(valueAttr),\n                                richText: true,\n                            });\n                            this.trigger('textUpdated');\n                            this.trigger('saved');\n                        }\n                    }, this);\n                } else {\n                    this.resetStateIfEmpty();\n                }\n            },\n        });\n    },\n\n    /**\n     * Reset the editor state, if the text isn't set.\n     *\n     * If the text attribute has a value, this will do nothing.\n     * Otherwise, it will destroy the reply or the comment (depending on\n     * what is being replied to), and then trigger \"resetState\".\n     */\n    resetStateIfEmpty() {\n        const text = this.get('text');\n\n        if (text.strip() !== '') {\n            return;\n        }\n\n        const replyObject = this.get('replyObject');\n\n        if (!replyObject || replyObject.isNew()) {\n            this._resetState();\n        } else {\n            const contextType = this.get('contextType');\n\n            if (contextType === 'body_top' ||\n                contextType === 'body_bottom') {\n                this._resetState(true);\n            } else {\n                replyObject.destroy({\n                    success: this._resetState\n                }, this);\n            }\n        }\n    },\n\n    /**\n     * Set up a new ReviewReply for this editor.\n     *\n     * This will first stop listening to any events on an old reviewReply.\n     *\n     * It will then listen for \"destroy\" and \"published\" events on the new\n     * reply. If either triggers, the \"discarded\" or \"published\" signals\n     * (respectively) will be triggered, and the state of the editor will reset.\n     */\n    _setupReviewReply() {\n        const reviewReply = this.get('reviewReply');\n        const oldReviewReply = this.previous('reviewReply');\n\n        if (oldReviewReply) {\n            oldReviewReply.off(null, null, this);\n        }\n\n        this.listenTo(reviewReply, 'destroyed', () => {\n            this.trigger('discarded');\n            this._resetState();\n        });\n\n        this.listenTo(reviewReply, 'published', () => {\n            this.trigger('published');\n            this._resetState(false);\n        });\n    },\n\n    /**\n     * Resets the state of the editor.\n     *\n     * Args:\n     *     shouldDiscardIfEmpty (boolean):\n     *         Whether to discard the entire reply if there are no individual\n     *         comments.\n     */\n    _resetState: function(shouldDiscardIfEmpty) {\n        this.set({\n            commentID: null,\n            hasDraft: false,\n            replyObject: null,\n        });\n\n        if (shouldDiscardIfEmpty === false) {\n            this.trigger('resetState');\n        } else {\n            this.get('reviewReply').discardIfEmpty({\n                success: () => this.trigger('resetState'),\n            });\n        }\n    },\n});\n"]}