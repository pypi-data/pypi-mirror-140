{"version":3,"sources":["relatedUserSelectorViewTests.es6.js"],"names":[],"mappings":"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","file":"relatedUserSelectorViewTests.js","sourcesContent":["suite('rb/admin/views/relatedUserSelectorView', function() {\n    describe('Rendering', function() {\n        it('when empty', function() {\n            let view = new RB.RelatedUserSelectorView({\n                $input: $('<input id=\"id_people\" type=\"hidden\">'),\n                initialOptions: [],\n                useAvatars: true,\n                multivalued: true\n            });\n            expect(view.options.useAvatars).toBe(true);\n            expect(view.options.multivalued).toBe(true);\n            view.render();\n\n            expect(view.$el.find('.related-object-selected li').length)\n                .toBe(0);\n        });\n    });\n\n    describe('Rendering', function() {\n        it('with inital options', function() {\n            let view = new RB.RelatedUserSelectorView({\n                $input: $('<input id=\"id_people\" type=\"hidden\">'),\n                initialOptions: [{\n                    username: 'admin',\n                    fullname: 'Admin User',\n                    id: 1,\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Admin User\"></div>',\n                    },\n                }, {\n                    username: 'doc',\n                    fullname: \"Doc Dwarf\",\n                    id: 2,\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Doc Dwarf\"></div>',\n                    },\n                }, {\n                    username: 'dopey',\n                    fullname: 'Dopey Dwarf',\n                    id: 3,\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Dopey Dwarf\"></div>',\n                    },\n                }],\n                useAvatars: true,\n                multivalued: true,\n            });\n            view.render();\n            expect(view.options.useAvatars).toBe(true);\n            expect(view.options.multivalued).toBe(true);\n\n            expect(view.$el.find('.related-object-selected li').length)\n                .toBe(3);\n            expect(view.$el.siblings('#id_people').val()).toBe('');\n            /* The input element value should be empty, since the widget will\n               not fill in the values from the objects if the objects are\n               passed through initialOptions. */\n            expect(view._selectedIDs.size).toBe(3);\n        });\n    });\n\n    describe('Select item', function() {\n        let view;\n\n        beforeEach(function(done) {\n            $testsScratch.append('<input id=\"id_people\" type=\"hidden\">');\n            view = new RB.RelatedUserSelectorView({\n                $input: $('#id_people'),\n                initialOptions: [],\n                useAvatars: true,\n                multivalued: true\n            });\n            view.render();\n\n            /* These are the fake users, that will be displayed in the\n               dropdown */\n            spyOn(view, 'loadOptions').and.callFake(function(query, callback) {\n                callback([{\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Admin User\"></div>',\n                    },\n                    fullname: 'Admin User',\n                    id: 1,\n                    username: 'admin',\n                }, {\n                    avatarHTML: {\n                        '20': '<div class=\"avatar\" alt=\"Doc Dwarf\"></div>',\n                    },\n                    fullname: 'Doc Dwarf',\n                    id: 2,\n                    username: 'doc',\n                }]);\n            });\n\n            $('select')[0].selectize.focus();\n            /* The focus() method is being called asynchronously, so it\n              doesn't actually call the loadOptions() method here\n              instantly. That's why I use setTimeout to wait for it to\n              finish. */\n            setTimeout(function() {\n                $testsScratch.find('div .selectize-input.items.not-full input').click();\n                done();\n            }, 4000);\n            /* I probably shouldn't be doing this, but I\n            don't know how else to get it to work. */\n        });\n\n        it('from dropdown', function(done) {\n            expect(view.loadOptions).toHaveBeenCalled();\n            $(\"div[data-value='admin']\").click();\n            $(\"div[data-value='doc']\").click();\n            expect(view.$el.siblings('#id_people').val()).toBe('1,2');\n            done();\n        });\n    });\n\n\n});"]}