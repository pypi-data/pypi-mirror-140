{"version":3,"sources":["oauthClientSecretView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,qBAAH,GAA2B,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;AAC5C,EAAA,MAAM,EAAE;AACJ,uCAAmC,gBAD/B;AAEJ,uCAAmC;AAF/B,GADoC;;AAM5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UAjB4C,sBAiBjC,OAjBiC,EAiBxB;AAChB,SAAK,OAAL,GAAe,OAAO,CAAC,MAAvB;AACH,GAnB2C;;AAqB5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MA5B4C,oBA4BnC;AACL,SAAK,OAAL,GAAe,KAAK,CAAL,CAAO,OAAP,CAAf;AACA,SAAK,OAAL,GAAe,KAAK,CAAL,CAAO,2BAAP,CAAf;AAEA,WAAO,IAAP;AACH,GAjC2C;;AAmC5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,cA1C4C,0BA0C7B,CA1C6B,EA0C1B;AACd,IAAA,CAAC,CAAC,cAAF;AACA,IAAA,CAAC,CAAC,eAAF;;AAEA,SAAK,OAAL,CACK,KADL,GAEK,MAFL;;AAIA,IAAA,QAAQ,CAAC,WAAT,CAAqB,MAArB;AACH,GAnD2C;;AAqD5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,oBA5D4C,gCA4DvB,CA5DuB,EA4DpB;AAAA;;AACpB,IAAA,CAAC,CAAC,cAAF;AACA,IAAA,CAAC,CAAC,eAAF;;AAEA,SAAK,OAAL,CAAa,IAAb,CAAkB,UAAlB,EAA8B,IAA9B;;AACA,IAAA,EAAE,CAAC,OAAH,CAAW;AACP,MAAA,GAAG,EAAE,KAAK,OADH;AAEP,MAAA,MAAM,EAAE,KAFD;AAGP,MAAA,IAAI,EAAE;AACF,oCAA4B;AAD1B,OAHC;AAMP,MAAA,OAAO,EAAE,iBAAA,GAAG,EAAI;AACZ,QAAA,KAAI,CAAC,OAAL,CAAa,GAAb,CAAiB,GAAG,CAAC,SAAJ,CAAc,aAA/B;;AACA,QAAA,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,UAAlB,EAA8B,KAA9B;AACH,OATM;AAUP,MAAA,KAAK,EAAE,eAAA,GAAG,EAAI;AACV,YAAI,GAAG,CAAC,SAAR,EAAmB;AACf,UAAA,KAAK,CAAC,GAAG,CAAC,SAAL,CAAL;AACH;;AAED,QAAA,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,UAAlB,EAA8B,KAA9B;AACH;AAhBM,KAAX;AAkBH;AAnF2C,CAArB,CAA3B","file":"oauthClientSecretView.js","sourcesContent":["/**\n * A view for editing a client secret.\n *\n * This view hits the API to regenerate the associated application's\n * client secret and updates the ``<input>`` element with the updated value. It\n * also bundles a copy button so that the value can be copied to the user's\n * clipboard.\n */\nRB.OAuthClientSecretView = Backbone.View.extend({\n    events: {\n        'click .copyable-text-input-link': '_onCopyClicked',\n        'click .regenerate-secret-button': '_onRegenerateClicked',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         The view options.\n     *\n     * Option Args:\n     *     apiURL (string):\n     *         The URL of the API endpoint for the application.\n     */\n    initialize(options) {\n        this._apiURL = options.apiURL;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.OAuthClientSecretView:\n     *     This view.\n     */\n    render() {\n        this._$input = this.$('input');\n        this._$regen = this.$('.regenerate-secret-button');\n\n        return this;\n    },\n\n    /**\n     * Copy the client secret to the clipboard.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event that triggered this handler.\n     */\n    _onCopyClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._$input\n            .focus()\n            .select();\n\n        document.execCommand('copy');\n    },\n\n    /**\n     * Regenerate the client secret.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event that triggered this handler.\n     */\n    _onRegenerateClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._$regen.prop('disabled', true);\n        RB.apiCall({\n            url: this._apiURL,\n            method: 'PUT',\n            data: {\n                'regenerate_client_secret': 1,\n            },\n            success: rsp => {\n                this._$input.val(rsp.oauth_app.client_secret);\n                this._$regen.prop('disabled', false);\n            },\n            error: xhr => {\n                if (xhr.errorText) {\n                    alert(xhr.errorText);\n                }\n\n                this._$regen.prop('disabled', false);\n            }\n        });\n    }\n});\n"]}