{"version":3,"sources":["textEditorView.es6.js"],"names":[],"mappings":"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","file":"textEditorView.js","sourcesContent":["(function() {\n\n\n/**\n * Wraps CodeMirror, providing a standard interface for TextEditorView's usage.\n */\nconst CodeMirrorWrapper = Backbone.View.extend({\n    /**\n     * Initialize CodeMirrorWrapper.\n     *\n     * This will set up CodeMirror based on the objects, add it to the parent,\n     * and begin listening to events.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        const codeMirrorOptions = {\n            mode: {\n                highlightFormatting: true,\n                name: 'gfm',\n\n                /*\n                 * The following token type overrides will be prefixed with\n                 * ``cm-`` when used as classes.\n                 */\n                tokenTypeOverrides: {\n                    code: 'rb-markdown-code',\n                    list1: 'rb-markdown-list1',\n                    list2: 'rb-markdown-list2',\n                    list3: 'rb-markdown-list3'\n                }\n            },\n            theme: 'rb default',\n            lineWrapping: true,\n            electricChars: false,\n            styleSelectedText: true,\n            extraKeys: {\n                'Home': 'goLineLeft',\n                'End': 'goLineRight',\n                'Enter': 'newlineAndIndentContinueMarkdownList',\n                'Shift-Tab': false,\n                'Tab': false\n            }\n        };\n\n        if (options.autoSize) {\n            codeMirrorOptions.viewportMargin = Infinity;\n        }\n\n        this._codeMirror = new CodeMirror(options.parentEl,\n                                          codeMirrorOptions);\n\n        this.setElement(this._codeMirror.getWrapperElement());\n\n        if (this.options.minHeight !== undefined) {\n            this.$el.css('min-height', this.options.minHeight);\n        }\n\n        this._codeMirror.on('viewportChange',\n                            () => this.$el.triggerHandler('resize'));\n        this._codeMirror.on('change', () => this.trigger('change'));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        /*\n         * We cannot trust codeMirror's isClean() method.\n         *\n         * It is also possible for initialValue to be undefined, so we use an\n         * empty string in that case instead.\n         */\n        return (initialValue || '') !== this.getText();\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this._codeMirror.setValue(text);\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._codeMirror.getValue();\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * If the editor has focus, insert at the cursor position. Otherwise,\n     * insert at the end.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        let position;\n\n        if (this._codeMirror.hasFocus()) {\n            const cursor = this._codeMirror.getCursor();\n            const line = this._codeMirror.getLine(cursor.line);\n            position = CodeMirror.Pos(cursor.line, line.length - 1);\n\n            if (line.length !== 0) {\n                /*\n                 * If the current line has some content, insert the new text on\n                 * the line after it.\n                 */\n                text = '\\n' + text;\n            }\n\n            if (!text.endsWith('\\n')) {\n                text += '\\n';\n            }\n        } else {\n            position = CodeMirror.Pos(this._codeMirror.lastLine());\n            text = '\\n' + text;\n        }\n\n        this._codeMirror.replaceRange(text, position);\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this._codeMirror.getScrollInfo().clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        this._codeMirror.setSize(width, height);\n        this._codeMirror.refresh();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this._codeMirror.focus();\n    }\n});\n\n\n/**\n * Wraps <textarea>, providing a standard interface for TextEditorView's usage.\n */\nconst TextAreaWrapper = Backbone.View.extend({\n    tagName: 'textarea',\n\n    /*\n     * Initialize TextAreaWrapper.\n     *\n     * This will set up the element based on the provided options, begin\n     * listening for events, and add the element to the parent.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the wrapper.\n     *\n     * Option Args:\n     *     autoSize (boolean):\n     *         Whether the editor should automatically resize itself to fit its\n     *         container.\n     *\n     *     parentEl (Element):\n     *        The parent element for the editor.\n     *\n     *    minHeight (number):\n     *        The minimum vertical size of the editor.\n     */\n    initialize(options) {\n        this.options = options;\n\n        if (options.autoSize) {\n            this.$el.autoSizeTextArea();\n        }\n\n        this.$el\n            .css('width', '100%')\n            .appendTo(options.parentEl)\n            .on('change keydown keyup keypress', () => this.trigger('change'));\n\n        if (options.minHeight !== undefined) {\n            if (options.autoSize) {\n                this.$el.autoSizeTextArea('setMinHeight',\n                                          options.minHeight);\n            } else {\n                this.$el.css('min-height', this.options.minHeight);\n            }\n        }\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        const value = this.el.value || '';\n\n        return value.length !== initialValue.length ||\n               value !== initialValue;\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        this.el.value = text;\n\n        if (this.options.autoSize) {\n            this.$el.autoSizeTextArea('autoSize');\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this.el.value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this.$el.is(':focus')) {\n            const value = this.el.value;\n            const cursor = this.el.selectionEnd;\n            const endOfLine = value.indexOf('\\n', cursor);\n\n            if (endOfLine === -1) {\n                // The cursor is on the last line.\n                this.el.value += '\\n' + text;\n            } else {\n                // The cursor is in the middle of the text.\n                this.el.value = (value.slice(0, endOfLine + 1) + '\\n' + text +\n                                 '\\n' + value.slice(endOfLine));\n            }\n        } else {\n            this.el.value += '\\n' + text;\n        }\n    },\n\n    /**\n     * Return the full client height of the content.\n     *\n     * Returns:\n     *     number:\n     *     The client height of the editor.\n     */\n    getClientHeight() {\n        return this.el.clientHeight;\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (width !== null) {\n            this.$el.innerWidth(width);\n        }\n\n        if (height !== null) {\n            if (height === 'auto' && this.options.autoSize) {\n                this.$el.autoSizeTextArea('autoSize', true);\n            } else {\n                this.$el.innerHeight(height);\n            }\n        }\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        this.$el.focus();\n    }\n});\n\n\n/**\n * Provides an editor for editing plain or Markdown text.\n *\n * The editor allows for switching between plain or Markdown text on-the-fly.\n *\n * When editing plain text, this uses a standard textarea widget.\n *\n * When editing Markdown, this makes use of CodeMirror. All Markdown content\n * will be formatted as the user types, making it easier to notice when a\n * stray _ or ` will cause Markdown-specific behavior.\n */\nRB.TextEditorView = Backbone.View.extend({\n    className: 'text-editor',\n\n    defaultOptions: {\n        autoSize: true,\n        minHeight: 70\n    },\n\n    events: {\n        'focus': 'focus',\n        'remove': '_onRemove'\n    },\n\n    /**\n     * Initialize the view with any provided options.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     richText (boolean):\n     *         Whether the editor is using rich text (Markdown).\n     *\n     *     text (string):\n     *         The initial text.\n     *\n     *     bindRichText (object):\n     *         An object with ``model`` and ``attrName`` keys, for when the\n     *         rich text should be bound to an attribute on another model.\n     */\n    initialize(options={}) {\n        this._files = [];\n        this._editor = null;\n        this._prevClientHeight = null;\n\n        this.options = _.defaults(options, this.defaultOptions);\n        this.richText = !!this.options.richText;\n        this._dropTarget = null;\n        this._value = this.options.text || '';\n        this._richTextDirty = false;\n\n        if (this.options.bindRichText) {\n            this.bindRichTextAttr(this.options.bindRichText.model,\n                                  this.options.bindRichText.attrName);\n        }\n\n        /*\n         * If the user is defaulting to rich text, we're going to want to\n         * show the rich text UI by default, even if any bound rich text\n         * flag is set to False.\n         *\n         * This requires cooperation with the template or API results\n         * that end up backing this TextEditor. The expectation is that\n         * those will be providing escaped data for any plain text, if\n         * the user's set to use rich text by default. If this expectation\n         * holds, the user will have a consistent experience for any new\n         * text fields.\n         */\n        if (RB.UserSession.instance.get('defaultUseRichText')) {\n            this.setRichText(true);\n        }\n    },\n\n    /**\n     * Render the text editor.\n     *\n     * This will set the class name on the element, ensuring we have a\n     * standard set of styles, even if this editor is bound to an existing\n     * element.\n     *\n     * Returns:\n     *     RB.TextEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.addClass(this.className);\n\n        return this;\n    },\n\n    /**\n     * Set whether or not rich text (Markdown) is to be used.\n     *\n     * This can dynamically change the text editor to work in plain text\n     * or Markdown.\n     *\n     * Args:\n     *     richText (boolean):\n     *         Whether the editor should use rich text.\n     */\n    setRichText(richText) {\n        if (richText === this.richText) {\n            return;\n        }\n\n        if (this._editor) {\n            this._hideEditor();\n            this.richText = richText;\n            this._showEditor();\n\n            this._richTextDirty = true;\n\n            this.$el.triggerHandler('resize');\n        } else {\n            this.richText = richText;\n        }\n\n        this.trigger('change:richText', richText);\n        this.trigger('change');\n    },\n\n    /**\n     * Bind a richText attribute on a model to the mode on this editor.\n     *\n     * This editor's richText setting will stay in sync with the attribute\n     * on the given mode.\n     *\n     * Args:\n     *     model (Backbone.Model):\n     *         A model to bind to.\n     *\n     *     attrName (string):\n     *         The name of the attribute to bind.\n     */\n    bindRichTextAttr(model, attrName) {\n        this.setRichText(model.get(attrName));\n\n        this.listenTo(model, `change:${attrName}`,\n                      (model, value) => this.setRichText(value));\n    },\n\n    /**\n     * Bind an Enable Markdown checkbox to this text editor.\n     *\n     * The checkbox will initially be set to the value of the editor's\n     * richText property. Toggling the checkbox will then manipulate that\n     * property.\n     *\n     * Args:\n     *     $checkbox (jQuery):\n     *         The checkbox to bind.\n     */\n    bindRichTextCheckbox($checkbox) {\n        $checkbox\n            .prop('checked', this.richText)\n            .on('change', () => this.setRichText($checkbox.prop('checked')));\n\n        this.on('change:richText',\n                () => $checkbox.prop('checked', this.richText));\n    },\n\n    /**\n     * Bind the visibility of an element to the richText property.\n     *\n     * If richText ist true, the element will be shown. Otherwise, it\n     * will be hidden.\n     *\n     * Args:\n     *     $el (jQuery):\n     *         The element to show when richText is true.\n     */\n    bindRichTextVisibility($el) {\n        $el.setVisible(this.richText);\n\n        this.on('change:richText', () => $el.setVisible(this.richText));\n    },\n\n    /**\n     * Return whether or not the editor's contents have changed.\n     *\n     * Args:\n     *     initialValue (string):\n     *         The initial value of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not the editor is dirty.\n     */\n    isDirty(initialValue) {\n        return this._editor !== null &&\n               (this._richTextDirty ||\n                this._editor.isDirty(initialValue || ''));\n    },\n\n    /**\n     * Set the text in the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The new text for the editor.\n     */\n    setText(text) {\n        if (text !== this.getText()) {\n            if (this._editor) {\n                this._editor.setText(text);\n            } else {\n                this._value = text;\n            }\n        }\n    },\n\n    /**\n     * Return the text in the editor.\n     *\n     * Returns:\n     *     string:\n     *     The current contents of the editor.\n     */\n    getText() {\n        return this._editor ? this._editor.getText() : this._value;\n    },\n\n    /**\n     * Insert a new line of text into the editor.\n     *\n     * Args:\n     *     text (string):\n     *         The text to insert.\n     */\n    insertLine(text) {\n        if (this._editor) {\n            this._editor.insertLine(text);\n        } else {\n            if (this._value.endsWith('\\n')) {\n                this._value += text + '\\n';\n            } else {\n                this._value += '\\n' + text;\n            }\n        }\n    },\n\n    /**\n     * Set the size of the editor.\n     *\n     * Args:\n     *     width (number):\n     *         The new width of the editor.\n     *\n     *     height (number):\n     *         The new height of the editor.\n     */\n    setSize(width, height) {\n        if (this._editor) {\n            this._editor.setSize(width, height);\n        }\n    },\n\n    /**\n     * Show the editor.\n     */\n    show() {\n        this.$el.show();\n        this._showEditor();\n    },\n\n    /**\n     * Hide the editor.\n     */\n    hide() {\n        this._hideEditor();\n        this.$el.hide();\n    },\n\n    /**\n     * Focus the editor.\n     */\n    focus() {\n        if (this._editor) {\n            this._editor.focus();\n        }\n    },\n\n    /**\n     * Handler for the remove event.\n     *\n     * Disables the drag-and-drop overlay.\n     */\n    _onRemove() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n    },\n\n    /**\n     * Show the actual editor wrapper.\n     *\n     * Any stored text will be transferred to the editor, and the editor\n     * will take control over all operations.\n     */\n    _showEditor() {\n        const EditorCls = this.richText ? CodeMirrorWrapper : TextAreaWrapper;\n\n        if (this.richText) {\n            RB.DnDUploader.instance.registerDropTarget(\n                this.$el, gettext('Drop to add an image'),\n                this._uploadImage.bind(this));\n        }\n\n        this._editor = new EditorCls({\n            parentEl: this.el,\n            autoSize: this.options.autoSize,\n            minHeight: this.options.minHeight\n        });\n\n        this._editor.setText(this._value);\n        this._value = '';\n        this._richTextDirty = false;\n        this._prevClientHeight = null;\n\n        this._editor.$el.on(\n            'resize',\n            _.throttle(() => this.$el.triggerHandler('resize'), 250));\n\n        this.listenTo(this._editor, 'change', _.throttle(() => {\n            /*\n             * Make sure that the editor wasn't closed before the throttled\n             * handler was reached.\n             */\n            if (this._editor === null) {\n                return;\n            }\n\n            const clientHeight = this._editor.getClientHeight();\n\n            if (clientHeight !== this._prevClientHeight) {\n                this._prevClientHeight = clientHeight;\n                this.$el.triggerHandler('resize');\n            }\n\n            this.trigger('change');\n        }, 500));\n\n        this.focus();\n    },\n\n    /**\n     * Hide the actual editor wrapper.\n     *\n     * The last value from the editor will be stored for later retrieval.\n     */\n    _hideEditor() {\n        RB.DnDUploader.instance.unregisterDropTarget(this.$el);\n\n        if (this._editor) {\n            this._value = this._editor.getText();\n            this._richTextDirty = false;\n            this._editor.remove();\n            this._editor = null;\n\n            this.$el.empty();\n        }\n    },\n\n    /**\n     * Return whether or not a given file is an image.\n     *\n     * Args:\n     *     file (File):\n     *         The file to check.\n     *\n     * Returns:\n     *     boolean:\n     *     True if the given file appears to be an image.\n     */\n    _isImage(file) {\n        if (file.type) {\n            return (file.type.split('/')[0] === 'image');\n        }\n\n        const filename = file.name.toLowerCase();\n        return ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.tiff', '.svg'].some(\n            extension => filename.endsWith(extension));\n    },\n\n    /**\n     * Upload the image and append an image link to the editor's contents.\n     *\n     * Creates an instance of UserFileAttachment and saves it without the file,\n     * then updates the model with the file. This allows the file to be\n     * uploaded asynchronously after we get the link that is generated when the\n     * UserFileAttachment is created.\n     *\n     * Args:\n     *     file (File):\n     *         The image file to upload.\n     */\n    _uploadImage(file) {\n        if (!this._isImage(file)) {\n            return;\n        }\n\n        const userFileAttachment = new RB.UserFileAttachment({\n            caption: file.name,\n        });\n\n        userFileAttachment.save({\n            success: () => {\n                this.insertLine(\n                    `![Image](${userFileAttachment.get('downloadURL')})`);\n\n                userFileAttachment.set('file', file);\n                userFileAttachment.save({\n                    error: (model, response) => alert(response.errorText)\n                });\n            },\n            error: (model, response) => alert(response.errorText)\n        });\n    }\n}, {\n    /**\n     * Return options used to display a TextEditorView in an inlineEditor.\n     *\n     * Args:\n     *     options (object):\n     *         Options to be passed on to the TextEditorView.\n     *\n     * Returns:\n     *     object:\n     *     An options object to be used with an inlineEditor. The resulting\n     *     inlineEditor will make use of the TextEditorView instead of its\n     *     default textarea.\n     */\n    getInlineEditorOptions(options) {\n        let textEditor;\n\n        return {\n            matchHeight: false,\n            multiline: true,\n\n            createMultilineField(editor) {\n                const $editor = editor.element;\n                let origRichText;\n\n                textEditor = new RB.TextEditorView(options);\n                textEditor.render();\n\n                $editor.one('beginEdit', function() {\n                    const $buttons = $editor.inlineEditor('buttons');\n                    const $span = $('<span class=\"enable-markdown\" />');\n\n                    const $checkbox = $('<input/>')\n                        .attr({\n                            id: _.uniqueId('markdown_check'),\n                            type: 'checkbox'\n                        })\n                        .appendTo($span);\n                    textEditor.bindRichTextCheckbox($checkbox);\n\n                    $span.append($('<label/>')\n                        .attr('for', $checkbox[0].id)\n                        .text(gettext('Enable Markdown')));\n\n                    $buttons.append($span);\n\n                    const $markdownRef = $('<a/>')\n                        .addClass('markdown-info')\n                        .attr({\n                            href: MANUAL_URL + 'users/markdown/',\n                            target: '_blank'\n                        })\n                        .text(gettext('Markdown Reference'))\n                        .setVisible(textEditor.richText)\n                        .appendTo($buttons);\n                    textEditor.bindRichTextVisibility($markdownRef);\n                });\n\n                $editor.on('beginEdit', function() {\n                    textEditor._showEditor();\n                    origRichText = textEditor.richText;\n                });\n\n                $editor.on('cancel', function() {\n                    textEditor._hideEditor();\n                    textEditor.setRichText(origRichText);\n                });\n\n                $editor.on('complete', function() {\n                    textEditor._hideEditor();\n                });\n\n                textEditor.$el.data('text-editor', textEditor);\n\n                return textEditor.$el;\n            },\n\n            setFieldValue(editor, value) {\n                textEditor.setText(value || '');\n            },\n\n            getFieldValue() {\n                return textEditor.getText();\n            },\n\n            isFieldDirty(editor, initialValue) {\n                return textEditor.isDirty(initialValue);\n            }\n        };\n    },\n\n    /**\n     * Return the TextEditorView for an inlineEditor element.\n     *\n     * Returns:\n     *     TextEditorView:\n     *     The view corresponding to the editor.\n     */\n    getFromInlineEditor($editor) {\n        return $editor.inlineEditor('field').data('text-editor');\n    }\n});\n\n\n})();\n"]}