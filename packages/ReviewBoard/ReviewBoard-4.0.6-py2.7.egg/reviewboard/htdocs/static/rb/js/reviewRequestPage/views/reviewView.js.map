{"version":3,"sources":["reviewView.es6.js"],"names":[],"mappings":"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","file":"reviewView.js","sourcesContent":["/**\n * Handles interaction for a review on the review request page. These can be\n * contained within the main review entries, but also for status updates in\n * change description entries or the initial status updates entry.\n */\nRB.ReviewRequestPage.ReviewView = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     */\n    initialize(options) {\n        this.options = options;\n        this.entryModel = options.entryModel;\n\n        this._bannerView = null;\n        this._draftBannerShown = false;\n        this._openIssueCount = 0;\n        this._reviewReply = null;\n        this._replyEditors = [];\n        this._replyEditorViews = [];\n        this._replyDraftsCount = 0;\n        this._diffFragmentViews = [];\n\n        this._$reviewComments = null;\n        this._$bodyTop = null;\n        this._$bodyBottom = null;\n\n        this.model.set('includeTextTypes', 'html,raw,markdown');\n\n        this._setupNewReply();\n\n        this.listenTo(this.entryModel, 'change:collapsed', () => {\n            if (!this.entryModel.get('collapsed')) {\n                this._diffFragmentViews.forEach(\n                    view => view.hideControls(false));\n            }\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewView:\n     *     This object, for chaining.\n     */\n    render() {\n        const reviewRequestEditor = this.entryModel.get('reviewRequestEditor');\n\n        this._$reviewComments = this.$('.review-comments');\n\n        const $comment = this._$reviewComments.find(\n            '.review-comment-details .review-comment');\n        this._$bodyTop = $comment.find('.body_top');\n        this._$bodyBottom = $comment.find('.body_bottom');\n\n        this._replyDraftsCount = 0;\n\n        this.on('hasDraftChanged', hasDraft => {\n            if (hasDraft) {\n                this._showReplyDraftBanner();\n            } else {\n                this._hideReplyDraftBanner();\n            }\n        });\n\n        _.each(this._$reviewComments.find('.issue-indicator'), el => {\n            const $issueState = $('.issue-state', el);\n\n            /*\n             * Not all issue-indicator divs have an issue-state div for the\n             * issue bar.\n             */\n            if ($issueState.length > 0) {\n                const issueStatus = $issueState.data('issue-status');\n\n                if (RB.BaseComment.isStateOpen(issueStatus)) {\n                    this._openIssueCount++;\n                }\n\n                const issueBar = new RB.CommentIssueBarView({\n                    el: el,\n                    reviewID: this.model.id,\n                    canVerify: $issueState.data('can-verify'),\n                    commentID: $issueState.data('comment-id'),\n                    commentType: $issueState.data('comment-type'),\n                    interactive: $issueState.data('interactive'),\n                    issueStatus: issueStatus,\n                });\n\n                issueBar.render();\n\n                this.listenTo(issueBar, 'statusChanged',\n                              (oldStatus, newStatus) => {\n                    const oldOpen = RB.BaseComment.isStateOpen(oldStatus);\n                    const newOpen = RB.BaseComment.isStateOpen(newStatus);\n\n                    if (oldOpen !== newOpen) {\n                        if (newOpen) {\n                            this._openIssueCount++;\n                        } else {\n                            this._openIssueCount--;\n                        }\n                    }\n\n                    this.trigger('openIssuesChanged');\n                });\n            }\n        });\n\n        _.each(this.$('.comment-section'), el => {\n            const $el = $(el);\n            const editor = new RB.ReviewRequestPage.ReviewReplyEditor({\n                anchorPrefix: $el.data('reply-anchor-prefix'),\n                contextID: $el.data('context-id'),\n                contextType: $el.data('context-type'),\n                review: this.model,\n                reviewReply: this._reviewReply,\n            });\n\n            const view = new RB.ReviewRequestPage.ReviewReplyEditorView({\n                el: el,\n                model: editor,\n                reviewRequestEditor: reviewRequestEditor,\n            });\n            view.render();\n\n            this.listenTo(editor, 'change:hasDraft', (model, hasDraft) => {\n                if (hasDraft) {\n                    this._replyDraftsCount++;\n                    this.trigger('hasDraftChanged', true);\n                } else {\n                    this._replyDraftsCount--;\n\n                    if (this._replyDraftsCount === 0) {\n                        this.trigger('hasDraftChanged', false);\n                    }\n                }\n            });\n\n            this._replyEditors.push(editor);\n            this._replyEditorViews.push(view);\n\n            if (editor.get('hasDraft')) {\n                this._replyDraftsCount++;\n            }\n        });\n\n        if (this._replyDraftsCount > 0) {\n            this.trigger('hasDraftChanged', true);\n        }\n\n        /*\n         * Load any diff fragments for comments made on this review. Each\n         * will be queued up and loaded when the page is rendered.\n         */\n        this._diffFragmentViews = [];\n\n        const page = RB.PageManager.getPage();\n        const diffCommentsData = this.entryModel.get('diffCommentsData');\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            const diffCommentData = diffCommentsData[i];\n\n            page.queueLoadDiff(diffCommentData[0], diffCommentData[1],\n                               view => this._diffFragmentViews.push(view));\n        }\n\n        /*\n         * Do this last, after ReviewReplyEditorView has already set up the\n         * inline editors.\n         */\n        const reviewRequest = this.model.get('parentObject');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n        _.each(this.$('pre.reviewtext'), el => {\n            RB.formatText($(el), { bugTrackerURL: bugTrackerURL });\n        });\n\n        this.listenTo(this.model, 'change:bodyTop',\n                      this._onBodyTopChanged);\n        this.listenTo(this.model, 'change:bodyBottom',\n                      this._onBodyBottomChanged);\n        this.listenTo(this.model, 'change:bodyTopRichText',\n                      this._onBodyTopRichTextChanged);\n        this.listenTo(this.model, 'change:bodyBottomRichText',\n                      this._onBodyBottomRichTextChanged);\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Body Top field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content.\n     */\n    _onBodyTopChanged() {\n        this._$bodyTop.html(this.model.get('htmlTextFields').bodyTop);\n    },\n\n    /**\n     * Handler for when the Body Top's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyTopRichTextChanged() {\n        if (this.model.get('bodyTopRichText')) {\n            this._$bodyTop.addClass('rich-text');\n        } else {\n            this._$bodyTop.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Handler for when the Body Bottom field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content. The visibility\n     * of the body section will also be dependent on whether there is any\n     * content (mimicking the logic used when rendering the page).\n     */\n    _onBodyBottomChanged() {\n        const html = this.model.get('htmlTextFields').bodyBottom;\n\n        this._$bodyBottom\n            .html(html)\n            .closest('li').setVisible(html && html.length > 0);\n    },\n\n    /**\n     * Handler for when the Body Bottom's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyBottomRichTextChanged() {\n        if (this.model.get('bodyBottomRichText')) {\n            this._$bodyBottom.addClass('rich-text');\n        } else {\n            this._$bodyBottom.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Return whether there are any open issues in the review.\n     *\n     * Returns:\n     *     boolean:\n     *     true if there are any open issues.\n     */\n    hasOpenIssues() {\n        return this._openIssueCount > 0;\n    },\n\n    /**\n     * Return the number of open issues in the review.\n     *\n     * Returns:\n     *     number:\n     *     The number of open issues.\n     */\n    getOpenIssueCount() {\n        return this._openIssueCount;\n    },\n\n    /**\n     * Return the ReviewReplyEditorView with the given context type and ID.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being replied to (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being replied to, if appropriate.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     The matching editor view.\n     */\n    getReviewReplyEditorView(contextType, contextID) {\n        if (contextID === undefined) {\n            contextID = null;\n        }\n\n        return _.find(this._replyEditorViews, view => {\n            const editor = view.model;\n            return editor.get('contextID') === contextID &&\n                   editor.get('contextType') === contextType;\n        });\n    },\n\n    /**\n     * Return the active reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The active draft reply, or null if none exists.\n     */\n    getReviewReply() {\n        return this._reviewReply;\n    },\n\n    /**\n     * Set up a new ReviewReply for the editors.\n     *\n     * The new ReviewReply will be used for any new comments made on this\n     * review.\n     *\n     * A ReviewReply is set until it's either destroyed or published, at\n     * which point a new one is set.\n     *\n     * Args:\n     *     reviewReply (RB.ReviewReply, optional):\n     *         The reply object. If this is ``null``, a new ``RB.ReviewReply``\n     *         will be created. Note that this argument is only expected to be\n     *         used for unit testing.\n     */\n    _setupNewReply(reviewReply) {\n        if (!reviewReply) {\n            reviewReply = this.model.createReply();\n        }\n\n        if (this._reviewReply !== null) {\n            this.stopListening(this._reviewReply);\n\n            // Update all the existing editors to point to the new object.\n            this._replyEditors.forEach(\n                editor => editor.set('reviewReply', reviewReply));\n\n            this.trigger('hasDraftChanged', false);\n        }\n\n        this.listenTo(reviewReply, 'destroyed published',\n                      () => this._setupNewReply());\n\n        this._reviewReply = reviewReply;\n    },\n\n    /**\n     * Show the reply draft banner.\n     *\n     * This will be called in response to any new replies made on a review,\n     * or if there are pending replies that already exist on the review.\n     */\n    _showReplyDraftBanner() {\n        if (!this._draftBannerShown) {\n            this._bannerView =\n                new RB.ReviewRequestPage.ReviewReplyDraftBannerView({\n                    model: this._reviewReply,\n                    $floatContainer: this.options.$bannerFloatContainer,\n                    noFloatContainerClass:\n                        this.options.bannerNoFloatContainerClass,\n                    reviewRequestEditor: this.entryModel.get(\n                        'reviewRequestEditor'),\n                });\n\n            this._bannerView.render();\n            this._bannerView.$el.appendTo(this.options.$bannerParent);\n            this._draftBannerShown = true;\n        }\n    },\n\n    /**\n     * Hide the reply draft banner.\n     */\n    _hideReplyDraftBanner() {\n        if (this._draftBannerShown) {\n            this._bannerView.remove();\n            this._bannerView = null;\n            this._draftBannerShown = false;\n        }\n    },\n});\n"]}