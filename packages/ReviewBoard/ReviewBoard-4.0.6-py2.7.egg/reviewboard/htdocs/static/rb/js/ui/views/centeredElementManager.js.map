{"version":3,"sources":["centeredElementManager.es6.js"],"names":[],"mappings":"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","file":"centeredElementManager.js","sourcesContent":["/**\n * A view which ensures that the specified elements are vertically centered.\n */\nRB.CenteredElementManager = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options passed to this view.\n     *\n     * Option Args:\n     *     elements (Array, optional):\n     *         An initial array of elements to center.\n     */\n    initialize(options={}) {\n        this._elements = options.elements || new Map();\n        this._$window = $(window);\n\n        this._updatePositionThrottled = _.throttle(() => this.updatePosition(),\n                                                   10);\n\n        this._$window.on('resize', this._updatePositionThrottled);\n        this._$window.on('scroll', this._updatePositionThrottled);\n    },\n\n    /**\n     * Remove the CenteredElementManager.\n     *\n     * This will result in the event handlers being removed.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        this._$window.off('resize', this._updatePositionThrottled);\n        this._$window.off('scroll', this._updatePositionThrottled);\n    },\n\n    /**\n     * Set the elements and their containers.\n     *\n     * Args:\n     *     elements (Map<Element, Element or jQuery>):\n     *         The elements to center within their respective containers.\n     */\n    setElements(elements) {\n        this._elements = elements;\n    },\n\n    /**\n     * Update the position of the elements.\n     *\n     * This should only be done when the set of elements changed, as the view\n     * will handle updating on window resizing and scrolling.\n     */\n    updatePosition() {\n        if (this._elements.size === 0) {\n            return;\n        }\n\n        const windowTop = this._$window.scrollTop();\n        const windowHeight = this._$window.height();\n        const windowBottom = windowTop + windowHeight;\n\n        this._elements.forEach((containers, el) => {\n            const $el = $(el);\n            const $topContainer = containers.$top;\n            const $bottomContainer = containers.$bottom || $topContainer;\n            const containerTop = $topContainer.offset().top;\n            const containerBottom = $bottomContainer.offset().top +\n                                    $bottomContainer.height();\n\n            /*\n             * We don't have to vertically center the element when its\n             * container is not on screen.\n             */\n            if (containerTop < windowBottom && containerBottom > windowTop) {\n                /*\n                 * When a container takes up the entire viewport, we can switch\n                 * the CSS to use position: fixed. This way, we do not have to\n                 * re-compute its position.\n                 */\n                if (windowTop >= containerTop &&\n                    windowBottom <= containerBottom) {\n                    if ($el.css('position') !== 'fixed') {\n                        $el.css({\n                            position: 'fixed',\n                            left: $el.offset().left,\n                            top: Math.round(\n                                (windowHeight - $el.outerHeight()) / 2),\n                        });\n                    }\n                } else {\n                    const top = Math.max(windowTop, containerTop);\n                    const bottom = Math.min(windowBottom, containerBottom);\n                    const elTop = top - containerTop + Math.round(\n                        (bottom - top - $el.outerHeight()) / 2);\n\n                    $el.css({\n                        position: 'absolute',\n                        left: '',\n                        top: elTop,\n                    });\n                }\n            }\n        });\n    },\n});\n"]}