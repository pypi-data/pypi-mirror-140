{"version":3,"sources":["inlineEditorView.es6.js"],"names":[],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,CAAC,gBAAH,GAAsB,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAqB;AACvC;AACJ;AACA;AACI,EAAA,cAAc,EAAE;AACZ,IAAA,gBAAgB,EAAE,GADN;AAEZ,IAAA,eAAe,EAAE,KAFL;AAGZ,IAAA,YAAY,EAAE,IAHF;AAIZ,IAAA,aAAa,EAAE,IAJH;AAKZ,IAAA,OAAO,EAAE,IALG;AAMZ,IAAA,WAAW,EAAE,GAND;AAOZ,IAAA,WAAW,EAAE,IAPD;AAQZ,IAAA,YAAY,EAAE,sBAAA,KAAK;AAAA,aAAI,KAAK,CAAC,UAAN,EAAJ;AAAA,KARP;AASZ,IAAA,SAAS,EAAE,EATC;AAUZ,IAAA,aAAa,EAAE,uBAAA,MAAM;AAAA,aAAI,MAAM,CAAC,MAAP,CAAc,GAAd,EAAJ;AAAA,KAVT;AAWZ,IAAA,WAAW,EAAE,KAXD;AAYZ,IAAA,YAAY,EAAE,sBAAC,MAAD,EAAS,YAAT,EAA0B;AACpC,UAAM,KAAK,GAAG,MAAM,CAAC,QAAP,MAAqB,EAAnC;AACA,UAAM,SAAS,GAAG,CAAC,MAAM,CAAC,OAAP,CAAe,WAAf,GACE,KADF,GAEE,KAAK,CAAC,UAAN,EAFH,KAE0B,EAF5C;AAGA,MAAA,YAAY,GAAG,MAAM,CAAC,aAAP,CAAqB,YAArB,CAAf;AAEA,aAAQ,SAAS,CAAC,MAAV,KAAqB,YAAY,CAAC,MAAlC,IACA,SAAS,KAAK,YADtB;AAEH,KArBW;AAsBZ,IAAA,WAAW,EAAE,IAtBD;AAuBZ,IAAA,SAAS,EAAE,KAvBC;AAwBZ,IAAA,yBAAyB,EAAE,KAxBf;AAyBZ,IAAA,cAAc,EAAE,IAzBJ;AA0BZ,IAAA,QAAQ,EAAE,IA1BE;AA2BZ,IAAA,aAAa,EAAE,uBAAC,MAAD,EAAS,KAAT;AAAA,aAAmB,MAAM,CAAC,MAAP,CAAc,GAAd,CAAkB,KAAlB,CAAnB;AAAA,KA3BH;AA4BZ,IAAA,WAAW,EAAE,IA5BD;AA6BZ,IAAA,YAAY,EAAE,IA7BF;AA8BZ,IAAA,gBAAgB,EAAE,KA9BN;AA+BZ,IAAA,SAAS,EAAE;AA/BC,GAJuB;;AAsCvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,UAnIuC,sBAmI5B,OAnI4B,EAmInB;AAChB,SAAK,OAAL,GAAe,CAAC,CAAC,QAAF,CAAW,OAAX,EAAoB,KAAK,cAAzB,CAAf;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,QAAL,GAAgB,KAAhB;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,iBAAL,GAAyB,IAAzB;AACH,GAzIsC;;AA2IvC;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,EAAA,MAlJuC,oBAkJ9B;AAAA;;AACL,SAAK,GAAL,CAAS,IAAT,CAAc,eAAd,EAA+B,IAA/B;AAEA,SAAK,MAAL,GAAc,CAAC,CAAC,QAAD,CAAD,CACT,QADS,8BACsB,KAAK,OAAL,CAAa,SADnC,GAET,GAFS,CAEL,SAFK,EAEM,QAFN,EAGT,IAHS,GAIT,YAJS,CAII,KAAK,GAJT,CAAd;AAMA,SAAK,MAAL,GAAc,KAAK,WAAL,GACT,SADS,CACC,KAAK,MADN,CAAd;AAEA,SAAK,WAAL,GAAoB,KAAK,MAAL,CAAY,CAAZ,EAAe,OAAf,KAA2B,UAA/C;AAEA,SAAK,QAAL,GAAgB,CAAC,EAAjB;;AAEA,QAAI,KAAK,OAAL,CAAa,WAAjB,EAA8B;AAC1B,WAAK,QAAL,GAAgB,CAAC,CAAC,KAAK,OAAL,CAAa,SAAb,GAAy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","file":"inlineEditorView.js","sourcesContent":["/**\n * A view for inline editors.\n *\n * This provides the framework for items which are \"editable\". These provide a\n * way to switch between a normal view and an edit view, which is usually a\n * text box (either single- or multiple-line).\n */\nRB.InlineEditorView = Backbone.View.extend({\n    /**\n     * Defaults for the view options.\n     */\n    defaultOptions: {\n        animationSpeedMS: 200,\n        deferEventSetup: false,\n        editIconPath: null,\n        editIconClass: null,\n        enabled: true,\n        extraHeight: 100,\n        focusOnOpen: true,\n        formatResult: value => value.htmlEncode(),\n        formClass: '',\n        getFieldValue: editor => editor.$field.val(),\n        hasRawValue: false,\n        isFieldDirty: (editor, initialValue) => {\n            const value = editor.getValue() || '';\n            const normValue = (editor.options.hasRawValue\n                               ? value\n                               : value.htmlEncode()) || '';\n            initialValue = editor.normalizeText(initialValue);\n\n            return (normValue.length !== initialValue.length ||\n                    normValue !== initialValue);\n        },\n        matchHeight: true,\n        multiline: false,\n        notifyUnchangedCompletion: false,\n        promptOnCancel: true,\n        rawValue: null,\n        setFieldValue: (editor, value) => editor.$field.val(value),\n        showButtons: true,\n        showEditIcon: true,\n        showRequiredFlag: false,\n        startOpen: false,\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     animationSpeedMS (number, optional):\n     *         The duration of animated transitions, in milliseconds.\n     *\n     *     deferEventSetup (boolean, optional):\n     *         Whether to defer event setup after rendering. This should be\n     *         used when a consumer wants to prioritize event handling (such as\n     *         handling the \"enter\" key for autocomplete).\n     *\n     *     editIconClass (string, optional):\n     *         The class name to use for the edit icon, when the icon is\n     *         created via CSS rules. This is only used if ``editIconPath`` is\n     *         unspecified.\n     *\n     *     editIconPath (string, optional):\n     *         The path for an image for the edit icon.\n     *\n     *     enabled (boolean):\n     *         Whether editing is enabled.\n     *\n     *     extraHeight (number, optional):\n     *         Extra height to add when displaying the editor, in pixels.\n     *\n     *     focusOnOpen (boolean, optional):\n     *         Whether to focus the field when opening the editor.\n     *\n     *     formatResult (function, optional):\n     *         A function to format the resulting value after editing back\n     *         into the element.\n     *\n     *     formClass (string, optional):\n     *         The class to add to the form's DOM element.\n     *\n     *     getFieldValue (function, optional):\n     *         A function to retrieve the field value.\n     *\n     *     hasRawValue (boolean, optional):\n     *         Whether the field has a \"raw value\", which is data for the field\n     *         separate from the actual contents of the element.\n     *\n     *     isFieldDirty (function, optional):\n     *         A function to calculate whether the editor value is dirty.\n     *\n     *     matchHeight (boolean, optional):\n     *         Whether to attempt to match the height of the editor and the\n     *         element it's replacing.\n     *\n     *     multiline (boolean, optional):\n     *         Whether the text input should be multi-line or single-line.\n     *\n     *     notifyUnchangedCompletion (boolean, optional):\n     *         Whether the editor should trigger a ``complete`` event even if\n     *         the value was unchanged. If this is ``false``, the editor will\n     *         trigger a ``cancel`` event instead.\n     *\n     *     promptOnCancel (boolean, optional):\n     *         Whether to prompt the user before cancelling if the editor is\n     *         dirty.\n     *\n     *     rawValue (*, optional):\n     *         When ``hasRawValue`` is ``true``, this provides the data for the\n     *         raw value of the item being edited.\n     *\n     *     setFieldValue (function, optional):\n     *         A function to set the field value.\n     *\n     *     showButtons (boolean, optional):\n     *         Whether to show OK/Cancel buttons.\n     *\n     *     showEditIcon (boolean, optional):\n     *         Whether to show the edit icon.\n     *\n     *     showRequiredFlag (boolean, optional):\n     *         Whether to show the required flag on the edit icon.\n     *\n     *     startOpen (boolean, optional):\n     *         Whether the editor should be open when first created.\n     *\n     *     stripTags (boolean, optional):\n     *         Whether to strip out HTML tags when normalizing input.\n     *\n     *     useEditIconOnly (boolean, optional):\n     *         Whether the editor can be opened only by clicking on the edit\n     *         icon. If false, clicking on the field value will also trigger an\n     *         edit.\n     */\n    initialize(options) {\n        this.options = _.defaults(options, this.defaultOptions);\n        this._initialValue = null;\n        this._editing = false;\n        this._dirty = false;\n        this._dirtyCalcTimeout = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.InlineEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.data('inline-editor', this);\n\n        this._$form = $('<form>')\n            .addClass(`inline-editor-form ${this.options.formClass}`)\n            .css('display', 'inline')\n            .hide()\n            .insertBefore(this.$el);\n\n        this.$field = this.createField()\n            .prependTo(this._$form);\n        this._isTextArea = (this.$field[0].tagName === 'TEXTAREA');\n\n        this.$buttons = $();\n\n        if (this.options.showButtons) {\n            this.$buttons = $(this.options.multiline ? '<div>' : '<span>')\n                .hide()\n                .addClass('buttons')\n                .appendTo(this._$form);\n\n            $('<input type=\"button\" class=\"save\">')\n                .val(gettext('OK'))\n                .appendTo(this.$buttons)\n                .click(this.submit.bind(this));\n\n            $('<input type=\"button\" class=\"cancel\">')\n                .val(gettext('Cancel'))\n                .appendTo(this.$buttons)\n                .click(this.cancel.bind(this));\n        }\n\n        this._$editIcon = $();\n\n        if (this.options.showEditIcon) {\n            const editText = gettext('Edit this field');\n            this._$editIcon = $('<a class=\"editicon\" href=\"#\" role=\"button\">')\n                .attr({\n                    'title': editText,\n                    'aria-label': editText,\n                })\n                .click(e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    this.startEdit();\n                });\n\n            if (this.options.editIconPath) {\n                this._$editIcon.append(\n                    `<img src=\"${this.options.editIconPath}\">`);\n            } else if (this.options.editIconClass) {\n                this._$editIcon.append(\n                    `<div class=\"${this.options.editIconClass}\" aria-hidden=\"true\"></div>`);\n            }\n\n            if (this.options.showRequiredFlag) {\n                const requiredText = gettext('This field is required');\n                $('<span class=\"required-flag\">*</span>')\n                    .attr({\n                        'aria-label': requiredText,\n                        'title': requiredText,\n                    })\n                    .appendTo(this._$editIcon);\n            }\n\n            if (this.options.multiline && this.$el[0].id) {\n                $(`label[for=\"${this.$el[0].id}\"]`)\n                    .append(this._$editIcon);\n            } else {\n                this._$editIcon.insertAfter(this.$el);\n            }\n        }\n\n        if (!this.options.deferEventSetup) {\n            this.setupEvents();\n        }\n\n        if (this.options.startOpen) {\n            this.startEdit({\n                preventAnimation: true,\n            });\n        }\n\n        if (this.options.enabled) {\n            this.enable();\n        } else {\n            this.disable();\n        }\n\n        return this;\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        if (this.options.multiline) {\n            return $('<textarea>').autoSizeTextArea();\n        } else {\n            return $('<input type=\"text\">');\n        }\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        this.$field\n            .keydown(e => {\n                e.stopPropagation();\n\n                switch (e.keyCode || e.charCode || e.which) {\n                    case 13: // Enter\n                        if (!this.options.multiline || e.ctrlKey) {\n                            this.submit();\n                        }\n\n                        if (!this.options.multiline) {\n                            e.preventDefault();\n                        }\n\n                        break;\n\n                    case 27: // Escape\n                        this.cancel();\n                        break;\n\n                    case 83: // S\n                    case 115: // s\n                        if (e.ctrlKey) {\n                            this.submit();\n                            e.preventDefault();\n                        }\n                        break;\n\n                    default:\n                        break;\n                }\n            })\n            .keypress(e => e.stopPropagation())\n            .keyup(e => {\n                e.stopPropagation();\n                e.preventDefault();\n\n                this._scheduleUpdateDirtyState();\n            })\n            .on('cut paste', () => this._scheduleUpdateDirtyState());\n\n        if (!this.options.useEditIconOnly) {\n            /*\n             * Check if the mouse was dragging, so that the editor isn't opened\n             * when text is selected.\n             */\n            let isDragging = true;\n\n            this.$el\n                .on('click', 'a', e => e.stopPropagation())\n                .click(e => {\n                    e.stopPropagation();\n                    e.preventDefault();\n\n                    if (!isDragging) {\n                        this.startEdit();\n                    }\n\n                    isDragging = true;\n                })\n                .mousedown(() => {\n                    isDragging = false;\n                    this.$el.one('mousemove', () => {\n                        isDragging = true;\n                    });\n                })\n                .mouseup(() => {\n                    this.$el.unbind('mousemove');\n                });\n        }\n\n        $(window).resize(this._fitWidthToParent.bind(this));\n    },\n\n    /**\n     * Start editing.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     preventAnimation (boolean, optional):\n     *         Whether to prevent the default animation.\n     */\n    startEdit(options={}) {\n        if (this._editing || !this.options.enabled) {\n            return;\n        }\n\n        let value;\n\n        if (this.options.hasRawValue) {\n            this._initialValue = this.options.rawValue;\n            value = this._initialValue;\n        } else {\n            this._initialValue = this.$el.text();\n            value = this.normalizeText(this._initialValue).htmlDecode();\n        }\n\n        this._editing = true;\n        this.options.setFieldValue(this, value);\n\n        this.trigger('beginEditPreShow');\n        this.showEditor(options);\n        this.trigger('beginEdit');\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Options Args:\n     *     preventAnimation (boolean, optional):\n     *         Whether to prevent the default animation.\n     */\n    showEditor(options={}) {\n        if (this.options.multiline && !options.preventAnimation) {\n            this._$editIcon.fadeOut(this.options.animationSpeedMS);\n        } else {\n            this._$editIcon.hide();\n        }\n\n        this.$el.hide();\n        this._$form.show();\n\n        if (this.options.multiline) {\n            const elHeight = this.$el.outerHeight();\n            const newHeight = elHeight + this.options.extraHeight;\n\n            this._fitWidthToParent();\n\n            if (this._isTextArea) {\n                if (this.options.matchHeight) {\n                    // TODO: Set autosize min height\n                    this.$field\n                        .autoSizeTextArea('setMinHeight', newHeight)\n                        .css('overflow', 'hidden');\n\n                    if (options.preventAnimation) {\n                        this.$field.height(newHeight);\n                    } else {\n                        this.$field\n                            .height(elHeight)\n                            .animate({ height: newHeight },\n                                     this.options.animationSpeedMS);\n                    }\n                } else {\n                    /*\n                     * If there's significant processing that happens between\n                     * the text and what's displayed in the element, it's\n                     * likely that the rendered size will be different from the\n                     * editor size. In that case, don't try to match sizes,\n                     * just ask the field to auto-size itself to the size of\n                     * the source text.\n                     */\n                    this.$field.autoSizeTextArea('autoSize', true, false,\n                                                  elHeight);\n                }\n            }\n        }\n\n        this.$buttons.show();\n\n        // Execute this after the animation, if we performed one.\n        this.$field.queue(() => {\n            if (this.options.multiline && this._isTextArea) {\n                this.$field.css('overflow', 'auto');\n            }\n\n            this._fitWidthToParent();\n\n            if (this.options.focusOnOpen) {\n                this.$field.focus();\n            }\n\n            if (!this.options.multiline &&\n                this.$field[0].tagName === 'INPUT') {\n                this.$field[0].select();\n            }\n\n            this.$field.dequeue();\n        });\n    },\n\n    /**\n     * Hide the inline editor.\n     */\n    hideEditor() {\n        this.$field.blur();\n        this.$buttons.hide();\n\n        if (this.options.multiline) {\n            this._$editIcon.fadeIn(this.options.animationSpeedMS);\n        } else {\n            this._$editIcon.show();\n        }\n\n        if (this.options.multiline &&\n            this.options.matchHeight &&\n            this._editing &&\n            this._isTextArea) {\n            this.$field\n                .css('overflow', 'hidden')\n                .animate({ height: this.$el.outerHeight() },\n                        this.options.animationSpeedMS);\n        }\n\n        this.$field.queue(() => {\n            this.$el.show();\n            this._$form.hide();\n            this.$field.dequeue();\n        });\n\n        this._editing = false;\n        this._updateDirtyState();\n    },\n\n    /**\n     * Save the value of the editor.\n     */\n    save() {\n        const value = this.getValue();\n        const initialValue = this._initialValue;\n        const dirty = this.isDirty();\n\n        if (dirty) {\n            this.$el.html(this.options.formatResult(value));\n            this._initialValue = this.$el.text();\n        }\n\n        if (dirty || this.options.notifyUnchangedCompletion) {\n            this.trigger('complete', value, initialValue);\n\n            if (this.options.hasRawValue) {\n                this.options.rawValue = value;\n            }\n        } else {\n            this.trigger('cancel', this._initialValue);\n        }\n    },\n\n    /**\n     * Submit the editor.\n     */\n    submit() {\n        // hideEditor() resets the _dirty flag, so we need to save() first.\n        this.save();\n        this.hideEditor();\n    },\n\n    /**\n     * Cancel the edit.\n     */\n    cancel() {\n        if (!this.isDirty() ||\n            !this.options.promptOnCancel ||\n            confirm(gettext('You have unsaved changes. Are you sure you want to discard them?'))) {\n            this.hideEditor();\n            this.trigger('cancel', this._initialValue);\n        }\n    },\n\n    /**\n     * Return the dirty state of the editor.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the editor is currently dirty.\n     */\n    isDirty() {\n        if (this._dirtyCalcTimeout !== null) {\n            clearTimeout(this._dirtyCalcTimeout);\n            this._updateDirtyState();\n        }\n\n        return this._dirty;\n    },\n\n    /**\n     * Return the value in the field.\n     *\n     * Returns:\n     *     *:\n     *     The current value of the field.\n     */\n    getValue() {\n        return this.options.getFieldValue(this);\n    },\n\n    /**\n     * Set the value in the field.\n     *\n     * Args:\n     *     value (*):\n     *     The new value for the field.\n     */\n    setValue(value) {\n        this.options.setFieldValue(this, value);\n        this._updateDirtyState();\n    },\n\n    /**\n     * Enable the editor.\n     */\n    enable() {\n        if (this._editing) {\n            this.showEditor();\n        }\n\n        this._$editIcon.show();\n        this.options.enabled = true;\n    },\n\n    /**\n     * Disable the editor.\n     */\n    disable() {\n        if (this._editing) {\n            this.hideEditor();\n        }\n\n        this._$editIcon.hide();\n        this.options.enabled = false;\n    },\n\n    /**\n     * Return whether the editor is currently in edit mode.\n     *\n     * Returns:\n     *     boolean:\n     *     true if the inline editor is open.\n     */\n    editing() {\n        return this._editing;\n    },\n\n    /**\n     * Normalize the given text.\n     *\n     * Args:\n     *     text (string):\n     *         The text to normalize.\n     *\n     * Returns:\n     *     string:\n     *     The text with ``<br>`` elements turned into newlines and (in the\n     *     case of multi-line data), whitespace collapsed.\n     */\n    normalizeText(text) {\n        if (this.options.stripTags) {\n            /*\n             * Turn <br> elements back into newlines before stripping out all\n             * other tags. Without this, we lose multi-line data when editing\n             * some legacy data.\n             */\n            text = text.replace(/<br>/g, '\\n');\n            text = text.stripTags().strip();\n        }\n\n        if (!this.options.multiline) {\n            text = text.replace(/\\s{2,}/g, ' ');\n        }\n\n        return text;\n    },\n\n    /**\n     * Schedule an update for the dirty state.\n     */\n    _scheduleUpdateDirtyState() {\n        if (this._dirtyCalcTimeout === null) {\n            this._dirtyCalcTimeout = setTimeout(\n                this._updateDirtyState.bind(this), 200);\n        }\n    },\n\n    /**\n     * Update the dirty state of the editor.\n     */\n    _updateDirtyState() {\n        const newDirtyState = (\n            this._editing &&\n            this.options.isFieldDirty(this, this._initialValue));\n\n        if (this._dirty !== newDirtyState) {\n            this._dirty = newDirtyState;\n            this.trigger('dirtyStateChanged', this._dirty);\n        }\n\n        this._dirtyCalcTimeout = null;\n    },\n\n    /**\n     * Fit the editor width to the parent element.\n     */\n    _fitWidthToParent() {\n        if (!this._editing) {\n            return;\n        }\n\n        if (this.options.multiline) {\n            this.$field.css({\n                '-webkit-box-sizing': 'border-box',\n                '-moz-box-sizing': 'border-box',\n                'box-sizing': 'border-box',\n                'width': '100%',\n            });\n            return;\n        }\n\n        const $formParent = this._$form.parent();\n        const parentTextAlign = $formParent.css('text-align');\n        const isLeftAligned = (parentTextAlign === 'left');\n\n        if (!isLeftAligned) {\n            $formParent.css('text-align', 'left');\n        }\n\n        const boxSizing = this.$field.css('box-sizing');\n        let extentTypes;\n\n        if (boxSizing === 'border-box') {\n            extentTypes = 'm';\n        } else if (boxSizing === 'padding-box') {\n            extentTypes = 'p';\n        } else {\n            extentTypes = 'bmp';\n        }\n\n        let buttonsWidth = 0;\n\n        if (this.$buttons.length !== 0) {\n            const buttonsDisplay = this.$buttons.css('display');\n\n            if (buttonsDisplay === 'inline' ||\n                buttonsDisplay === 'inline-block') {\n                /*\n                 * The buttons are set for the same line as the field, so\n                 * factor the width of the buttons container into the field\n                 * width calculation below.\n                 */\n                buttonsWidth = this.$buttons.outerWidth();\n            }\n        }\n\n        /*\n         * First make the field really small so it will fit without wrapping,\n         * then figure out the offset and use it to calculate the desired\n         * width.\n         */\n        this.$field\n            .width(0)\n            .outerWidth(\n                $formParent.innerWidth() -\n                (this._$form.offset().left - $formParent.offset().left) -\n                this.$field.getExtents(extentTypes, 'lr') -\n                buttonsWidth);\n\n        if (!isLeftAligned) {\n            $formParent.css('text-align', parentTextAlign);\n        }\n    },\n});\n\n\n/**\n * A view for inline editors which use the CodeMirror editor for Markdown.\n */\nRB.RichTextInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Defaults for the view options.\n     */\n    defaultOptions: _.defaults({\n        matchHeight: false,\n        multiline: true,\n        setFieldValue: (editor, value) =>\n            editor.textEditor.setText(value || ''),\n        getFieldValue: editor => editor.textEditor.getText(),\n        isFieldDirty: (editor, initialValue) => {\n            initialValue = editor.normalizeText(initialValue);\n\n            return editor.textEditor.isDirty(initialValue);\n        },\n    }, RB.InlineEditorView.prototype.defaultOptions),\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        let origRichText;\n\n        this.textEditor = new RB.TextEditorView(this.options.textEditorOptions);\n        this.textEditor.$el.on('resize', () => this.trigger('resize'));\n\n        this.$el.data('text-editor', this.textEditor);\n\n        this.once('beginEdit', () => {\n            const $span = $('<span class=\"enable-markdown\">');\n            const $checkbox = $('<input type=\"checkbox\">')\n                .attr('id', _.uniqueId('markdown_check'))\n                .change(() => _.defer(() => this._updateDirtyState()))\n                .appendTo($span);\n\n            this.textEditor.bindRichTextCheckbox($checkbox);\n\n            $('<label>')\n                .attr('for', $checkbox[0].id)\n                .text(gettext('Enable Markdown'))\n                .appendTo($span);\n\n            this.$buttons.append($span);\n\n            const $markdownRef = $('<a class=\"markdown-info\" target=\"_blank\">')\n                .attr('href', `${MANUAL_URL}users/markdown/`)\n                .text(gettext('Markdown Reference'))\n                .setVisible(this.textEditor.richText)\n                .appendTo(this.$buttons);\n\n            this.textEditor.bindRichTextVisibility($markdownRef);\n        });\n\n        this.listenTo(this, 'beginEdit', () => {\n            this.textEditor._showEditor();\n            origRichText = this.textEditor.richText;\n        });\n\n        this.listenTo(this, 'cancel', () => {\n            this.textEditor._hideEditor();\n            this.textEditor.setRichText(origRichText);\n        });\n\n        this.listenTo(this, 'complete', () => this.textEditor._hideEditor());\n\n        return this.textEditor.render().$el;\n    },\n});\n"]}