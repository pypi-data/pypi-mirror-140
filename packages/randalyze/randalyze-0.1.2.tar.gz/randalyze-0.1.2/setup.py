# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['randalyze', 'randalyze.analyzers', 'randalyze.generators']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['randalyze = randalyze.__main__:main']}

setup_kwargs = {
    'name': 'randalyze',
    'version': '0.1.2',
    'description': 'Create series of random numbers fitting a specified distribution, and then analyze them.',
    'long_description': "# Randalyze - Random Number Generator And Analyzer\n\n## What Does Randalyze Do?\n\nRandalyze is a Python module that you can import or use directly from the command line to generate a set of random numbers. These numbers will fit a specified distribution, rather than just being evenly distributed.\n\nIt also allows you to analyze a set of numbers, to see which distribution they match.\n\n## Installation\n\nRandalyze supports Python 3.8 and later, so you can install it on Windows 7 if you want. It doesn't support Python 2.7.\n\nTo install Randalyze, create a virtual environment and use `pip`:\n\n```bash\npip install randalyze\n```\n\n## Usage\n\n### Command Line Usage\n\n#### Generating Random Numbers\n\nThe `generate` command creates a number of random numbers. The type of generator must be specified - currently the only option is `benford`, and the number (or count) of numbers generated is specified with the `-c` option.\n\nFor example, to generate 100 random numbers with a Benford distribution, the following command line can be used:\n\n```bash\nrandalyze generate -c 100 benford\n```\n\nor, if you're not using an active virtual environment:\n\n```bash\npython -m randalyze generate -c 100 benford\n```\n\nFor detailled parameter descriptions, use:\n\n```bash\nrandalyze --help\nrandalyze generate --help\n```\n\n#### Analyzing Numbers\n\nIf you have a set of numbers, `randalyze` can analyze them and tell you how close to a Benford distribution they are. These numbers may have been generated by `randalyze`, or maybe obtained from somewhere else - it really doesn't matter.\n\nSo, to analyze an output of 10,000 numbers from the `randalyze generate` command, and see whether it matches a Benford distribution to within 10%, use:\n\n```bash\nrandalyze generate benford -c 10000 | randalyze analyze -t 10 benford\n```\n\nAnd to ensure the numbers in a text file `numbers.txt`, with one number per line, fit a Benford distribution:\n\n```bash\ncat numbers.txt | randalyze analyze -t 10 benford\n```\n\nor use the `FILE` parameter:\n\n```bash\nrandalyze analyze -t 10 benford numbers.txt\n```\n\nAnd to produce the output in JSON format:\n\n```bash\nrandalyze analyze -t 10 --format json benford numbers.txt\n```\n\n#### Self Testing\n\nYou can use `randalyze` to analyze the numbers it creates by piping the output of the `generate` command into the `analyze` command. For example, to check whether 10,000 generated numbers are wihin 10% of a Benford distribution, use:\n\n```bash\nrandalyze generate benford -c 10000 | randalyze analyze -t 10 benford\n```\n",
    'author': 'Jason Ross (big-jr)',
    'author_email': 'jason@softwarepragmatism.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
