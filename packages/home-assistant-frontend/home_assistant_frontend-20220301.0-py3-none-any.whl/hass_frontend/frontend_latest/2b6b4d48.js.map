{"version":3,"file":"2b6b4d48.js","mappings":";AAuDA;;;;AAKA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;;;;;AAMA;AACA;;AAEA;;AAEA;;;AAIA;AACA;;;AAIA;;;AAIA;;;;;;AAhFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-file-upload.ts"],"sourcesContent":["import { mdiClose } from \"@mdi/js\";\nimport \"@polymer/iron-input/iron-input\";\nimport \"@polymer/paper-input/paper-input-container\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-circular-progress\";\nimport \"./ha-icon-button\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: FileList };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public accept!: string;\n\n  @property() public icon!: string;\n\n  @property() public label!: string;\n\n  @property() public value: string | TemplateResult | null = null;\n\n  @property({ type: Boolean }) private uploading = false;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  private autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._input?.click();\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (changedProperties.has(\"_drag\") && !this.uploading) {\n      (\n        this.shadowRoot!.querySelector(\"paper-input-container\") as any\n      )._setFocused(this._drag);\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<ha-circular-progress\n            alt=\"Uploading\"\n            size=\"large\"\n            active\n          ></ha-circular-progress>`\n        : html`\n            <label for=\"input\">\n              <paper-input-container\n                .alwaysFloatLabel=${Boolean(this.value)}\n                @drop=${this._handleDrop}\n                @dragenter=${this._handleDragStart}\n                @dragover=${this._handleDragStart}\n                @dragleave=${this._handleDragEnd}\n                @dragend=${this._handleDragEnd}\n                class=${classMap({\n                  dragged: this._drag,\n                })}\n              >\n                <label for=\"input\" slot=\"label\"> ${this.label} </label>\n                <iron-input slot=\"input\">\n                  <input\n                    id=\"input\"\n                    type=\"file\"\n                    class=\"file\"\n                    accept=${this.accept}\n                    @change=${this._handleFilePicked}\n                  />\n                  ${this.value}\n                </iron-input>\n                ${this.value\n                  ? html`\n                      <ha-icon-button\n                        slot=\"suffix\"\n                        @click=${this._clearValue}\n                        .label=${this.hass?.localize(\"ui.common.close\") ||\n                        \"close\"}\n                        .path=${mdiClose}\n                      ></ha-icon-button>\n                    `\n                  : html`\n                      <ha-icon-button\n                        slot=\"suffix\"\n                        .path=${this.icon}\n                      ></ha-icon-button>\n                    `}\n              </paper-input-container>\n            </label>\n          `}\n    `;\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", { files: ev.dataTransfer.files });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return css`\n      paper-input-container {\n        position: relative;\n        padding: 8px;\n        margin: 0 -8px;\n      }\n      paper-input-container.dragged:before {\n        position: var(--layout-fit_-_position);\n        top: var(--layout-fit_-_top);\n        right: var(--layout-fit_-_right);\n        bottom: var(--layout-fit_-_bottom);\n        left: var(--layout-fit_-_left);\n        background: currentColor;\n        content: \"\";\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n        border-radius: 4px;\n      }\n      input.file {\n        display: none;\n      }\n      img {\n        max-width: 125px;\n        max-height: 125px;\n      }\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        --mdc-icon-size: 20px;\n      }\n      ha-circular-progress {\n        display: block;\n        text-align-last: center;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n"],"names":[],"sourceRoot":""}