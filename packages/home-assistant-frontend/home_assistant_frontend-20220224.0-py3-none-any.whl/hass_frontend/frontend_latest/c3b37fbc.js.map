{"version":3,"file":"c3b37fbc.js","mappings":";AAaA;;AAEA;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;;;;;ACjBA;;;ACcA;AACA;;;AA4BA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAlDA;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;ACnBA;;AC0BA;AACA;;AAEA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AC0FA;;;AAGA;;;AAQA;;;;AAIA;AACA;AACA;AACA;AACA;;;;;AAOA;AACA;AACA;AACA;AACA;AAGA;;;;AAIA;AACA;AAOA;AACA;;;;AAIA;AACA;AACA;AACA;AAGA;AAGA;;;AAGA;AACA;AACA;AACA;AAGA;AAGA;;;;AAIA;AACA;AACA;AACA;AAGA;AAGA;;;AAGA;;;AAGA;AAGA;;;AAGA;AACA;;;;;AAKA;;;;AAKA;AACA;;AAEA;;AAEA;;;AAIA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AApMA","sources":["webpack://home-assistant-frontend/./src/components/ha-dialog.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/config/zone/dialog-zone-detail.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nexport const createCloseHeading = (\n  hass: HomeAssistant,\n  title: string | TemplateResult\n) => html`\n  <span class=\"header_title\">${title}</span>\n  <ha-icon-button\n    .label=${hass.localize(\"ui.dialogs.generic.close\")}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n    dir=${computeRTLDirection(hass)}\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(--divider-color);\n        z-index: var(--dialog-z-index, 7);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 8px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertial-align-dialog, center);\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 20px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 20px 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 20px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(\n          --ha-dialog-border-radius,\n          var(--ha-card-border-radius, 4px)\n        );\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 10px;\n        text-decoration: none;\n        color: inherit;\n      }\n      .header_title {\n        margin-right: 40px;\n      }\n      [dir=\"rtl\"].header_button {\n        right: auto;\n        left: 16px;\n      }\n      [dir=\"rtl\"].header_title {\n        margin-left: 40px;\n        margin-right: 0px;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n      }\n      :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n        margin-left: 10px;\n        margin-right: auto;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon\";\n\ntype IconItem = {\n  icon: string;\n  keywords: string[];\n};\nlet iconItems: IconItem[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<IconItem> = (item) => html`<mwc-list-item\n  graphic=\"avatar\"\n>\n  <ha-icon .icon=${item.icon} slot=\"graphic\"></ha-icon>\n  ${item.icon}\n</mwc-list-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${iconItems}\n        .label=${this.label}\n        .disabled=${this.disabled}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : this.fallbackPath\n          ? html`<ha-svg-icon\n              .path=${this.fallbackPath}\n              slot=\"icon\"\n            ></ha-svg-icon>`\n          : \"\"}\n      </ha-combo-box>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !iconItems.length) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n\n      iconItems = iconList.default.map((icon) => ({\n        icon: `mdi:${icon.name}`,\n        keywords: icon.keywords,\n      }));\n\n      (this.comboBox as any).filteredItems = iconItems;\n\n      Object.keys(customIcons).forEach((iconSet) => {\n        this._loadCustomIconItems(iconSet);\n      });\n    }\n  }\n\n  private async _loadCustomIconItems(iconsetPrefix: string) {\n    try {\n      const getIconList = customIcons[iconsetPrefix].getIconList;\n      if (typeof getIconList !== \"function\") {\n        return;\n      }\n      const iconList = await getIconList();\n      const customIconItems = iconList.map((icon) => ({\n        icon: `${iconsetPrefix}:${icon.name}`,\n        keywords: icon.keywords ?? [],\n      }));\n      iconItems.push(...customIconItems);\n      (this.comboBox as any).filteredItems = iconItems;\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: IconItem[] = [];\n      const filteredItemsByKeywords: IconItem[] = [];\n\n      iconItems.forEach((item) => {\n        if (item.icon.includes(filterString)) {\n          filteredItems.push(item);\n          return;\n        }\n        if (item.keywords.some((t) => t.includes(filterString))) {\n          filteredItemsByKeywords.push(item);\n        }\n      });\n\n      filteredItems.push(...filteredItemsByKeywords);\n\n      if (filteredItems.length > 0) {\n        (this.comboBox as any).filteredItems = filteredItems;\n      } else {\n        (this.comboBox as any).filteredItems = [\n          { icon: filterString, keywords: [] },\n        ];\n      }\n    } else {\n      (this.comboBox as any).filteredItems = iconItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        color: var(--primary-text-color);\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      .mdc-text-field__icon {\n        color: var(--secondary-text-color);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { addDistanceToCoord } from \"../../../common/location/add_distance_to_coord\";\nimport { computeRTLDirection } from \"../../../common/util/compute_rtl\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/map/ha-locations-editor\";\nimport type { MarkerLocation } from \"../../../components/map/ha-locations-editor\";\nimport { getZoneEditorInitData, ZoneMutableParams } from \"../../../data/zone\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport { ZoneDetailDialogParams } from \"./show-dialog-zone-detail\";\n\nclass DialogZoneDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _latitude!: number;\n\n  @state() private _longitude!: number;\n\n  @state() private _passive!: boolean;\n\n  @state() private _radius!: number;\n\n  @state() private _error?: string;\n\n  @state() private _params?: ZoneDetailDialogParams;\n\n  @state() private _submitting = false;\n\n  public showDialog(params: ZoneDetailDialogParams): void {\n    this._params = params;\n    this._error = undefined;\n    if (this._params.entry) {\n      this._name = this._params.entry.name || \"\";\n      this._icon = this._params.entry.icon || \"\";\n      this._latitude = this._params.entry.latitude || this.hass.config.latitude;\n      this._longitude =\n        this._params.entry.longitude || this.hass.config.longitude;\n      this._passive = this._params.entry.passive || false;\n      this._radius = this._params.entry.radius || 100;\n    } else {\n      const initConfig = getZoneEditorInitData();\n      let movedHomeLocation;\n      if (!initConfig?.latitude || !initConfig?.longitude) {\n        movedHomeLocation = addDistanceToCoord(\n          [this.hass.config.latitude, this.hass.config.longitude],\n          Math.random() * 500 * (Math.random() < 0.5 ? -1 : 1),\n          Math.random() * 500 * (Math.random() < 0.5 ? -1 : 1)\n        );\n      }\n      this._latitude = initConfig?.latitude || movedHomeLocation[0];\n      this._longitude = initConfig?.longitude || movedHomeLocation[1];\n      this._name = initConfig?.name || \"\";\n      this._icon = initConfig?.icon || \"mdi:map-marker\";\n\n      this._passive = false;\n      this._radius = 100;\n    }\n  }\n\n  public closeDialog(): void {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n    const nameInvalid = this._name.trim() === \"\";\n    const iconInvalid = Boolean(this._icon && !this._icon.trim().includes(\":\"));\n    const latInvalid = String(this._latitude) === \"\";\n    const lngInvalid = String(this._longitude) === \"\";\n    const radiusInvalid = String(this._radius) === \"\";\n\n    const valid =\n      !nameInvalid &&\n      !iconInvalid &&\n      !latInvalid &&\n      !lngInvalid &&\n      !radiusInvalid;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(\n          this.hass,\n          this._params.entry\n            ? this._params.entry.name\n            : this.hass!.localize(\"ui.panel.config.zone.detail.new_zone\")\n        )}\n      >\n        <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <div class=\"form\">\n            <paper-input\n              dialogInitialFocus\n              .value=${this._name}\n              .configValue=${\"name\"}\n              @value-changed=${this._valueChanged}\n              .label=${this.hass!.localize(\"ui.panel.config.zone.detail.name\")}\n              .errorMessage=${this.hass!.localize(\n                \"ui.panel.config.zone.detail.required_error_msg\"\n              )}\n              required\n              auto-validate\n            ></paper-input>\n            <ha-icon-picker\n              .value=${this._icon}\n              .configValue=${\"icon\"}\n              @value-changed=${this._valueChanged}\n              .label=${this.hass!.localize(\"ui.panel.config.zone.detail.icon\")}\n              .errorMessage=${this.hass!.localize(\n                \"ui.panel.config.zone.detail.icon_error_msg\"\n              )}\n              .invalid=${iconInvalid}\n            ></ha-icon-picker>\n            <ha-locations-editor\n              class=\"flex\"\n              .hass=${this.hass}\n              .locations=${this._location(\n                this._latitude,\n                this._longitude,\n                this._radius,\n                this._passive,\n                this._icon\n              )}\n              @location-updated=${this._locationChanged}\n              @radius-updated=${this._radiusChanged}\n            ></ha-locations-editor>\n            <div class=\"location\">\n              <paper-input\n                .value=${this._latitude}\n                .configValue=${\"latitude\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.panel.config.zone.detail.latitude\"\n                )}\n                .errorMessage=${this.hass!.localize(\n                  \"ui.panel.config.zone.detail.required_error_msg\"\n                )}\n                .invalid=${latInvalid}\n              ></paper-input>\n              <paper-input\n                .value=${this._longitude}\n                .configValue=${\"longitude\"}\n                @value-changed=${this._valueChanged}\n                .label=${this.hass!.localize(\n                  \"ui.panel.config.zone.detail.longitude\"\n                )}\n                .errorMessage=${this.hass!.localize(\n                  \"ui.panel.config.zone.detail.required_error_msg\"\n                )}\n                .invalid=${lngInvalid}\n              ></paper-input>\n            </div>\n            <paper-input\n              .value=${this._radius}\n              .configValue=${\"radius\"}\n              @value-changed=${this._valueChanged}\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zone.detail.radius\"\n              )}\n              .errorMessage=${this.hass!.localize(\n                \"ui.panel.config.zone.detail.required_error_msg\"\n              )}\n              .invalid=${radiusInvalid}\n            ></paper-input>\n            <p>\n              ${this.hass!.localize(\"ui.panel.config.zone.detail.passive_note\")}\n            </p>\n            <ha-formfield\n              .label=${this.hass!.localize(\n                \"ui.panel.config.zone.detail.passive\"\n              )}\n              .dir=${computeRTLDirection(this.hass)}\n            >\n              <ha-switch\n                .checked=${this._passive}\n                @change=${this._passiveChanged}\n              ></ha-switch>\n            </ha-formfield>\n          </div>\n        </div>\n        ${this._params.entry\n          ? html`\n              <mwc-button\n                slot=\"secondaryAction\"\n                class=\"warning\"\n                @click=${this._deleteEntry}\n                .disabled=${this._submitting}\n              >\n                ${this.hass!.localize(\"ui.panel.config.zone.detail.delete\")}\n              </mwc-button>\n            `\n          : html``}\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${!valid || this._submitting}\n        >\n          ${this._params.entry\n            ? this.hass!.localize(\"ui.panel.config.zone.detail.update\")\n            : this.hass!.localize(\"ui.panel.config.zone.detail.create\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _location = memoizeOne(\n    (\n      lat: number,\n      lng: number,\n      radius: number,\n      passive: boolean,\n      icon: string\n    ): MarkerLocation[] => {\n      const computedStyles = getComputedStyle(this);\n      const zoneRadiusColor = computedStyles.getPropertyValue(\"--accent-color\");\n      const passiveRadiusColor = computedStyles.getPropertyValue(\n        \"--secondary-text-color\"\n      );\n      return [\n        {\n          id: \"location\",\n          latitude: Number(lat),\n          longitude: Number(lng),\n          radius,\n          radius_color: passive ? passiveRadiusColor : zoneRadiusColor,\n          icon,\n          location_editable: true,\n          radius_editable: true,\n        },\n      ];\n    }\n  );\n\n  private _locationChanged(ev: CustomEvent) {\n    [this._latitude, this._longitude] = ev.detail.location;\n  }\n\n  private _radiusChanged(ev: CustomEvent) {\n    this._radius = ev.detail.radius;\n  }\n\n  private _passiveChanged(ev) {\n    this._passive = ev.target.checked;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const configValue = (ev.target as any).configValue;\n\n    this._error = undefined;\n    this[`_${configValue}`] = ev.detail.value;\n  }\n\n  private async _updateEntry() {\n    this._submitting = true;\n    try {\n      const values: ZoneMutableParams = {\n        name: this._name.trim(),\n        latitude: this._latitude,\n        longitude: this._longitude,\n        passive: this._passive,\n        radius: this._radius,\n      };\n      if (this._icon) {\n        values.icon = this._icon.trim();\n      }\n      if (this._params!.entry) {\n        await this._params!.updateEntry!(values);\n      } else {\n        await this._params!.createEntry(values);\n      }\n      this._params = undefined;\n    } catch (err: any) {\n      this._error = err ? err.message : \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private async _deleteEntry() {\n    this._submitting = true;\n    try {\n      if (await this._params!.removeEntry!()) {\n        this._params = undefined;\n      }\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .location {\n          display: flex;\n        }\n        .location > * {\n          flex-grow: 1;\n          min-width: 0;\n        }\n        .location > *:first-child {\n          margin-right: 4px;\n        }\n        .location > *:last-child {\n          margin-left: 4px;\n        }\n        ha-locations-editor {\n          margin-top: 16px;\n        }\n        a {\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-zone-detail\": DialogZoneDetail;\n  }\n}\n\ncustomElements.define(\"dialog-zone-detail\", DialogZoneDetail);\n"],"names":[],"sourceRoot":""}