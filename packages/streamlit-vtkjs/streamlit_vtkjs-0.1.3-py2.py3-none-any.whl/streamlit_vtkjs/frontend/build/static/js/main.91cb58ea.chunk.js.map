{"version":3,"sources":["VTKStreamlit.tsx","index.tsx"],"names":["VTKStreamlit","viewerRef","useRef","clearRef","renderData","useStreamlit","React","useState","viewerState","setViewerState","handleScreenshot","current","then","notification","success","message","placement","undefined","file","setFile","useEffect","args","currFile","a","b","byteLength","every","val","i","loadFile","dispatch","type","skipRender","config","renderer","camera","Blob","toolbar","useMemo","sider","cssStyle","height","includes","Streamlit","setFrameHeight","parseInt","replace","border","borderRadius","setComponentValue","style","width","display","flexDirection","Content","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SA2HeA,G,OAzG+B,WAAO,IAAD,IAC5CC,EAAYC,iBAAY,MACxBC,EAAWD,kBAAgB,GAE3BE,EAAaC,yBAEnB,EAAsCC,IAAMC,SAAc,IAA1D,mBAAOC,EAAP,KAAoBC,EAApB,KAEMC,EAAmB,WAClBT,EAAUU,SACfV,EAAUU,QAAQD,iBAAiB,kBAChCE,MAAK,WACJC,IAAaC,QAAQ,CACnBC,QAAQ,sBACRC,UAAW,iBAKnB,EAAwBV,IAAMC,cAAiCU,GAA/D,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACJhB,QAAkDa,WAA7Bb,EAAWiB,KAAX,QACvBlB,EAASQ,QAAUP,EAAWiB,KAAX,SAEpB,CAACjB,IAEJgB,qBAAU,WACJhB,GAAcA,EAAWiB,KAAX,MAChBF,GAAQ,SAAAG,GACN,OAAKA,IAnC0DC,EAoC9BnB,EAAWiB,KAAX,KApCiCG,EAoCRF,EAnC5DC,EAAEE,aAAeD,EAAEC,YAChBF,EAAEG,OAAM,SAACC,EAAKC,GAAN,OAAYD,IAAQH,EAAEI,OAmChBN,EAFOlB,EAAWiB,KAAX,KACtB,IApC+DE,EAAGC,OAwCrE,CAACpB,IAEJgB,qBAAU,WACR,GAAKF,GACDjB,EAAUU,SAAWV,EAAUU,QAAQkB,SAAU,CAC/C1B,EAASQ,SAASV,EAAUU,QAAQmB,SAAS,CAAEC,KAAM,aAAcC,YAAY,IAGnF,IAAMC,EAAgD,qBAAhCzB,EAAY0B,SAASC,OAAyB3B,OAAcS,EAClFhB,EAAUU,QAAQkB,SAAS,IAAIO,KAAK,CAAClB,IAAQ,QAASe,MAEvD,CAACf,IAEJ,IAAMmB,EAAUC,mBAAQ,WACtB,OAAIlC,GAAoD,qBAA/BA,EAAWiB,KAAX,SAChBjB,EAAWiB,KAAX,UAKR,CAACjB,IAEEmC,EAAQD,mBAAQ,WACpB,OAAIlC,GAAkD,qBAA7BA,EAAWiB,KAAX,OAChBjB,EAAWiB,KAAX,QAKR,CAACjB,IAEEoC,EAAWF,mBAAQ,WACvB,OAAIlC,GAAkD,qBAA7BA,EAAWiB,KAAX,OACnBjB,EAAWiB,KAAX,MAAyBoB,QAAUrC,EAAWiB,KAAX,MAAyBoB,OAAOC,SAAS,OAC9EC,YAAUC,eAAeC,SAASzC,EAAWiB,KAAX,MAAyBoB,OAAOK,QAAQ,KAAM,MAE3E1C,EAAWiB,KAAX,OAGA,CAAE0B,OAAQ,oBAAqBC,aAAc,SAErD,CAAC5C,IAMJ,OAJAgB,qBAAU,WACRuB,YAAUM,kBAAkBzC,KAC3B,CAACA,IAEc,MAAdJ,EACK,KAIP,yBAAK8C,MAAK,yBAAIC,MAAO,OAAQV,OAAQ,OAAQM,OAAQ,oBAAqBC,aAAc,OAAUR,GAAxF,IAAkGY,QAAS,UACnH,kBAAC,IAAD,CAAQF,MAAO,CAAEG,cAAe,QAC7Bd,GACC,kBAAC,IAAD,CAAiBT,SAAQ,UAAE7B,EAAUU,eAAZ,aAAE,EAAmBmB,SAAUtB,YAAaA,EAAaE,iBAAkBA,IAEtG,kBAAC,IAAD,KACG2B,GACC,kBAAC,IAAD,CAAoBP,SAAQ,UAAE7B,EAAUU,eAAZ,aAAE,EAAmBmB,SAAUtB,YAAaA,EAAaE,iBAAkBA,IAEzG,kBAAC,IAAO4C,QAAR,CAAgBJ,MAAO,CAAEE,QAAS,OAAQC,cAAe,WACvD,kBAAC,IAAD,CAAW5C,eAAgBA,EAAgB8C,IAAKtD,U,OC5G5DuD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,gBAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.91cb58ea.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useRef } from \"react\"\r\n\r\nimport { Streamlit } from \"streamlit-component-lib\"\r\nimport { useStreamlit } from \"streamlit-component-lib-react-hooks\"\r\n\r\nimport { VTKViewer, VTKViewerDrawer, VTKFloatingToolbar } from \"lavender-vtkjs\"\r\n\r\nimport { Layout, notification } from \"antd\"\r\n\r\nimport './VTKStreamlit.css'\r\n\r\n// compare TypedArrays\r\n// https://stackoverflow.com/questions/21553528/how-to-test-for-equality-in-arraybuffer-dataview-and-typedarray\r\nconst compareTypedArrays: (a: Uint8Array, b: Uint8Array) => boolean = (a, b) => {\r\n  if (a.byteLength !== b.byteLength) return false;\r\n  return a.every((val, i) => val === b[i]);\r\n}\r\n\r\nconst VTKStreamlit: React.FunctionComponent = () => {\r\n  const viewerRef = useRef<any>(null)\r\n  const clearRef = useRef<boolean>(true)\r\n\r\n  const renderData = useStreamlit()\r\n\r\n  const [viewerState, setViewerState] = React.useState<any>({})\r\n\r\n  const handleScreenshot = () => {\r\n    if (!viewerRef.current) return\r\n    viewerRef.current.handleScreenshot('VTKJSStreamlit')\r\n      .then(() => {\r\n        notification.success({\r\n          message: `Copied to Clipboard`,\r\n          placement: 'topRight',\r\n        });\r\n      })\r\n  }\r\n\r\n  const [file, setFile] = React.useState<Uint8Array | undefined>(undefined)\r\n\r\n  useEffect(() => {\r\n    if (renderData && typeof renderData.args[\"clear\"] !== undefined) {\r\n      clearRef.current = renderData.args[\"clear\"]\r\n    }\r\n  }, [renderData])\r\n\r\n  useEffect(() => {\r\n    if (renderData && renderData.args[\"file\"]) {\r\n      setFile(currFile => {\r\n        if (!currFile) return renderData.args[\"file\"]\r\n        const equal = compareTypedArrays(renderData.args[\"file\"], currFile)\r\n        return equal ? currFile : renderData.args[\"file\"]\r\n      })\r\n    }\r\n  }, [renderData])\r\n\r\n  useEffect(() => {\r\n    if (!file) return\r\n    if (viewerRef.current && viewerRef.current.loadFile) {\r\n      if (clearRef.current) viewerRef.current.dispatch({ type: 'remove-all', skipRender: true })\r\n      // this check won't be necessary on next release of lavender-vtkjs\r\n      // instead we'll be able to call viewerRef.current.dispatch({ type: 'reset-camera' })\r\n      const config = typeof viewerState.renderer.camera !== 'undefined' ? viewerState : undefined\r\n      viewerRef.current.loadFile(new Blob([file]), 'vtkjs', config)\r\n    }\r\n  }, [file])\r\n\r\n  const toolbar = useMemo(() => {\r\n    if (renderData && typeof renderData.args[\"toolbar\"] !== 'undefined') {\r\n      return renderData.args[\"toolbar\"]\r\n    }\r\n    else {\r\n      return true\r\n    }\r\n  }, [renderData])\r\n\r\n  const sider = useMemo(() => {\r\n    if (renderData && typeof renderData.args[\"sider\"] !== 'undefined') {\r\n      return renderData.args[\"sider\"]\r\n    }\r\n    else {\r\n      return true\r\n    }\r\n  }, [renderData])\r\n\r\n  const cssStyle = useMemo(() => {\r\n    if (renderData && typeof renderData.args[\"style\"] !== 'undefined') {\r\n      if (renderData.args[\"style\"].height && renderData.args[\"style\"].height.includes('px')) {\r\n        Streamlit.setFrameHeight(parseInt(renderData.args[\"style\"].height.replace('px', '')))\r\n      }\r\n      return renderData.args[\"style\"]\r\n    }\r\n    else {\r\n      return { border: \"1px solid #d0d7de\", borderRadius: \"2px\" }\r\n    }\r\n  }, [renderData])\r\n\r\n  useEffect(() => {\r\n    Streamlit.setComponentValue(viewerState)\r\n  }, [viewerState])\r\n\r\n  if (renderData == null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100%', border: \"1px solid #d0d7de\", borderRadius: \"2px\", ...cssStyle, display: 'flex' }}>\r\n      <Layout style={{ flexDirection: 'row' }}>\r\n        {sider &&\r\n          <VTKViewerDrawer dispatch={viewerRef.current?.dispatch} viewerState={viewerState} handleScreenshot={handleScreenshot} />\r\n        }\r\n        <Layout>\r\n          {toolbar &&\r\n            <VTKFloatingToolbar dispatch={viewerRef.current?.dispatch} viewerState={viewerState} handleScreenshot={handleScreenshot} />\r\n          }\r\n          <Layout.Content style={{ display: 'flex', flexDirection: 'column' }}>\r\n            <VTKViewer setViewerState={setViewerState} ref={viewerRef} />\r\n          </Layout.Content>\r\n        </Layout>\r\n      </Layout>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default VTKStreamlit","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { ErrorBoundary } from \"streamlit-component-lib-react-hooks\"\r\nimport VTKStreamlit from \"./VTKStreamlit\"\r\n\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary>\r\n      <VTKStreamlit />\r\n    </ErrorBoundary>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}