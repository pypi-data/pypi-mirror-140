"""Autogenerated API schema"""
from argus_api import session


abort_job = {'tags': ['sampledb/v2'], 'summary': 'Request a job to be aborted (DEV)', 'description': '', 'operationId': 'abortJob', 'produces': ['application/json'], 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job to request to abort', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'sampleInfo': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was enqueued '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was started '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was ended '}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job ', 'enum': ['enqueued', 'abortRequested', 'aborted', 'executing', 'done', 'timeout']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The job could not be found'}, '412': {'description': 'Validation error'}}}
add_job_task = {'tags': ['sampledb/v2'], 'summary': 'Register an analyzer task for a job (DEV)', 'description': '', 'operationId': 'addJobTask', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Job task request', 'required': False, 'schema': {'type': 'object', 'required': ['analyzerName'], 'properties': {'analyzerName': {'type': 'str', 'position': 0, 'description': 'The name of the analyzer  => [\\s\\w\\{\\}\\$\\-\\(\\)\\.\\[\\]"\\\'_/\\\\,\\*\\+\\#:@!?;=]*'}}}}], 'responses': {'201': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'analyzerName': {'type': 'str', 'position': 0, 'description': 'The name of the analyzer '}, 'state': {'type': 'str', 'position': 0, 'description': 'The state the task is currently in ', 'enum': ['enqueued', 'executing', 'success', 'failed']}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the task was enqueued '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the task was started '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the task was completed '}, 'message': {'type': 'str', 'position': 0, 'description': 'A message related to the execution of this task '}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The job could not be found'}, '412': {'description': 'Validation error'}}}
get_job = {'tags': ['sampledb/v2'], 'summary': 'Fetch an analysis job (DEV)', 'description': '', 'operationId': 'getJob', 'produces': ['application/json'], 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job to fetch', 'required': True, 'type': 'str'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'sampleInfo': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was enqueued '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was started '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was ended '}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job ', 'enum': ['enqueued', 'abortRequested', 'aborted', 'executing', 'done', 'timeout']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The job could not be found'}, '412': {'description': 'Validation error'}}}
list_job_tasks = {'tags': ['sampledb/v2'], 'summary': 'List analysis job tasks (DEV)', 'description': '', 'operationId': 'listJobTasks', 'produces': ['application/json'], 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job to list tasks for', 'required': True, 'type': 'str'}, {'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': 'The fields to sort the results by', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'analyzerName'}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'analyzerName': {'type': 'str', 'position': 0, 'description': 'The name of the analyzer '}, 'state': {'type': 'str', 'position': 0, 'description': 'The state the task is currently in ', 'enum': ['enqueued', 'executing', 'success', 'failed']}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the task was enqueued '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the task was started '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp when the task was completed '}, 'message': {'type': 'str', 'position': 0, 'description': 'A message related to the execution of this task '}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The job could not be found'}, '412': {'description': 'Validation error'}}}
list_jobs = {'tags': ['sampledb/v2'], 'summary': 'List analysis jobs (DEV)', 'description': '', 'operationId': 'listJobs', 'produces': ['application/json'], 'parameters': [{'name': 'limit', 'in': 'query', 'description': 'Maximum number of returned results', 'required': False, 'type': 'int', 'default': 25, 'minimum': 0}, {'name': 'offset', 'in': 'query', 'description': 'Skip a number of results', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'sortBy', 'in': 'query', 'description': 'The fields to sort the results by', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': '-enqueuedTimestamp'}, 'collectionFormat': 'multi'}, {'name': 'state', 'in': 'query', 'description': 'Only return jobs in either of the defined states', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'enqueued, executing', 'enum': ['enqueued', 'abortRequested', 'aborted', 'executing', 'done', 'timeout']}, 'collectionFormat': 'multi'}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'list', 'description': 'Contains an array of results', 'items': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'sampleInfo': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was enqueued '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was started '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was ended '}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job ', 'enum': ['enqueued', 'abortRequested', 'aborted', 'executing', 'done', 'timeout']}}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The job could not be found'}, '412': {'description': 'Validation error'}}}
update_job_state = {'tags': ['sampledb/v2'], 'summary': 'Update the state of an analysis job (DEV)', 'description': '', 'operationId': 'updateJobState', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'jobID', 'in': 'path', 'description': 'The ID of the job to update', 'required': True, 'type': 'str'}, {'in': 'body', 'name': 'body', 'description': 'Update job request', 'required': False, 'schema': {'type': 'object', 'required': ['state'], 'properties': {'state': {'type': 'str', 'position': 0, 'description': 'The new state of the job ', 'enum': ['executing', 'done']}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'ID of the response object. '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'sampleInfo': {'type': 'dict', 'properties': {'id': {'type': 'str', 'position': 0, 'description': 'The ID of the sample '}, 'size': {'type': 'int', 'position': 0, 'description': 'The size of the sample in bytes '}}}, 'enqueuedTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was enqueued '}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was started '}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'The timestamp for when the job was ended '}, 'state': {'type': 'str', 'position': 0, 'description': 'The current state of the job ', 'enum': ['enqueued', 'abortRequested', 'aborted', 'executing', 'done', 'timeout']}}}}}}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'The job could not be found'}, '412': {'description': 'Validation error'}}}