{
  "swagger": "2.0",
  "info": {},
  "basePath": "/",
  "tags": [
    {
      "name": "eventfilters/v1"
    },
    {
      "name": "/eventfilters/v1"
    },
    {
      "name": "eventfilters/v2"
    }
  ],
  "paths": {
    "/eventfilters/v1/filter/errorstats": {
      "get": {
        "tags": [
          "eventfilters/v1"
        ],
        "summary": "Fetch filter error statistics (INTERNAL)",
        "description": "",
        "operationId": "errorStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "includeDetails",
            "in": "query",
            "description": "If true, include detailed error statistics per processing node",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-EventFilterErrorStats-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v1/filter/hitstats": {
      "get": {
        "tags": [
          "eventfilters/v1"
        ],
        "summary": "Fetch filter error statistics (INTERNAL)",
        "description": "",
        "operationId": "hitStats",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "period",
            "in": "query",
            "description": "Time period to fetch hit stats for (milliseconds)",
            "required": false,
            "type": "integer",
            "default": 3600000,
            "format": "int64"
          },
          {
            "name": "includeDetails",
            "in": "query",
            "description": "If true, include details about hits per processing node",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-EventFilterHitStats-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v1/filter/{id}": {
      "get": {
        "tags": [
          "/eventfilters/v1"
        ],
        "summary": "Fetch filter  (INTERNAL)",
        "description": "",
        "operationId": "get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-EventFilter-single"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v1/filter": {
      "get": {
        "tags": [
          "/eventfilters/v1"
        ],
        "summary": "List filters (INTERNAL)",
        "description": "",
        "operationId": "list",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Limit result to filters matching this searchstring",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerID",
            "in": "query",
            "description": "Limit result to filters for this customerID",
            "required": false,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Limit result to filters of this type",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-EventFilter-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v1/filter/search": {
      "post": {
        "tags": [
          "/eventfilters/v1"
        ],
        "summary": "Search filters (INTERNAL)",
        "description": "",
        "operationId": "search",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search criteria",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventFilterSearchCriteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-EventFilter-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v1/filter/{id}/revisions": {
      "get": {
        "tags": [
          "/eventfilters/v1"
        ],
        "summary": "Fetch filter revisions by filter ID (INTERNAL)",
        "description": "",
        "operationId": "revisions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Fetch revisions for filter with this ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-EventFilter-list"
            }
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v1/filter/{id}/logging": {
      "put": {
        "tags": [
          "eventfilters/v1"
        ],
        "summary": "Set log level for specified filter (INTERNAL)",
        "description": "",
        "operationId": "setLogLevel",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of event filter",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "EventFilter set log level request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EventFilterSetLogLevelRequest"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "408": {
            "description": "Operation timeout"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/eventfilters/v1/filter/{id}/move": {
      "put": {
        "tags": [
          "eventfilters/v1"
        ],
        "summary": "Move an eventfilter to another customer (INTERNAL)",
        "description": "",
        "operationId": "moveFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of event filter",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Move request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MoveEventFilterRequest"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation error"
          }
        }
      }
    },
    "/eventfilters/v2/analysis": {
      "get": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Simple search for analysis filters (DEV)",
        "description": "",
        "operationId": "listAnalysisFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keywords",
            "in": "query",
            "description": "Search by keywords",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywordMatch",
            "in": "query",
            "description": "Set match strategy for keyword search",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "keywordField",
            "in": "query",
            "description": "Set field strategy for keyword search",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "all",
              "enum": [
                "name",
                "description",
                "label",
                "preStatement1",
                "preStatement2",
                "statementCode",
                "triggerCode",
                "actionName",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "timestampMatch",
            "in": "query",
            "description": "Set match strategy for timestamp filtering",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "timestampField",
            "in": "query",
            "description": "Set field strategy for timestamp filtering",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "lastUpdated",
              "enum": [
                "validFrom",
                "validTo",
                "created",
                "lastUpdated",
                "deleted",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Lower bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Upper bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "includeCode",
            "in": "query",
            "description": "Whether to include code in results",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Search performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "post": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Adds an analysis filter (DEV)",
        "description": "",
        "operationId": "addAnalysisFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add analysis filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnalysisFilterAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AnalysisFilter-single"
            }
          },
          "201": {
            "description": "Filter created"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v2/match": {
      "get": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Simple search for match filters (DEV)",
        "description": "",
        "operationId": "listMatchFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keywords",
            "in": "query",
            "description": "Search by keywords",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywordMatch",
            "in": "query",
            "description": "Set match strategy for keyword search",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "keywordField",
            "in": "query",
            "description": "Set field strategy for keyword search",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "all",
              "enum": [
                "description",
                "name",
                "matchCode",
                "transformCode",
                "protocol",
                "domainPattern",
                "uriPattern",
                "newAggregationKey",
                "label",
                "attackIdentifier",
                "propertyKey",
                "propertyValue",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "timestampMatch",
            "in": "query",
            "description": "Set match strategy for timestamp filtering",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "timestampField",
            "in": "query",
            "description": "Set field strategy for timestamp filtering",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "lastUpdated",
              "enum": [
                "validFrom",
                "validTo",
                "created",
                "lastUpdated",
                "deleted"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Lower bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Upper bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "includeCode",
            "in": "query",
            "description": "Whether to include code in results",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Search performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "post": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Adds an match filter (DEV)",
        "description": "",
        "operationId": "addMatchFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add match filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MatchFilterAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-MatchFilter-single"
            }
          },
          "201": {
            "description": "Filter created"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v2/annotation": {
      "get": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Simple search for annotation filters (DEV)",
        "description": "",
        "operationId": "listAnnotationFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "keywords",
            "in": "query",
            "description": "Search by keywords",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "keywordMatch",
            "in": "query",
            "description": "Set match strategy for keyword search",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "keywordField",
            "in": "query",
            "description": "Set field strategy for keyword search",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "all",
              "enum": [
                "name",
                "description",
                "label",
                "triggerCode",
                "statementCode",
                "all"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "timestampMatch",
            "in": "query",
            "description": "Set match strategy for timestamp filtering",
            "required": false,
            "type": "string",
            "default": "all",
            "enum": [
              "any",
              "all"
            ]
          },
          {
            "name": "timestampField",
            "in": "query",
            "description": "Set field strategy for timestamp filtering",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "default": "lastUpdated",
              "enum": [
                "validFrom",
                "validTo",
                "created",
                "lastUpdated",
                "deleted"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "start",
            "in": "query",
            "description": "Lower bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "end",
            "in": "query",
            "description": "Upper bound timestamp filter value",
            "required": false,
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "format": "int64"
          },
          {
            "name": "includeCode",
            "in": "query",
            "description": "Whether to include code in results",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Field to sort by",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit result",
            "required": false,
            "type": "integer",
            "default": 25,
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset result",
            "required": false,
            "type": "integer",
            "default": 0,
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Search performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "post": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Adds an annotation filter (DEV)",
        "description": "",
        "operationId": "addAnnotationFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Add annotation filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationFilterAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ResultStash-AnnotationFilter-single"
            }
          },
          "201": {
            "description": "Filter created"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v2/analysis/{id}": {
      "get": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Gets an analysis filter (DEV)",
        "description": "",
        "operationId": "getAnalysisFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "name": "includeCode",
            "in": "query",
            "description": "Whether to include code in AnnotationFilter",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis filter returned"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      },
      "put": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Updates an analysis filter (DEV)",
        "description": "",
        "operationId": "updateAnalysisFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update analysis filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnalysisFilterUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis filter updated"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Deletes an analysis filter (DEV)",
        "description": "",
        "operationId": "deleteAnalysisFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter to delete",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis filter deleted"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      }
    },
    "/eventfilters/v2/annotation/{id}": {
      "get": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Gets an annotation filter (DEV)",
        "description": "",
        "operationId": "getAnnotationFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "name": "includeCode",
            "in": "query",
            "description": "Whether to include code in AnnotationFilter",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation filter returned"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      },
      "put": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Updates an annotation filter (DEV)",
        "description": "",
        "operationId": "updateAnnotationFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update annotation filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationFilterUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation filter updated"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Deletes an annotation filter (DEV)",
        "description": "",
        "operationId": "deleteAnnotationFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter to delete",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Annotation filter deleted"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      }
    },
    "/eventfilters/v2/match/{id}": {
      "get": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Gets an match filter (DEV)",
        "description": "",
        "operationId": "getMatchFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "name": "includeCode",
            "in": "query",
            "description": "Whether to include code in MatchFilter",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Match filter returned"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      },
      "put": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Updates a match filter (DEV)",
        "description": "",
        "operationId": "updateMatchFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Update match filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MatchFilterUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Match filter updated"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      },
      "delete": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Deletes a match filter (DEV)",
        "description": "",
        "operationId": "deleteMatchFilter",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of filter to delete",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Match filter deleted"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Object not found"
          }
        }
      }
    },
    "/eventfilters/v2/annotation/search": {
      "post": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Searches for annotation filters (DEV)",
        "description": "",
        "operationId": "searchAnnotationFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search annotation filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnnotationFilterSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v2/analysis/search": {
      "post": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Searches for analysis filters (DEV)",
        "description": "",
        "operationId": "searchAnalysisFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search analysis filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AnalysisFilterSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    },
    "/eventfilters/v2/match/search": {
      "post": {
        "tags": [
          "eventfilters/v2"
        ],
        "summary": "Searches for match filters (DEV)",
        "description": "",
        "operationId": "searchMatchFilter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Search match filter request",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MatchFilterSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search performed"
          },
          "401": {
            "description": "Authentication failed"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          }
        }
      }
    }
  },
  "definitions": {
    "MoveEventFilterRequest": {
      "type": "object",
      "properties": {
        "customer": {
          "type": "string",
          "position": 0,
          "description": "ID or shortname of customer to move filter to. Required unless global is true. "
        },
        "global": {
          "type": "boolean",
          "position": 0,
          "description": "Set to true to move filter to a global filter. If true, customer cannot be specified. "
        }
      }
    },
    "MatchFilterUpdateRequest": {
      "type": "object",
      "required": [
        "addLabels",
        "comment",
        "destinationIPAddresses",
        "removeLabels",
        "setLabels",
        "sourceIPAddresses",
        "sourceOrDestinationIPAddresses"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the filter. Filters with lower index will be ran first. ",
          "minimum": 0,
          "maximum": 10
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "matchCode": {
          "type": "string",
          "position": 0,
          "description": "Custom esper code for when the filter should match an event. Will be validated in the backend "
        },
        "minSeverity": {
          "type": "string",
          "position": 0,
          "description": "Only match events with severity at least this value ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "maxSeverity": {
          "type": "string",
          "position": 0,
          "description": "Only match events with severity this value or lower ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "includeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Only match events that have these flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "excludeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Only match events that does not have any of these flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "protocol": {
          "type": "string",
          "position": 0,
          "description": "Only match events with the provided protocol "
        },
        "domainPattern": {
          "type": "string",
          "position": 0,
          "description": "Only match events where the domain matches this regex "
        },
        "uriPattern": {
          "type": "string",
          "position": 0,
          "description": "Only match events where the uri matches this regex "
        },
        "sourceIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the source ip address is in this set. This corresponds to intruder in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sourcePorts": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the source port is in this set. This corresponds to intruder in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "destinationIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the destination ip address is in this set. This corresponds to victim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "destinationPorts": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the destination port is in this set. This corresponds to victim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sourceOrDestinationIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sourceOrDestinationPorts": {
          "type": "array",
          "position": 0,
          "description": "Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "location": {
          "type": "array",
          "position": 0,
          "description": "Only match events from the these locations, given by shortname or id ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "attackIdentifier": {
          "type": "array",
          "position": 0,
          "description": "Only match events with these attack identifiers, given by shortname or id ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "alarmID": {
          "type": "array",
          "position": 0,
          "description": "Only match events connected to these alarms, given by id ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "attackCategory": {
          "type": "array",
          "position": 0,
          "description": "Only match events belonging to these attack categories, given by shortname or id ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Only match events from these sensors, given by id ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "properties": {
          "type": "object",
          "position": 0,
          "description": "Only match events which have these properties ",
          "additionalProperties": {
            "type": "string"
          }
        },
        "transformCode": {
          "type": "string",
          "position": 0,
          "description": "Custom esper code for how the event will be transformed. Will be validated in the backend "
        },
        "newAggregationKey": {
          "type": "string",
          "position": 0,
          "description": "If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true "
        },
        "newSeverity": {
          "type": "string",
          "position": 0,
          "description": "The new severity of events that are matched by the filter ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "associatedCaseID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Adds an associated case ID "
        },
        "newSourceAggregationBits": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder "
        },
        "newDestinationAggregationBits": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim "
        },
        "drop": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this event will be dropped "
        },
        "noTransform": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this event will not be transformed "
        },
        "continueAfterTransform": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will continue to look for new events after transform "
        },
        "stopAfterNoMatch": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will stop looking for new matches after not matching "
        },
        "changeAggregationKey": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will change the aggregation key to the value of newAggregationKey "
        },
        "invertIp": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will switch the source and destination ip in the event "
        },
        "removeLabels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels  ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "addLabels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels  ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "setLabels": {
          "type": "array",
          "position": 0,
          "description": "Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was created "
        }
      }
    },
    "AnnotationFilterUpdateRequest": {
      "type": "object",
      "required": [
        "addLabels",
        "comment",
        "removeLabels",
        "setLabels"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the filter. Filters with lower index will be ran first. ",
          "minimum": 0,
          "maximum": 10
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "triggerCode": {
          "type": "string",
          "position": 0,
          "description": "The code which triggers the filter "
        },
        "statementCode": {
          "type": "string",
          "position": 0,
          "description": "The code which will run then the filter is triggered "
        },
        "stage": {
          "type": "string",
          "position": 0,
          "description": "The analysis stage the filter is run in ",
          "enum": [
            "preAnalysis",
            "postAnalysis",
            "all"
          ]
        },
        "removeLabels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels  ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "addLabels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels  ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "setLabels": {
          "type": "array",
          "position": 0,
          "description": "Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was created "
        }
      }
    },
    "ResultStash": {
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "object",
          "description": "Returned results (might be an array or a single object)"
        }
      }
    },
    "AnalysisFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object. "
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The execution index "
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The revision number for this filter instance "
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "customer": {
          "position": 0,
          "description": "The customer the filter belongs to ",
          "$ref": "#/definitions/SPI CustomerInfo"
        },
        "preStatementCode1": {
          "type": "string",
          "position": 0,
          "description": "This code does a pre selection of events to run the statementCode or preStatementCode2 code against "
        },
        "preStatementCode2": {
          "type": "string",
          "position": 0,
          "description": "This code does a selection on the results from the preStatement1 to do an additional filtering before sending the events to the statementCode "
        },
        "statementCode": {
          "type": "string",
          "position": 0,
          "description": "The code which will select which events are analysed. If preStatementCode1, or preStatementCode1 and preStatementCode2 is set, this will be run on the results from them "
        },
        "triggerCode": {
          "type": "string",
          "position": 0,
          "description": "The code which in run on the results from the statementCode "
        },
        "actionName": {
          "type": "string",
          "position": 0,
          "description": "The name of the action "
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "The set of labels that can be used to categorize the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "The flags that are set on the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "global",
              "defaultAggregate",
              "skipNewEvent"
            ]
          }
        },
        "createdByUser": {
          "position": 0,
          "description": "The user that created the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was created "
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "The user that last updated the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was last updated "
        },
        "deletedByUser": {
          "position": 0,
          "description": "The user that deleted the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "deletedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was deleted "
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was added "
        }
      }
    },
    "SPI DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "ID of the response object. "
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the domain. "
        }
      }
    },
    "ResultStash-AnalysisFilter-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/AnalysisFilter"
        }
      }
    },
    "EventFilterErrorStats": {
      "type": "object",
      "properties": {
        "filterID": {
          "type": "integer",
          "format": "int64"
        },
        "instancesWithErrors": {
          "type": "integer",
          "format": "int32"
        },
        "initErrorDisabled": {
          "type": "integer",
          "format": "int32"
        },
        "errorDisabled": {
          "type": "integer",
          "format": "int32"
        },
        "adminDisabled": {
          "type": "integer",
          "format": "int32"
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventFilterErrorComponentStats"
          }
        }
      }
    },
    "AnnotationFilterAddRequest": {
      "type": "object",
      "required": [
        "description",
        "labels",
        "name",
        "statementCode",
        "triggerCode"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the filter. Filters with lower index will be ran first. (default 5)",
          "minimum": 0,
          "maximum": 10,
          "default": 5
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "The shortname or ID of the customer the filter belongs to. If customer is not set, this will create a global filter "
        },
        "triggerCode": {
          "type": "string",
          "position": 0,
          "description": "The code which triggers the filter "
        },
        "statementCode": {
          "type": "string",
          "position": 0,
          "description": "The code which will run then the filter is triggered "
        },
        "stage": {
          "type": "string",
          "position": 0,
          "description": "The analysis stage the filter is run in (default all)",
          "enum": [
            "preAnalysis",
            "postAnalysis",
            "all"
          ]
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels which can be used to categorize the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "type": "boolean",
          "position": 0,
          "description": "Whether or not the filter is enabled (default false)",
          "default": false
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was created "
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        }
      }
    },
    "UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        },
        "userName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customerID": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SPI CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object. "
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "Name of the customer. "
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "Shortname of the customer. "
        },
        "domain": {
          "position": 0,
          "description": "Domain that this customer belongs to. ",
          "$ref": "#/definitions/SPI DomainInfo"
        }
      }
    },
    "EventFilterHitComponentStats": {
      "type": "object",
      "properties": {
        "componentIdentity": {
          "$ref": "#/definitions/ComponentIdentity"
        },
        "hitCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "AnnotationFilter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object. "
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The execution index "
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The revision number for this filter instance "
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "customer": {
          "position": 0,
          "description": "The customer the filter belongs to ",
          "$ref": "#/definitions/SPI CustomerInfo"
        },
        "triggerCode": {
          "type": "string",
          "position": 0,
          "description": "The code which triggers the filter "
        },
        "statementCode": {
          "type": "string",
          "position": 0,
          "description": "The code which will run then the filter is triggered "
        },
        "stage": {
          "type": "string",
          "position": 0,
          "description": "The analysis stage the filter is run in ",
          "enum": [
            "preAnalysis",
            "postAnalysis",
            "all"
          ]
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "The set of labels that can be used to categorize the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "The flags that are set on the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "global"
            ]
          }
        },
        "createdByUser": {
          "position": 0,
          "description": "The user that created the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was created "
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "The user that last updated the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was last updated "
        },
        "deletedByUser": {
          "position": 0,
          "description": "The user that deleted the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "deletedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was deleted "
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was added "
        }
      }
    },
    "SPI UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object. "
        },
        "shortName": {
          "type": "string",
          "position": 0,
          "description": "The subject's short name "
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The subject's name "
        },
        "domain": {
          "position": 0,
          "description": "The subject's domain ",
          "$ref": "#/definitions/SPI DomainInfo"
        },
        "customer": {
          "position": 0,
          "description": "The customer the subject belongs to ",
          "$ref": "#/definitions/SPI CustomerInfo"
        }
      }
    },
    "EventFilterHitStats": {
      "type": "object",
      "properties": {
        "filterID": {
          "type": "integer",
          "format": "int64"
        },
        "hits": {
          "type": "integer",
          "format": "int32"
        },
        "components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventFilterHitComponentStats"
          }
        }
      }
    },
    "AnalysisFilterAddRequest": {
      "type": "object",
      "required": [
        "comment",
        "description",
        "labels",
        "name",
        "statementCode",
        "triggerCode"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the filter. Filters with lower index will be ran first. (default 5)",
          "minimum": 0,
          "maximum": 10,
          "default": 5
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "The shortname or ID of the customer the filter belongs to. If customer is not set, this will create a global filter "
        },
        "preStatementCode1": {
          "type": "string",
          "position": 0,
          "description": "Optional esper code which does a pre selection before the statement code is run "
        },
        "preStatementCode2": {
          "type": "string",
          "position": 0,
          "description": "Optional esper code to do further pre selection on the result of preStatementCode1, and applied before the statementCode "
        },
        "statementCode": {
          "type": "string",
          "position": 0,
          "description": "Esper code to select which events the filter will be applied to "
        },
        "triggerCode": {
          "type": "string",
          "position": 0,
          "description": "Groovy code which is run on the selected events "
        },
        "actionName": {
          "type": "string",
          "position": 0,
          "description": "The name of the signature which should be attached to the created event "
        },
        "defaultAggregate": {
          "type": "boolean",
          "position": 0,
          "description": "If true this filter will populate the created event with information from the selected event (default false)",
          "default": false
        },
        "skipNewEvent": {
          "type": "boolean",
          "position": 0,
          "description": "If true the filter will not submit triggered events for central storage (default false)",
          "default": false
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels which can be used to categorize the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "type": "boolean",
          "position": 0,
          "description": "Whether or not the filter is enabled (default false)",
          "default": false
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was created "
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        }
      }
    },
    "ResultStash-MatchFilter-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/MatchFilter"
        }
      }
    },
    "ResultStash-AnnotationFilter-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/AnnotationFilter"
        }
      }
    },
    "MatchFilter": {
      "type": "object",
      "required": [
        "destinationIPAddresses",
        "sourceIPAddresses",
        "sourceOrDestinationIPAddresses"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "ID of the response object. "
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The execution index "
        },
        "revision": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The revision number of this filter instance "
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "customer": {
          "position": 0,
          "description": "The customer the filter belongs to ",
          "$ref": "#/definitions/SPI CustomerInfo"
        },
        "filterType": {
          "type": "string",
          "position": 0,
          "description": "The type of the match filter ",
          "enum": [
            "AggregatedAttackEventMatchFilter",
            "AggregatedIPAttackEventMatchFilter",
            "IPAttackEventMatchFilter",
            "NIDSEventMatchFilter",
            "AttackEventMatchFilter"
          ]
        },
        "matchCode": {
          "type": "string",
          "position": 0,
          "description": "The custom esper code for when the filter should match an event. Will only be included if requested "
        },
        "minSeverity": {
          "type": "string",
          "position": 0,
          "description": "Will only match events with severity at least this value ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "maxSeverity": {
          "type": "string",
          "position": 0,
          "description": "Will only match events with severity this value or lower ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "includeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Will only match events that have these flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "excludeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Will only match events that does not have any of these flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "protocol": {
          "type": "string",
          "position": 0,
          "description": "Will only match events with the provided protocol "
        },
        "domainPattern": {
          "type": "string",
          "position": 0,
          "description": "Will only match events where the domain matches this regex "
        },
        "uriPattern": {
          "type": "string",
          "position": 0,
          "description": "Will only match events where the uri matches this regex "
        },
        "sourceIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Will only match events where the source ip address is in this set. This corresponds to intruder in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sourcePorts": {
          "type": "array",
          "position": 0,
          "description": "Will only match events where the source port is in this set. This corresponds to intruder in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "destinationIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Will only match events where the destination ip address is in this set. This corresponds to victim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "destinationPorts": {
          "type": "array",
          "position": 0,
          "description": "Will only match events where the destination port is in this set. This corresponds to victim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sourceOrDestinationIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Will only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sourceOrDestinationPorts": {
          "type": "array",
          "position": 0,
          "description": "Will only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "locationID": {
          "type": "array",
          "position": 0,
          "description": "Will only match events from the these locations ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "attackIdentifier": {
          "type": "array",
          "position": 0,
          "description": "Will only match events with these attack identifiers ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "alarmID": {
          "type": "array",
          "position": 0,
          "description": "Will only match events connected to these alarms ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "attackCategoryID": {
          "type": "array",
          "position": 0,
          "description": "Will only match events belonging to these attack categories ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Will only match events from these sensors ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "properties": {
          "type": "object",
          "position": 0,
          "description": "Will only match events which have these properties ",
          "additionalProperties": {
            "type": "string"
          }
        },
        "transformCode": {
          "type": "string",
          "position": 0,
          "description": "The custom esper code for how the event will be transformed. Will only be included if requested "
        },
        "newAggregationKey": {
          "type": "string",
          "position": 0,
          "description": "If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true "
        },
        "newSeverity": {
          "type": "string",
          "position": 0,
          "description": "The new severity of events that are matched by the filter ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "associatedCaseID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "The case this filter is associated with "
        },
        "newSourceAggregationBits": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder "
        },
        "newDestinationAggregationBits": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim "
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "The set of labels that can be used to categorize the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "flags": {
          "type": "array",
          "position": 0,
          "description": "The flags that are set on the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "drop",
              "noTransform",
              "continueAfterTransform",
              "stopAfterNoMatch",
              "changeAggregationKey",
              "invertIp"
            ]
          }
        },
        "createdByUser": {
          "position": 0,
          "description": "The user that created the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was created "
        },
        "lastUpdatedByUser": {
          "position": 0,
          "description": "The user that last updated the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was last updated "
        },
        "deletedByUser": {
          "position": 0,
          "description": "The user that deleted the filter ",
          "$ref": "#/definitions/SPI UserInfo"
        },
        "deletedTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter was deleted "
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was modified "
        }
      }
    },
    "MatchFilterAddRequest": {
      "type": "object",
      "required": [
        "description",
        "destinationIPAddresses",
        "labels",
        "name",
        "sourceIPAddresses",
        "sourceOrDestinationIPAddresses"
      ],
      "properties": {
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the filter. Filters with lower index will be ran first. (default 5)",
          "minimum": 0,
          "maximum": 10,
          "default": 5
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "customer": {
          "type": "string",
          "position": 0,
          "description": "The shortname or ID of the customer the filter belongs to. If customer is not set, this will create a global filter "
        },
        "matchCode": {
          "type": "string",
          "position": 0,
          "description": "Custom esper code for when the filter should match an event. Will be validated in the backend "
        },
        "minSeverity": {
          "type": "string",
          "position": 0,
          "description": "Only match events with severity at least this value ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "maxSeverity": {
          "type": "string",
          "position": 0,
          "description": "Only match events with severity this value or lower ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "includeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Only match events that have these flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "excludeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Only match events that does not have any of these flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "protocol": {
          "type": "string",
          "position": 0,
          "description": "Only match events with the provided protocol "
        },
        "domainPattern": {
          "type": "string",
          "position": 0,
          "description": "Only match events where the domain matches this regex "
        },
        "uriPattern": {
          "type": "string",
          "position": 0,
          "description": "Only match events where the uri matches this regex "
        },
        "sourceIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the source ip address is in this set. This corresponds to intruder in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sourcePorts": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the source port is in this set. This corresponds to intruder in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "destinationIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the destination ip address is in this set. This corresponds to victim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "destinationPorts": {
          "type": "array",
          "position": 0,
          "description": "Only match events where the destination port is in this set. This corresponds to victim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "sourceOrDestinationIPAddresses": {
          "type": "array",
          "position": 0,
          "description": "Only match events where an ip address is in this set. This corresponds to intruderOrVictim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sourceOrDestinationPorts": {
          "type": "array",
          "position": 0,
          "description": "Only match events where a port is in this set. This corresponds to intruderOrVictim in the old solution ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "location": {
          "type": "array",
          "position": 0,
          "description": "Only match events from the these locations, given by shortname or id ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "attackIdentifier": {
          "type": "array",
          "position": 0,
          "description": "Only match events with these attack identifiers, given by shortname or id ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "alarmID": {
          "type": "array",
          "position": 0,
          "description": "Only match events connected to these alarms, given by id ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "attackCategory": {
          "type": "array",
          "position": 0,
          "description": "Only match events belonging to these attack categories, given by shortname or id ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Only match events from these sensors, given by id ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "properties": {
          "type": "object",
          "position": 0,
          "description": "Only match events which have these properties ",
          "additionalProperties": {
            "type": "string"
          }
        },
        "transformCode": {
          "type": "string",
          "position": 0,
          "description": "Custom esper code for how the event will be transformed. Will be validated in the backend "
        },
        "newAggregationKey": {
          "type": "string",
          "position": 0,
          "description": "If set this will set a new aggregation key on the event, given that changeAggregationKey is set to true "
        },
        "newSeverity": {
          "type": "string",
          "position": 0,
          "description": "The new severity of events that are matched by the filter ",
          "enum": [
            "lowStatistics",
            "lowAggregated",
            "low",
            "medium",
            "high",
            "critical"
          ]
        },
        "associatedCaseID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Adds an associated case ID "
        },
        "newSourceAggregationBits": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Changes the aggregation bits of the source ip to this value. Source corresponds to what was earlier called intruder "
        },
        "newDestinationAggregationBits": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Changes the aggregation bits of the destination ip to this value. Destination corresponds to what was earlier called victim "
        },
        "drop": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this event will be dropped (default false)",
          "default": false
        },
        "noTransform": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this event will not be transformed (default false)",
          "default": false
        },
        "continueAfterTransform": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will continue to look for new events after transform (default false)",
          "default": false
        },
        "stopAfterNoMatch": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will stop looking for new matches after not matching (default false)",
          "default": false
        },
        "changeAggregationKey": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will change the aggregation key to the value of newAggregationKey (default false)",
          "default": false
        },
        "invertIp": {
          "type": "boolean",
          "position": 0,
          "description": "If true, this filter will switch the source and destination ip in the event (default false)",
          "default": false
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels which can be used to categorize the filter ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "type": "boolean",
          "position": 0,
          "description": "Whether or not the filter is enabled (default false)",
          "default": false
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        }
      }
    },
    "AnalysisFilterSearchRequest": {
      "type": "object",
      "properties": {
        "order": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sortBy": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "name",
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "description",
              "label",
              "preStatement1",
              "preStatement2",
              "statementCode",
              "triggerCode",
              "actionName",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given IDs ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given customers, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdBy",
              "lastUpdatedBy",
              "deletedBy",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "defaultAggregate",
              "skipNewEvent"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "defaultAggregate",
              "skipNewEvent"
            ]
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Subcriteria to add to the search ",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AnalysisFilterSearchSubCriteria"
          }
        },
        "includeCode": {
          "type": "boolean",
          "position": 0,
          "description": "Whether or not to include code in the result object. The code is only returned if set to true (default false)",
          "default": false
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit maximum amount of results (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip specified amount of results (default 0)",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "DomainInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ResultStash-EventFilter-single": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "description": "Contains a single result",
          "$ref": "#/definitions/EventFilter"
        }
      }
    },
    "AnnotationFilterSearchRequest": {
      "type": "object",
      "properties": {
        "order": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sortBy": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "name",
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "description",
              "label",
              "triggerCode",
              "statementCode",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given IDs ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given customers, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdBy",
              "lastUpdatedBy",
              "deletedBy",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Subcriteria to add to the search ",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AnnotationFilterSearchSubCriteria"
          }
        },
        "includeCode": {
          "type": "boolean",
          "position": 0,
          "description": "Whether or not to include code in the result object. The code is only returned if set to true (default false)",
          "default": false
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit maximum amount of results (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip specified amount of results (default 0)",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "ResultStash-EventFilterErrorStats-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/EventFilterErrorStats"
          }
        }
      }
    },
    "EventFilterSetLogLevelRequest": {
      "type": "object",
      "required": [
        "level"
      ],
      "properties": {
        "level": {
          "type": "string",
          "position": 0,
          "description": "Log level to be set for event filter ",
          "enum": [
            "OFF",
            "DEBUG",
            "INFO",
            "WARN",
            "ERROR"
          ]
        },
        "instanceID": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "ID of component instance to set log level for event filter, if not provided will set across instances "
        }
      }
    },
    "ComponentIdentity": {
      "type": "object",
      "properties": {
        "exact": {
          "type": "boolean"
        },
        "identifiers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MatchFilterSearchRequest": {
      "type": "object",
      "properties": {
        "order": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sortBy": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "id",
              "name",
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "description",
              "name",
              "matchCode",
              "transformCode",
              "protocol",
              "domainPattern",
              "uriPattern",
              "newAggregationKey",
              "label",
              "attackIdentifier",
              "propertyKey",
              "propertyValue",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given IDs ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given customers, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdBy",
              "lastUpdatedBy",
              "deletedBy",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which have the following flags set ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude filters which have the following flags set ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "includeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which include the given event flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "excludeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which exclude the given event flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "location": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following locations, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "alarmID": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following alarms ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "attackCategory": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following attack categories, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following sensors ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Subcriteria to add to the search ",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MatchFilterSearchSubCriteria"
          }
        },
        "includeCode": {
          "type": "boolean",
          "position": 0,
          "description": "Whether or not to include code in the result object. The code is only returned if set to true (default false)",
          "default": false
        },
        "limit": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Limit maximum amount of results (default 25)",
          "minimum": 0,
          "default": 25
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "Skip specified amount of results (default 0)",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "ResultStash-EventFilterHitStats-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/EventFilterHitStats"
          }
        }
      }
    },
    "AnalysisFilterSearchSubCriteria": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "exclude": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "description",
              "label",
              "preStatement1",
              "preStatement2",
              "statementCode",
              "triggerCode",
              "actionName",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given IDs ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given customers, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdBy",
              "lastUpdatedBy",
              "deletedBy",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted",
              "all"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "defaultAggregate",
              "skipNewEvent"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled",
              "defaultAggregate",
              "skipNewEvent"
            ]
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Subcriteria to add to the search ",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AnalysisFilterSearchSubCriteria"
          }
        }
      }
    },
    "ResultStash-EventFilter-list": {
      "required": [
        "data"
      ],
      "properties": {
        "responseCode": {
          "type": "integer",
          "format": "int32",
          "description": "Status code returned from API"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of returned results"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "description": "Number of skipped results"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "description": "Number of available results on server"
        },
        "size": {
          "type": "integer",
          "format": "int64",
          "description": "Actual number of returned results"
        },
        "metaData": {
          "type": "object",
          "description": "Additional unstructured meta data associated with response"
        },
        "messages": {
          "type": "array",
          "description": "Contains messages returned from the API, usually error messages",
          "items": {
            "$ref": "#/definitions/ResultMessage"
          }
        },
        "data": {
          "type": "array",
          "description": "Contains an array of results",
          "items": {
            "$ref": "#/definitions/EventFilter"
          }
        }
      }
    },
    "AnnotationFilterSearchSubCriteria": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "exclude": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "name",
              "description",
              "label",
              "triggerCode",
              "statementCode",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given IDs ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given customers, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdBy",
              "lastUpdatedBy",
              "deletedBy",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to include ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Flags to exclude ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Subcriteria to add to the search ",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/AnnotationFilterSearchSubCriteria"
          }
        }
      }
    },
    "MatchFilterSearchSubCriteria": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean"
        },
        "exclude": {
          "type": "boolean"
        },
        "keywords": {
          "type": "array",
          "position": 0,
          "description": "Search for keywords against fields defined by keywordFieldStrategy ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "keywordFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by keywords (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "description",
              "name",
              "matchCode",
              "transformCode",
              "protocol",
              "domainPattern",
              "uriPattern",
              "newAggregationKey",
              "label",
              "attackIdentifier",
              "propertyKey",
              "propertyValue",
              "all"
            ]
          }
        },
        "keywordMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given IDs ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "customer": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with the given customers, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "user": {
          "type": "array",
          "position": 0,
          "description": "Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "userFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which fields will be searched by user (default all supported fields) (default all)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "createdBy",
              "lastUpdatedBy",
              "deletedBy",
              "all"
            ]
          }
        },
        "userMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict different keywords should be matched (default match all keywords) (default all)",
          "enum": [
            "any",
            "all"
          ]
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)",
          "minimum": 0,
          "default": 0
        },
        "timeFieldStrategy": {
          "type": "array",
          "position": 0,
          "description": "Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "validFrom",
              "validTo",
              "created",
              "lastUpdated",
              "deleted"
            ]
          }
        },
        "timeMatchStrategy": {
          "type": "string",
          "position": 0,
          "description": "Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)",
          "enum": [
            "any",
            "all"
          ]
        },
        "includeFlags": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which have the following flags set ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "excludeFlags": {
          "type": "array",
          "position": 0,
          "description": "Exclude filters which have the following flags set ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "deleted",
              "enabled",
              "controlled"
            ]
          }
        },
        "includeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which include the given event flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "excludeEventFlags": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which exclude the given event flags ",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "ESTABLISHED",
              "BLOCKED",
              "SNAPSHOT",
              "FINALIZED",
              "SOURCE_IS_CUSTOMERNET",
              "DESTINATION_IS_CUSTOMERNET",
              "SOURCE_IS_PARTIAL_CUSTOMERNET",
              "DESTINATION_IS_PARTIAL_CUSTOMERNET",
              "PARTIALLY_BLOCKED",
              "FALSE_POSITIVE",
              "NOT_A_THREAT",
              "TUNING_CANDIDATE",
              "NOTIFIED",
              "PARTIALLY_NOTIFIED",
              "FOLLOWUP",
              "IDENTIFIED_THREAT",
              "THREAT_CANDIDATE",
              "ACKNOWLEDGED",
              "PARTIALLY_ACKNOWLEDGED",
              "SEVERITY_ADJUSTED",
              "COMMENTED",
              "FILTERED",
              "CHECKED",
              "INCOMPLETE_DETAILS",
              "AGGREGATED_BASE_EVENT",
              "REMOTE_STORAGE",
              "CUSTOM_SOURCE_AGGREGATION",
              "CUSTOM_DESTINATION_AGGREGATION",
              "ASSOCIATED_TO_CASE_BY_FILTER",
              "SEVERITY_INCREASED_BY_FILTER",
              "SEVERITY_REDUCED_BY_FILTER",
              "CREATED_BY_ANALYSIS_FILTER",
              "IP_INVERTED_BY_FILTER",
              "HAS_PAYLOAD",
              "HAS_PCAP",
              "EXTEND_EVENT_TTL",
              "INITIAL_TUNING",
              "PARTIAL_INITIAL_TUNING",
              "POST_ANALYSIS",
              "SSL_TERMINATED",
              "PARTIAL_SSL_TERMINATED",
              "AUTO_REPORT",
              "MISSING_TIMESTAMP",
              "CLOCK_OUT_OF_SYNC",
              "DROP_ANALYSIS",
              "ESCALATED_BY_REPUTATION",
              "HAS_SAMPLE",
              "STORE_EVENT",
              "STORE_AGGREGATED"
            ]
          }
        },
        "location": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following locations, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "alarmID": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following alarms ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "attackCategory": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following attack categories, identified by id or shortname ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "sensorID": {
          "type": "array",
          "position": 0,
          "description": "Limit to filters which target the following sensors ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "subCriteria": {
          "type": "array",
          "position": 0,
          "description": "Subcriteria to add to the search ",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/MatchFilterSearchSubCriteria"
          }
        }
      }
    },
    "EventFilterErrorComponentStats": {
      "type": "object",
      "properties": {
        "componentIdentity": {
          "$ref": "#/definitions/ComponentIdentity"
        },
        "errorCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ResultMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "messageTemplate": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "FIELD_ERROR",
            "ACTION_ERROR",
            "WARNING",
            "NOTIFICATION",
            "INFO"
          ]
        },
        "field": {
          "type": "string"
        },
        "parameter": {
          "type": "object"
        },
        "timestamp": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EventFilter": {
      "type": "object",
      "properties": {
        "labels": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "valid": {
          "type": "boolean"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "index": {
          "type": "integer",
          "format": "int32"
        },
        "enabled": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "expired": {
          "type": "boolean"
        },
        "customer": {
          "$ref": "#/definitions/CustomerInfo"
        },
        "masterID": {
          "type": "integer",
          "format": "int64"
        },
        "flags": {
          "type": "integer",
          "format": "int64"
        },
        "revision": {
          "type": "integer",
          "format": "int32"
        },
        "information": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "createdTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "lastUpdatedByUser": {
          "readOnly": true,
          "$ref": "#/definitions/UserInfo"
        },
        "validFromTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "validToTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "lastUpdatedTimestamp": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "AnalysisFilterUpdateRequest": {
      "type": "object",
      "required": [
        "addLabels",
        "comment",
        "removeLabels",
        "setLabels"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "name": {
          "type": "string",
          "position": 0,
          "description": "The name of the filter "
        },
        "index": {
          "type": "integer",
          "format": "int32",
          "position": 0,
          "description": "The index of the filter. Filters with lower index will be ran first. ",
          "minimum": 0,
          "maximum": 10
        },
        "validFrom": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "validTo": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "A description of the filter "
        },
        "preStatementCode1": {
          "type": "string",
          "position": 0,
          "description": "Optional esper code which does a pre selection before the statement code is run "
        },
        "preStatementCode2": {
          "type": "string",
          "position": 0,
          "description": "Optional esper code to do further pre selection on the result of preStatementCode1, and applied before the statementCode "
        },
        "statementCode": {
          "type": "string",
          "position": 0,
          "description": "Esper code to select which events the filter will be applied to "
        },
        "triggerCode": {
          "type": "string",
          "position": 0,
          "description": "Groovy code which is run on the selected events "
        },
        "actionName": {
          "type": "string",
          "position": 0,
          "description": "The name of the signature which should be attached to the created event "
        },
        "defaultAggregate": {
          "type": "boolean",
          "position": 0,
          "description": "If true this filter will populate the created event with information from the selected event "
        },
        "skipNewEvent": {
          "type": "boolean",
          "position": 0,
          "description": "If true the filter will not submit triggered events for central storage "
        },
        "removeLabels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels  ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "addLabels": {
          "type": "array",
          "position": 0,
          "description": "A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels  ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "setLabels": {
          "type": "array",
          "position": 0,
          "description": "Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "comment": {
          "type": "string",
          "position": 0,
          "description": "A comment describing why the filter was created "
        }
      }
    },
    "CustomerInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "domain": {
          "$ref": "#/definitions/DomainInfo"
        }
      }
    },
    "EventFilterSearchCriteria": {
      "type": "object",
      "properties": {
        "limit": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Limit results "
        },
        "offset": {
          "type": "integer",
          "format": "int32",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Offset results "
        },
        "includeDeleted": {
          "type": "boolean",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Also include deleted objects (where implemented) "
        },
        "includeFlags": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects with these flags set "
        },
        "excludeFlags": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Exclude objects with these flags set "
        },
        "customerID": {
          "type": "array",
          "xml": {
            "name": "Customers",
            "wrapped": true
          },
          "position": 0,
          "description": "Limit result to objects belonging to these customers ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64",
            "xml": {
              "name": "CustomerID"
            }
          }
        },
        "type": {
          "type": "string",
          "position": 0,
          "description": "Limit search to filters of this type "
        },
        "description": {
          "type": "string",
          "position": 0,
          "description": "Match filters by words in description "
        },
        "searchString": {
          "type": "string",
          "position": 0,
          "description": "Match filters by words in entire filter configuration "
        },
        "labels": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters with any of these filters ",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "masterID": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Limit search to revisions of this master ID (by default, revisions are excluded) "
        },
        "userID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters created/updated by any of these users ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "filterID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to these spesific filters ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "associatedCaseID": {
          "type": "array",
          "position": 0,
          "description": "Limit search to filters associated to any of the listed cases. AssociatedCaseID 0 will include filters not associated to a case. ",
          "uniqueItems": true,
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "hitPeriod": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "When searching by filter hits, look at hits for this period (previous time period in milliseconds) "
        },
        "minimumHits": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Limit search to filters reporting at least this number of hits for the hit period (SLOW) "
        },
        "maximumHits": {
          "type": "integer",
          "format": "int64",
          "position": 0,
          "description": "Limit search to filters reporting at most this number of hits for the hit period (SLOW) "
        },
        "includeCreatedTimestamp": {
          "type": "boolean",
          "position": 0,
          "description": "When limiting filters by time, include filters by created timestamp "
        },
        "includeLastUpdatedTimestamp": {
          "type": "boolean",
          "position": 0,
          "description": "When limiting filters by time, include filters by last updated timestamp "
        },
        "excludeExpired": {
          "type": "boolean",
          "position": 0,
          "description": "Exclude filters which are expired (validToTimestamp has passed) "
        },
        "excludeFuture": {
          "type": "boolean",
          "position": 0,
          "description": "Exclude filters which are not yet active (validFromTimestamp is in the future) "
        },
        "excludeValid": {
          "type": "boolean",
          "position": 0,
          "description": "Exclude filters which are currently valid "
        },
        "startTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects from this timestamp "
        },
        "endTimestamp": {
          "type": "integer",
          "format": "int64",
          "xml": {
            "attribute": true
          },
          "position": 0,
          "description": "Search objects until this timestamp "
        },
        "sortBy": {
          "type": "array",
          "position": 0,
          "description": "Order results by these properties (prefix with - to sort descending) ",
          "items": {
            "type": "string"
          }
        }
      }
    }
  }
}