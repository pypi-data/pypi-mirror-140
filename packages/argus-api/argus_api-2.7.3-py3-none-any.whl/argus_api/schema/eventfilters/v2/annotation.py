"""Autogenerated API schema"""
from argus_api import session


add_annotation_filter = {'tags': ['eventfilters/v2'], 'summary': 'Adds an annotation filter (DEV)', 'description': '', 'operationId': 'addAnnotationFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Add annotation filter request', 'required': False, 'schema': {'type': 'object', 'required': ['description', 'labels', 'name', 'statementCode', 'triggerCode'], 'properties': {'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter '}, 'index': {'type': 'int', 'position': 0, 'description': 'The index of the filter. Filters with lower index will be ran first. (default 5)', 'minimum': 0, 'maximum': 10, 'default': 5}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter '}, 'customer': {'type': 'str', 'position': 0, 'description': 'The shortname or ID of the customer the filter belongs to. If customer is not set, this will create a global filter '}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'The code which triggers the filter '}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'The code which will run then the filter is triggered '}, 'stage': {'type': 'str', 'position': 0, 'description': 'The analysis stage the filter is run in (default all)', 'enum': ['preAnalysis', 'postAnalysis', 'all']}, 'labels': {'type': 'list', 'position': 0, 'description': 'A set of labels which can be used to categorize the filter ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'enabled': {'type': 'bool', 'position': 0, 'description': 'Whether or not the filter is enabled (default false)', 'default': False}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was created '}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details '}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details '}}}}], 'responses': {'200': {'description': 'successful operation', 'schema': {'required': ['data'], 'properties': {'responseCode': {'type': 'int', 'description': 'Status code returned from API'}, 'limit': {'type': 'int', 'description': 'Maximum number of returned results'}, 'offset': {'type': 'int', 'description': 'Number of skipped results'}, 'count': {'type': 'int', 'description': 'Number of available results on server'}, 'size': {'type': 'int', 'description': 'Actual number of returned results'}, 'metaData': {'type': 'dict', 'description': 'Additional unstructured meta data associated with response'}, 'messages': {'type': 'list', 'description': 'Contains messages returned from the API, usually error messages', 'items': {'type': 'dict', 'properties': {'message': {'type': 'string'}, 'messageTemplate': {'type': 'string'}, 'type': 'str', 'field': {'type': 'string'}, 'parameter': {'type': 'object'}, 'timestamp': {'type': 'int'}, 'options': ['FIELD_ERROR', 'ACTION_ERROR', 'WARNING', 'NOTIFICATION', 'INFO']}}}, 'data': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'index': {'type': 'int', 'position': 0, 'description': 'The execution index '}, 'revision': {'type': 'int', 'position': 0, 'description': 'The revision number for this filter instance '}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter '}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied '}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied '}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter '}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'The code which triggers the filter '}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'The code which will run then the filter is triggered '}, 'stage': {'type': 'str', 'position': 0, 'description': 'The analysis stage the filter is run in ', 'enum': ['preAnalysis', 'postAnalysis', 'all']}, 'labels': {'type': 'list', 'position': 0, 'description': 'The set of labels that can be used to categorize the filter ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'flags': {'type': 'list', 'position': 0, 'description': 'The flags that are set on the filter ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled', 'global']}}, 'createdByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'createdTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was created '}, 'lastUpdatedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'lastUpdatedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was last updated '}, 'deletedByUser': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'shortName': {'type': 'str', 'position': 0, 'description': "The subject's short name "}, 'name': {'type': 'str', 'position': 0, 'description': "The subject's name "}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}, 'customer': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the customer. '}, 'shortName': {'type': 'str', 'position': 0, 'description': 'Shortname of the customer. '}, 'domain': {'type': 'dict', 'properties': {'id': {'type': 'int', 'position': 0, 'description': 'ID of the response object. '}, 'name': {'type': 'str', 'position': 0, 'description': 'Name of the domain. '}}}}}}}, 'deletedTimestamp': {'type': 'int', 'position': 0, 'description': 'When the filter was deleted '}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was added '}}}}}}, '201': {'description': 'Filter created'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
delete_annotation_filter = {'tags': ['eventfilters/v2'], 'summary': 'Deletes an annotation filter (DEV)', 'description': '', 'operationId': 'deleteAnnotationFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter to delete', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}], 'responses': {'200': {'description': 'Annotation filter deleted'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
get_annotation_filter = {'tags': ['eventfilters/v2'], 'summary': 'Gets an annotation filter (DEV)', 'description': '', 'operationId': 'getAnnotationFilter', 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in AnnotationFilter', 'required': False, 'type': 'bool', 'default': False}], 'responses': {'200': {'description': 'Annotation filter returned'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}}}
list_annotation_filter = {'tags': ['eventfilters/v2'], 'summary': 'Simple search for annotation filters (DEV)', 'description': '', 'operationId': 'listAnnotationFilter', 'produces': ['application/json'], 'parameters': [{'name': 'keywords', 'in': 'query', 'description': 'Search by keywords', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'keywordMatch', 'in': 'query', 'description': 'Set match strategy for keyword search', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'keywordField', 'in': 'query', 'description': 'Set field strategy for keyword search', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'all', 'enum': ['name', 'description', 'label', 'triggerCode', 'statementCode', 'all']}, 'collectionFormat': 'multi'}, {'name': 'timestampMatch', 'in': 'query', 'description': 'Set match strategy for timestamp filtering', 'required': False, 'type': 'str', 'default': 'all', 'enum': ['any', 'all']}, {'name': 'timestampField', 'in': 'query', 'description': 'Set field strategy for timestamp filtering', 'required': False, 'type': 'list', 'items': {'type': 'str', 'default': 'lastUpdated', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}, 'collectionFormat': 'multi'}, {'name': 'start', 'in': 'query', 'description': 'Lower bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'end', 'in': 'query', 'description': 'Upper bound timestamp filter value', 'required': False, 'type': 'int', 'default': 0, 'minimum': 0}, {'name': 'includeCode', 'in': 'query', 'description': 'Whether to include code in results', 'required': False, 'type': 'bool', 'default': False}, {'name': 'sortBy', 'in': 'query', 'description': 'Field to sort by', 'required': False, 'type': 'list', 'items': {'type': 'string'}, 'collectionFormat': 'multi'}, {'name': 'limit', 'in': 'query', 'description': 'Limit result', 'required': False, 'type': 'int', 'default': 25}, {'name': 'offset', 'in': 'query', 'description': 'Offset result', 'required': False, 'type': 'int', 'default': 0}], 'responses': {'200': {'description': 'Search performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
search_annotation_filter = {'tags': ['eventfilters/v2'], 'summary': 'Searches for annotation filters (DEV)', 'description': '', 'operationId': 'searchAnnotationFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'in': 'body', 'name': 'body', 'description': 'Search annotation filter request', 'required': False, 'schema': {'type': 'object', 'properties': {'order': {'type': 'list', 'items': {'type': 'string'}}, 'sortBy': {'type': 'list', 'items': {'type': 'str', 'enum': ['id', 'name', 'validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'label', 'triggerCode', 'statementCode', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'label', 'triggerCode', 'statementCode', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search ', 'uniqueItems': True, 'items': {'type': 'dict', 'properties': {'required': {'type': 'boolean'}, 'exclude': {'type': 'boolean'}, 'keywords': {'type': 'list', 'position': 0, 'description': 'Search for keywords against fields defined by keywordFieldStrategy ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'keywordFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by keywords (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['name', 'description', 'label', 'triggerCode', 'statementCode', 'all']}}, 'keywordMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'filterID': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given IDs ', 'uniqueItems': True, 'items': {'type': 'int'}}, 'customer': {'type': 'list', 'position': 0, 'description': 'Limit search to filters with the given customers, identified by id or shortname ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'user': {'type': 'list', 'position': 0, 'description': 'Search using users identified by id or shortname. If given a group, we will resolve all members of the group recursively ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'userFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which fields will be searched by user (default all supported fields) (default all)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['createdBy', 'lastUpdatedBy', 'deletedBy', 'all']}}, 'userMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict different keywords should be matched (default match all keywords) (default all)', 'enum': ['any', 'all']}, 'startTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (start timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'endTimestamp': {'type': 'int', 'position': 0, 'description': 'Restrict to a time frame based on the set timeFieldStrategy (end timestamp) (default 0)', 'minimum': 0, 'default': 0}, 'timeFieldStrategy': {'type': 'list', 'position': 0, 'description': 'Defines which timestamps will be included in the search (default lastUpdated) (default lastUpdated)', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['validFrom', 'validTo', 'created', 'lastUpdated', 'deleted']}}, 'timeMatchStrategy': {'type': 'str', 'position': 0, 'description': 'Defines how strict to match against different timestamps (all/any) using start and end timestamp (default any) (default any)', 'enum': ['any', 'all']}, 'includeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to include ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'excludeFlags': {'type': 'list', 'position': 0, 'description': 'Flags to exclude ', 'uniqueItems': True, 'items': {'type': 'str', 'enum': ['deleted', 'enabled', 'controlled']}}, 'subCriteria': {'type': 'list', 'position': 0, 'description': 'Subcriteria to add to the search ', 'uniqueItems': True, 'items': []}}}}}}}, 'includeCode': {'type': 'bool', 'position': 0, 'description': 'Whether or not to include code in the result object. The code is only returned if set to true (default false)', 'default': False}, 'limit': {'type': 'int', 'position': 0, 'description': 'Limit maximum amount of results (default 25)', 'minimum': 0, 'default': 25}, 'offset': {'type': 'int', 'position': 0, 'description': 'Skip specified amount of results (default 0)', 'minimum': 0, 'default': 0}}}}], 'responses': {'200': {'description': 'Search performed'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '412': {'description': 'Validation failed'}}}
update_annotation_filter = {'tags': ['eventfilters/v2'], 'summary': 'Updates an annotation filter (DEV)', 'description': '', 'operationId': 'updateAnnotationFilter', 'consumes': ['application/json'], 'produces': ['application/json'], 'parameters': [{'name': 'id', 'in': 'path', 'description': 'ID of filter', 'required': True, 'type': 'int', 'pattern': '[0-9]+'}, {'in': 'body', 'name': 'body', 'description': 'Update annotation filter request', 'required': False, 'schema': {'type': 'object', 'required': ['addLabels', 'comment', 'removeLabels', 'setLabels'], 'properties': {'enabled': {'type': 'boolean'}, 'name': {'type': 'str', 'position': 0, 'description': 'The name of the filter '}, 'index': {'type': 'int', 'position': 0, 'description': 'The index of the filter. Filters with lower index will be ran first. ', 'minimum': 0, 'maximum': 10}, 'validFrom': {'type': 'int', 'position': 0, 'description': 'When the filter starts being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details '}, 'validTo': {'type': 'int', 'position': 0, 'description': 'When the filter stops being applied. Timestamp can be milliseconds since epoch, ISO8601 timestamp, or a string with a relative timestamp. See the general integration guide for more details '}, 'description': {'type': 'str', 'position': 0, 'description': 'A description of the filter '}, 'triggerCode': {'type': 'str', 'position': 0, 'description': 'The code which triggers the filter '}, 'statementCode': {'type': 'str', 'position': 0, 'description': 'The code which will run then the filter is triggered '}, 'stage': {'type': 'str', 'position': 0, 'description': 'The analysis stage the filter is run in ', 'enum': ['preAnalysis', 'postAnalysis', 'all']}, 'removeLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to remove from the filter.  Will be applied before adding labels and ignore filters that are not present. Will throw an exception if used in conjunction with setLabels  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'addLabels': {'type': 'list', 'position': 0, 'description': 'A set of labels to add to the filter.  Will be applied after removing labels. Will throw an exception if used in conjunction with setLabels  ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'setLabels': {'type': 'list', 'position': 0, 'description': 'Replace the current set of labels with these. Will throw an exception if used in conjunction with addLabels or removeLabels ', 'uniqueItems': True, 'items': {'type': 'string'}}, 'comment': {'type': 'str', 'position': 0, 'description': 'A comment describing why the filter was created '}}}}], 'responses': {'200': {'description': 'Annotation filter updated'}, '401': {'description': 'Authentication failed'}, '403': {'description': 'Access denied'}, '404': {'description': 'Object not found'}, '412': {'description': 'Validation failed'}}}