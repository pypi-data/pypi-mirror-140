{"version":3,"file":"lib_widget_js.da814157c01efb5dcd5b.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;ACpBa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,kBAAkB;AACtC,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,qCAAqC,mBAAO,CAAC,yEAAY;AACzD,iCAAiC,mBAAO,CAAC,oGAAsC;AAC/E,wDAAwD,mBAAO,CAAC,kIAA+B;AAC/F,gCAAgC,mBAAO,CAAC,0DAAO;AAC/C,qCAAqC,mBAAO,CAAC,yEAAY;AACzD,uCAAuC,mBAAO,CAAC,+EAAc;AAC7D,kBAAkB,mBAAO,CAAC,mCAAW;AACrC;AACA,mBAAO,CAAC,2CAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,0QAA0Q,sBAAsB,oCAAoC;AACxY;AACA;AACA,kBAAkB;AAClB,yCAAyC;AACzC;AACA;AACA;AACA,oCAAoC;AACpC,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,qCAAqC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,8BAA8B;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oCAAoC,mBAAmB,mCAAmC;AAC3H;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;;;;;;;;;AChMA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F;AACA;AACA,4CAA4C,mBAAmB,eAAe,8BAA8B,GAAG,kDAAkD,uBAAuB,cAAc,eAAe,4BAA4B,8BAA8B,sBAAsB,qBAAqB,uBAAuB,gBAAgB,GAAG,uCAAuC,oBAAoB,uBAAuB,eAAe,uBAAuB,iBAAiB,qBAAqB,gBAAgB,4BAA4B,8BAA8B,sBAAsB,GAAG,4CAA4C,cAAc,GAAG,8CAA8C,eAAe,GAAG,+CAA+C,eAAe,GAAG,8CAA8C,eAAe,GAAG;AACn2B;AACA;;;;;;;;;;;ACNA,UAAU,mBAAO,CAAC,oJAAwE;AAC1F,0BAA0B,mBAAO,CAAC,qHAAuD;;AAEzF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA","sources":["webpack://ipysigma/./lib/version.js","webpack://ipysigma/./lib/widget.js","webpack://ipysigma/./css/widget.css","webpack://ipysigma/./css/widget.css?a195"],"sourcesContent":["\"use strict\";\n// Copyright (c) Yomguithereal\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SigmaView = exports.SigmaModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst graphology_1 = __importDefault(require(\"graphology\"));\nconst worker_1 = __importDefault(require(\"graphology-layout-forceatlas2/worker\"));\nconst graphology_layout_forceatlas2_1 = __importDefault(require(\"graphology-layout-forceatlas2\"));\nconst sigma_1 = __importDefault(require(\"sigma\"));\nconst seedrandom_1 = __importDefault(require(\"seedrandom\"));\nconst comma_number_1 = __importDefault(require(\"comma-number\"));\nconst version_1 = require(\"./version\");\n// Import the CSS\nrequire(\"../css/widget.css\");\n/**\n * Model declaration.\n */\nclass SigmaModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SigmaModel.model_name, _model_module: SigmaModel.model_module, _model_module_version: SigmaModel.model_module_version, _view_name: SigmaModel.view_name, _view_module: SigmaModel.view_module, _view_module_version: SigmaModel.view_module_version, data: { nodes: [], edges: [] }, height: 500, start_layout: false });\n    }\n}\nexports.SigmaModel = SigmaModel;\nSigmaModel.serializers = Object.assign({}, base_1.DOMWidgetModel.serializers);\nSigmaModel.model_name = 'SigmaModel';\nSigmaModel.model_module = version_1.MODULE_NAME;\nSigmaModel.model_module_version = version_1.MODULE_VERSION;\nSigmaModel.view_name = 'SigmaView'; // Set to null if no view\nSigmaModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nSigmaModel.view_module_version = version_1.MODULE_VERSION;\n/**\n * Helper functions.\n */\nfunction isValidNumber(value) {\n    return typeof value === 'number' && !isNaN(value);\n}\nfunction buildGraph(data, rng) {\n    const graph = graphology_1.default.from(data);\n    graph.updateEachNodeAttributes((key, attr) => {\n        // Random position for nodes without positions\n        if (!isValidNumber(attr.x))\n            attr.x = rng();\n        if (!isValidNumber(attr.y))\n            attr.y = rng();\n        // If we don't have a label we keep the key instead\n        if (!attr.label)\n            attr.label = key;\n        return attr;\n    });\n    return graph;\n}\nfunction adjustDimensions(el, height) {\n    el.style.height = height + 'px';\n    el.style.width = '100%';\n}\nfunction createElement(tag, options) {\n    const element = document.createElement(tag);\n    const { className, style, innerHTML, title } = options || {};\n    if (className)\n        element.setAttribute('class', className);\n    for (const prop in style) {\n        element.style[prop] = style[prop];\n    }\n    if (innerHTML)\n        element.innerHTML = innerHTML;\n    if (title)\n        element.setAttribute('title', title);\n    return element;\n}\nconst SPINNER_STATES = ['⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷'];\nfunction createSpinner() {\n    const span = createElement('span', { innerHTML: SPINNER_STATES[0] });\n    let state = -1;\n    let frame = null;\n    const update = () => {\n        state++;\n        state %= SPINNER_STATES.length;\n        span.innerHTML = SPINNER_STATES[state];\n        frame = setTimeout(update, 80);\n    };\n    update();\n    return [span, () => frame !== null && clearTimeout(frame)];\n}\nfunction createGraphDescription(graph) {\n    let innerHTML = graph.multi ? 'Multi ' : '';\n    innerHTML += graph.type === 'undirected' ? 'Undirected' : 'Directed';\n    innerHTML += ` Graph<br><b>${comma_number_1.default(graph.order)}</b> nodes<br><b>${comma_number_1.default(graph.size)}</b> edges`;\n    return createElement('div', {\n        className: 'ipysigma-graph-description',\n        innerHTML,\n    });\n}\n/**\n * View declaration.\n */\nclass SigmaView extends base_1.DOMWidgetView {\n    constructor() {\n        super(...arguments);\n        this.spinner = null;\n    }\n    render() {\n        super.render();\n        this.rng = seedrandom_1.default('ipysigma');\n        this.el.classList.add('ipysigma-widget');\n        const height = this.model.get('height');\n        const data = this.model.get('data');\n        const graph = buildGraph(data, this.rng);\n        this.layout = new worker_1.default(graph, {\n            settings: graphology_layout_forceatlas2_1.default.inferSettings(graph),\n        });\n        adjustDimensions(this.el, height);\n        const container = document.createElement('div');\n        this.el.appendChild(container);\n        adjustDimensions(container, height);\n        // Description\n        this.el.appendChild(createGraphDescription(graph));\n        // Camera controls\n        this.zoomButton = createElement('div', {\n            className: 'ipysigma-button ipysigma-zoom-button',\n            innerHTML: 'zoom',\n        });\n        this.unzoomButton = createElement('div', {\n            className: 'ipysigma-button ipysigma-unzoom-button',\n            innerHTML: 'unzoom',\n        });\n        this.rescaleButton = createElement('div', {\n            className: 'ipysigma-button ipysigma-rescale-button',\n            innerHTML: 'rescale',\n        });\n        this.el.appendChild(this.zoomButton);\n        this.el.appendChild(this.unzoomButton);\n        this.el.appendChild(this.rescaleButton);\n        // Layout controls\n        this.layoutButton = createElement('div', {\n            className: 'ipysigma-button ipysigma-layout-button',\n            innerHTML: 'start layout',\n        });\n        this.el.appendChild(this.layoutButton);\n        // Waiting for widget to be mounted to register events\n        this.displayed.then(() => {\n            this.renderer = new sigma_1.default(graph, container);\n            this.bindCameraHandlers();\n            this.bindLayoutHandlers();\n        });\n    }\n    bindCameraHandlers() {\n        this.zoomButton.onclick = () => {\n            this.renderer.getCamera().animatedZoom();\n        };\n        this.unzoomButton.onclick = () => {\n            this.renderer.getCamera().animatedUnzoom();\n        };\n        this.rescaleButton.onclick = () => {\n            this.renderer.getCamera().animatedReset();\n        };\n    }\n    bindLayoutHandlers() {\n        const stopLayout = () => {\n            if (this.spinner) {\n                this.spinner[1]();\n                this.spinner = null;\n            }\n            this.layoutButton.innerHTML = 'start layout';\n            this.layout.stop();\n        };\n        const startLayout = () => {\n            this.spinner = createSpinner();\n            this.layoutButton.innerHTML = 'stop layout - ';\n            this.layoutButton.appendChild(this.spinner[0]);\n            this.layout.start();\n        };\n        if (this.model.get('start_layout'))\n            startLayout();\n        this.layoutButton.onclick = () => {\n            if (this.layout.isRunning()) {\n                stopLayout();\n            }\n            else {\n                startLayout();\n            }\n        };\n    }\n    remove() {\n        // Cleanup to avoid leaks and free GPU slots\n        if (this.renderer)\n            this.renderer.kill();\n        super.remove();\n    }\n}\nexports.SigmaView = SigmaView;\n//# sourceMappingURL=widget.js.map","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".ipysigma-widget {\\n  margin: 0 10px;\\n  padding: 0;\\n  border: 1px solid #e0e0e0;\\n}\\n\\n.ipysigma-widget .ipysigma-graph-description {\\n  position: absolute;\\n  top: 10px;\\n  left: 10px;\\n  background-color: white;\\n  border: 1px solid #e0e0e0;\\n  padding: 5px 10px;\\n  font-size: 0.8em;\\n  font-style: italic;\\n  z-index: 10;\\n}\\n\\n.ipysigma-widget .ipysigma-button {\\n  cursor: pointer;\\n  position: absolute;\\n  left: 10px;\\n  text-align: center;\\n  padding: 5px;\\n  font-size: 0.8em;\\n  z-index: 10;\\n  background-color: white;\\n  border: 1px solid #e0e0e0;\\n  user-select: none;\\n}\\n\\n.ipysigma-widget .ipysigma-zoom-button {\\n  top: 80px;\\n}\\n\\n.ipysigma-widget .ipysigma-unzoom-button {\\n  top: 114px;\\n}\\n\\n.ipysigma-widget .ipysigma-rescale-button {\\n  top: 148px;\\n}\\n\\n.ipysigma-widget .ipysigma-layout-button {\\n  top: 194px;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./widget.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};"],"names":[],"sourceRoot":""}