"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class DAG(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class SymbolsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Node: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Node] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    SYMBOLS_FIELD_NUMBER: builtins.int
    FLOWCHART_FIELD_NUMBER: builtins.int
    @property
    def symbols(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Node]:
        """'symbols': {'add_two_nos': Node}"""
        pass
    @property
    def flowchart(self) -> global___Flowchart: ...
    def __init__(self,
        *,
        symbols: typing.Optional[typing.Mapping[typing.Text, global___Node]] = ...,
        flowchart: typing.Optional[global___Flowchart] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["flowchart",b"flowchart"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["flowchart",b"flowchart","symbols",b"symbols"]) -> None: ...
global___DAG = DAG

class Flowchart(google.protobuf.message.Message):
    """
    Flowchart is a list of nodes and list of edges.

    'flowchart': {
    nodes: {[id]:Node},
    edges: {[id]:Edge}
    }

    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class NodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Node: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Node] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class EdgesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___Flowchart.Edge: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___Flowchart.Edge] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class Edge(google.protobuf.message.Message):
        """
        Edge is like:
        'id', # :str
        'source', # :str
        'target', # :str
        'type', # :str
        'nbox_string', # :str
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        ID_FIELD_NUMBER: builtins.int
        SOURCE_FIELD_NUMBER: builtins.int
        TARGET_FIELD_NUMBER: builtins.int
        TYPE_FIELD_NUMBER: builtins.int
        NBOX_STRING_FIELD_NUMBER: builtins.int
        id: typing.Text
        source: typing.Text
        target: typing.Text
        type: typing.Text
        nbox_string: typing.Text
        def __init__(self,
            *,
            id: typing.Text = ...,
            source: typing.Text = ...,
            target: typing.Text = ...,
            type: typing.Text = ...,
            nbox_string: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["id",b"id","nbox_string",b"nbox_string","source",b"source","target",b"target","type",b"type"]) -> None: ...

    NODES_FIELD_NUMBER: builtins.int
    EDGES_FIELD_NUMBER: builtins.int
    @property
    def nodes(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Node]: ...
    @property
    def edges(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Flowchart.Edge]: ...
    def __init__(self,
        *,
        nodes: typing.Optional[typing.Mapping[typing.Text, global___Node]] = ...,
        edges: typing.Optional[typing.Mapping[typing.Text, global___Flowchart.Edge]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["edges",b"edges","nodes",b"nodes"]) -> None: ...
global___Flowchart = Flowchart

class Node(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class Info(google.protobuf.message.Message):
        """
        Node info is like:
        'name', # :str
        'code', # :str (base64)
        'nbox_string', # :str
        'lineno', # :int
        'col_offset', # :int
        'end_lineno', # :int
        'end_col_offset', # :int
        'inputs', # :list[Dict[Any, Any]]
        'outputs', # :list[str]
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class Input(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            KWARG_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            kwarg: typing.Text
            """this can be null or string"""

            value: typing.Text
            """this can be float, int, str, list, dict"""

            def __init__(self,
                *,
                kwarg: typing.Optional[typing.Text] = ...,
                value: typing.Text = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal["_kwarg",b"_kwarg","kwarg",b"kwarg"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal["_kwarg",b"_kwarg","kwarg",b"kwarg","value",b"value"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal["_kwarg",b"_kwarg"]) -> typing.Optional[typing_extensions.Literal["kwarg"]]: ...

        NAME_FIELD_NUMBER: builtins.int
        CODE_FIELD_NUMBER: builtins.int
        NBOX_STRING_FIELD_NUMBER: builtins.int
        LINENO_FIELD_NUMBER: builtins.int
        COL_OFFSET_FIELD_NUMBER: builtins.int
        END_LINENO_FIELD_NUMBER: builtins.int
        END_COL_OFFSET_FIELD_NUMBER: builtins.int
        INPUTS_FIELD_NUMBER: builtins.int
        OUTPUTS_FIELD_NUMBER: builtins.int
        CONDITIONS_FIELD_NUMBER: builtins.int
        name: typing.Text
        code: typing.Text
        nbox_string: typing.Text
        lineno: builtins.int
        col_offset: builtins.int
        end_lineno: builtins.int
        end_col_offset: builtins.int
        @property
        def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node.Info.Input]: ...
        @property
        def outputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
        @property
        def conditions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node.Info]: ...
        def __init__(self,
            *,
            name: typing.Text = ...,
            code: typing.Text = ...,
            nbox_string: typing.Text = ...,
            lineno: builtins.int = ...,
            col_offset: builtins.int = ...,
            end_lineno: builtins.int = ...,
            end_col_offset: builtins.int = ...,
            inputs: typing.Optional[typing.Iterable[global___Node.Info.Input]] = ...,
            outputs: typing.Optional[typing.Iterable[typing.Text]] = ...,
            conditions: typing.Optional[typing.Iterable[global___Node.Info]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["code",b"code","col_offset",b"col_offset","conditions",b"conditions","end_col_offset",b"end_col_offset","end_lineno",b"end_lineno","inputs",b"inputs","lineno",b"lineno","name",b"name","nbox_string",b"nbox_string","outputs",b"outputs"]) -> None: ...

    class RunStatus(google.protobuf.message.Message):
        """
        run_status is like:
        "run_status": {
        "start": "2022-01-24T22:44:11.196611",
        "end": "2022-01-24T22:44:11.217020",
        "inputs": { "number": "<class 'float'>" },
        "outputs": { "out_0": "<class 'NoneType'>" }
        },
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class InputsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text
            value: typing.Text
            def __init__(self,
                *,
                key: typing.Text = ...,
                value: typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        class OutputsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text
            value: typing.Text
            def __init__(self,
                *,
                key: typing.Text = ...,
                value: typing.Text = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

        START_FIELD_NUMBER: builtins.int
        END_FIELD_NUMBER: builtins.int
        INPUTS_FIELD_NUMBER: builtins.int
        OUTPUTS_FIELD_NUMBER: builtins.int
        @property
        def start(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
        @property
        def end(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
        @property
        def inputs(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
        @property
        def outputs(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...
        def __init__(self,
            *,
            start: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
            end: typing.Optional[google.protobuf.timestamp_pb2.Timestamp] = ...,
            inputs: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            outputs: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["end",b"end","start",b"start"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["end",b"end","inputs",b"inputs","outputs",b"outputs","start",b"start"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    EXECUTION_INDEX_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    INFO_FIELD_NUMBER: builtins.int
    OPERATOR_FIELD_NUMBER: builtins.int
    NBOX_STRING_FIELD_NUMBER: builtins.int
    RUN_STATUS_FIELD_NUMBER: builtins.int
    OPERATOR_NAME_FIELD_NUMBER: builtins.int
    id: typing.Text
    execution_index: builtins.int
    name: typing.Text
    type: typing.Text
    @property
    def info(self) -> global___Node.Info: ...
    operator: typing.Text
    nbox_string: typing.Text
    @property
    def run_status(self) -> global___Node.RunStatus: ...
    operator_name: typing.Text
    """operator_name, not sure how it differs from operator (field #6)"""

    def __init__(self,
        *,
        id: typing.Text = ...,
        execution_index: builtins.int = ...,
        name: typing.Text = ...,
        type: typing.Text = ...,
        info: typing.Optional[global___Node.Info] = ...,
        operator: typing.Text = ...,
        nbox_string: typing.Text = ...,
        run_status: typing.Optional[global___Node.RunStatus] = ...,
        operator_name: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["info",b"info","run_status",b"run_status"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["execution_index",b"execution_index","id",b"id","info",b"info","name",b"name","nbox_string",b"nbox_string","operator",b"operator","operator_name",b"operator_name","run_status",b"run_status","type",b"type"]) -> None: ...
global___Node = Node
