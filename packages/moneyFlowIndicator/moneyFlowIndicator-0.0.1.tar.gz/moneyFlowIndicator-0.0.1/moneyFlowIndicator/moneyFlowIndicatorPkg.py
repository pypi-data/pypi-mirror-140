{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class mf_movement():\n",
    "    \n",
    "    def __init__(self):\n",
    "        import pandas as pd\n",
    "        self.keeper = 'tbd'\n",
    "        self.num_days = 115 #number of days for rolling average; used in line 60\n",
    "        self.days_back = 200 #number of days to go back from today to collect data. line 152\n",
    "        self.df_summary_table = pd.DataFrame(columns = ['n', 'Static_Profit', 'Dynamic_Profit', 'Dynamic_Over_Static'])\n",
    "        self.n = 0\n",
    "        self.begin_shares = 1\n",
    "    \n",
    "    def obj_to_date(self, df):\n",
    "        import pandas as pd\n",
    "        df['Date'] = pd.to_datetime(df['Date'])\n",
    "        \n",
    "    def cmf(self, df):\n",
    "        df['pre_cmf'] = (df['close_low'] - df['high_close']) * df['Volume']\n",
    "        df['cmf'] = df['pre_cmf'].rolling(self.num_days).sum() / df['Volume'].rolling(self.num_days).sum()\n",
    "        return df\n",
    "    \n",
    "    def differences(self, df):\n",
    "        df['high_low'] = df['High'] - df['Low']\n",
    "        df['open_close'] = df['Open'] - df['Close']\n",
    "        df['open_high'] = df['Open'] - df['High']\n",
    "        df['open_low'] = df['Open'] - df['Low']\n",
    "        df['high_close'] = df['High'] - df['Close']\n",
    "        df['close_low'] = df['Close'] - df['Low']\n",
    "        return df    \n",
    "    \n",
    "    def yahoo_api(self):\n",
    "        import pandas as pd\n",
    "        import yfinance as yf\n",
    "        from datetime import datetime, timedelta\n",
    "\n",
    "        #symbol = input('What is the stock symbol? ')\n",
    "        symbol = 'cost'\n",
    "        #print('The symbol is: ', symbol)\n",
    "        end_date = datetime.now()       \n",
    "        d = timedelta(days = self.days_back) #you are getting self.days_back records (first self.num_days dropped when calculated 20 simple moving average.)\n",
    "        a = end_date - d # goes back self.days_back\n",
    "        end_date = end_date.strftime('%Y-%m-%d') #keeps only the date ... removes the time stamp\n",
    "        begin_date = a.strftime('%Y-%m-%d')\n",
    "\n",
    "        df = yf.download(symbol,\n",
    "        start = begin_date,\n",
    "        end = end_date,\n",
    "        progress = False)\n",
    "        return df\n",
    "        \n",
    "    def buy_sell_signals(self, df1):\n",
    "        # Steps through the dataframe in groups of 206 on record at a time to find the buy sell indicators of the most\n",
    "        # recent day.\n",
    "        # dfBuySell is the dataframe that holds the dates when there is a either a buy or sell signal\n",
    "\n",
    "        mf = mf_movement() #Instantiates the class\n",
    "        import pandas as pd\n",
    "        \n",
    "        df2Temp = df1.copy()\n",
    "\n",
    "        dfBuySell = pd.DataFrame(columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Buy_Sell'])\n",
    "                      \n",
    "        if (df2Temp.iloc[-6, 13] < df2Temp.iloc[-5, 13]\n",
    "            and df2Temp.iloc[-5, 13] < df2Temp.iloc[-4, 13] \n",
    "            and df2Temp.iloc[-4, 13] < df2Temp.iloc[-3, 13]\n",
    "            and df2Temp.iloc[-3, 13] < df2Temp.iloc[-2, 13]\n",
    "            and df2Temp.iloc[-2, 13] > df2Temp.iloc[-1, 13]):\n",
    "\n",
    "            dfBuySellTemp = pd.DataFrame(columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Buys_Sell'])\n",
    "            dfBuySellTemp = df2Temp.iloc[-1, 0:5]\n",
    "            dfBuySellTemp['Buy_Sell'] = 'Sell'\n",
    "            dfBuySell = dfBuySell.append(dfBuySellTemp)\n",
    "            dfBuySell = dfBuySell.reindex()\n",
    "            del dfBuySellTemp\n",
    "\n",
    "        elif (df2Temp.iloc[-6, 13] > df2Temp.iloc[-5, 13]\n",
    "            and df2Temp.iloc[-5, 13] > df2Temp.iloc[-4, 13] \n",
    "            and df2Temp.iloc[-4, 13] > df2Temp.iloc[-3, 13]\n",
    "            and df2Temp.iloc[-3, 13] > df2Temp.iloc[-2, 13]\n",
    "            and df2Temp.iloc[-2, 13] < df2Temp.iloc[-1, 13]):\n",
    "\n",
    "            dfBuySellTemp = pd.DataFrame(columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Buys_Sell'])\n",
    "            dfBuySellTemp = df2Temp.iloc[-1, 0:5]\n",
    "            dfBuySellTemp['Buy_Sell'] = 'Buy'        \n",
    "            dfBuySell = dfBuySell.append(dfBuySellTemp)\n",
    "            dfBuySell = dfBuySell.reindex()\n",
    "            del dfBuySellTemp\n",
    "\n",
    "        else:\n",
    "            dfBuySellTemp = pd.DataFrame(columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Buys_Sell'])\n",
    "            dfBuySellTemp = df2Temp.iloc[-1, 0:5]\n",
    "            dfBuySellTemp['Buy_Sell'] = 'No Action'        \n",
    "            dfBuySell = dfBuySell.append(dfBuySellTemp)\n",
    "            dfBuySell = dfBuySell.reindex()\n",
    "            del dfBuySellTemp\n",
    "\n",
    "        del df2Temp\n",
    "    \n",
    "        return dfBuySell\n",
    "    \n",
    "    def output_signal(self,df1):\n",
    "        date = df1.index[0].strftime('%Y-%m-%d')\n",
    "        print('WARNING: This is for illustration and entertainment purposes ONLY.')\n",
    "        print('Do NOT use this information for anything. This includes but is not limited to any financial ')\n",
    "        print('decisions, and/or stock, option and/or bond purchases, real estate transactions or any other decision. If you' )\n",
    "        print('disregard this warning you do so at your sole risk and you assume all responsibility for the consequences.')\n",
    "        print('By disregarding this warning you also agree that you will indemnify Kokoro Analytics, its officers,')\n",
    "        print('employees, volunteers, vendors and contractors from any damages incured from disregarding this warning.')\n",
    "        \n",
    "        agreement = input('Press enter if you have read and will abide by the \"Warning\" statement above.')\n",
    "        \n",
    "        if not agreement:\n",
    "            print('\\nThe last date is: ', date , '; The signal is: ', df1.iloc[-1, 5])\n",
    "        "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
