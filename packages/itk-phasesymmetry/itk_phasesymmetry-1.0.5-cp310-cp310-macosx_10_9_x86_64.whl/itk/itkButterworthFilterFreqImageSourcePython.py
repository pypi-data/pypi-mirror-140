# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkButterworthFilterFreqImageSourcePython
else:
    import _itkButterworthFilterFreqImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkButterworthFilterFreqImageSourcePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkButterworthFilterFreqImageSourcePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkGenerateImageSourcePython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.stdcomplexPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython

def itkButterworthFilterFreqImageSourceID2_New():
    return itkButterworthFilterFreqImageSourceID2.New()

class itkButterworthFilterFreqImageSourceID2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID2):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2___New_orig__)
    Clone = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_Clone)
    SetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_SetCutoff)
    GetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_GetCutoff)
    SetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_GetOrder)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceID2
    cast = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_cast)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceID2

        Create a new object of the class itkButterworthFilterFreqImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceID2 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_swigregister(itkButterworthFilterFreqImageSourceID2)
itkButterworthFilterFreqImageSourceID2___New_orig__ = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2___New_orig__
itkButterworthFilterFreqImageSourceID2_cast = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID2_cast


def itkButterworthFilterFreqImageSourceID3_New():
    return itkButterworthFilterFreqImageSourceID3.New()

class itkButterworthFilterFreqImageSourceID3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID3):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3___New_orig__)
    Clone = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_Clone)
    SetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_SetCutoff)
    GetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_GetCutoff)
    SetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_GetOrder)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceID3
    cast = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_cast)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceID3

        Create a new object of the class itkButterworthFilterFreqImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceID3 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_swigregister(itkButterworthFilterFreqImageSourceID3)
itkButterworthFilterFreqImageSourceID3___New_orig__ = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3___New_orig__
itkButterworthFilterFreqImageSourceID3_cast = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID3_cast


def itkButterworthFilterFreqImageSourceID4_New():
    return itkButterworthFilterFreqImageSourceID4.New()

class itkButterworthFilterFreqImageSourceID4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceID4):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4___New_orig__)
    Clone = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_Clone)
    SetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_SetCutoff)
    GetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_GetCutoff)
    SetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_GetOrder)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceID4
    cast = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_cast)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceID4

        Create a new object of the class itkButterworthFilterFreqImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceID4 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_swigregister(itkButterworthFilterFreqImageSourceID4)
itkButterworthFilterFreqImageSourceID4___New_orig__ = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4___New_orig__
itkButterworthFilterFreqImageSourceID4_cast = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceID4_cast


def itkButterworthFilterFreqImageSourceIF2_New():
    return itkButterworthFilterFreqImageSourceIF2.New()

class itkButterworthFilterFreqImageSourceIF2(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF2):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_Clone)
    SetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_SetCutoff)
    GetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_GetCutoff)
    SetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_SetOrder)
    GetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_GetOrder)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceIF2
    cast = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_cast)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceIF2

        Create a new object of the class itkButterworthFilterFreqImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceIF2 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_swigregister(itkButterworthFilterFreqImageSourceIF2)
itkButterworthFilterFreqImageSourceIF2___New_orig__ = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2___New_orig__
itkButterworthFilterFreqImageSourceIF2_cast = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF2_cast


def itkButterworthFilterFreqImageSourceIF3_New():
    return itkButterworthFilterFreqImageSourceIF3.New()

class itkButterworthFilterFreqImageSourceIF3(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF3):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_Clone)
    SetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_SetCutoff)
    GetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_GetCutoff)
    SetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_SetOrder)
    GetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_GetOrder)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceIF3
    cast = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_cast)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceIF3

        Create a new object of the class itkButterworthFilterFreqImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceIF3 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_swigregister(itkButterworthFilterFreqImageSourceIF3)
itkButterworthFilterFreqImageSourceIF3___New_orig__ = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3___New_orig__
itkButterworthFilterFreqImageSourceIF3_cast = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF3_cast


def itkButterworthFilterFreqImageSourceIF4_New():
    return itkButterworthFilterFreqImageSourceIF4.New()

class itkButterworthFilterFreqImageSourceIF4(itk.itkGenerateImageSourcePython.itkGenerateImageSourceIF4):
    r"""Proxy of C++ itkButterworthFilterFreqImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_Clone)
    SetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_SetCutoff)
    GetCutoff = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_GetCutoff)
    SetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_SetOrder)
    GetOrder = _swig_new_instance_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_GetOrder)
    __swig_destroy__ = _itkButterworthFilterFreqImageSourcePython.delete_itkButterworthFilterFreqImageSourceIF4
    cast = _swig_new_static_method(_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_cast)

    def New(*args, **kargs):
        """New() -> itkButterworthFilterFreqImageSourceIF4

        Create a new object of the class itkButterworthFilterFreqImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkButterworthFilterFreqImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkButterworthFilterFreqImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkButterworthFilterFreqImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkButterworthFilterFreqImageSourceIF4 in _itkButterworthFilterFreqImageSourcePython:
_itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_swigregister(itkButterworthFilterFreqImageSourceIF4)
itkButterworthFilterFreqImageSourceIF4___New_orig__ = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4___New_orig__
itkButterworthFilterFreqImageSourceIF4_cast = _itkButterworthFilterFreqImageSourcePython.itkButterworthFilterFreqImageSourceIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def butterworth_filter_freq_image_source(*args,  cutoff: float=..., order: float=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for ButterworthFilterFreqImageSource"""
    import itk

    kwarg_typehints = { 'cutoff':cutoff,'order':order,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.ButterworthFilterFreqImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def butterworth_filter_freq_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.PhaseSymmetry.ButterworthFilterFreqImageSource
    butterworth_filter_freq_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    butterworth_filter_freq_image_source.__doc__ = filter_object.__doc__




