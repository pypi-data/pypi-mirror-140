# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSinusoidImageSourcePython
else:
    import _itkSinusoidImageSourcePython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSinusoidImageSourcePython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSinusoidImageSourcePython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkParametricImageSourcePython
import itk.itkGenerateImageSourcePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkArrayPython

def itkSinusoidImageSourceID2_New():
    return itkSinusoidImageSourceID2.New()

class itkSinusoidImageSourceID2(itk.itkParametricImageSourcePython.itkParametricImageSourceID2):
    r"""Proxy of C++ itkSinusoidImageSourceID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_GetFrequency)
    __swig_destroy__ = _itkSinusoidImageSourcePython.delete_itkSinusoidImageSourceID2
    cast = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_cast)

    def New(*args, **kargs):
        """New() -> itkSinusoidImageSourceID2

        Create a new object of the class itkSinusoidImageSourceID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidImageSourceID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidImageSourceID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidImageSourceID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidImageSourceID2 in _itkSinusoidImageSourcePython:
_itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_swigregister(itkSinusoidImageSourceID2)
itkSinusoidImageSourceID2___New_orig__ = _itkSinusoidImageSourcePython.itkSinusoidImageSourceID2___New_orig__
itkSinusoidImageSourceID2_cast = _itkSinusoidImageSourcePython.itkSinusoidImageSourceID2_cast


def itkSinusoidImageSourceID3_New():
    return itkSinusoidImageSourceID3.New()

class itkSinusoidImageSourceID3(itk.itkParametricImageSourcePython.itkParametricImageSourceID3):
    r"""Proxy of C++ itkSinusoidImageSourceID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_GetFrequency)
    __swig_destroy__ = _itkSinusoidImageSourcePython.delete_itkSinusoidImageSourceID3
    cast = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_cast)

    def New(*args, **kargs):
        """New() -> itkSinusoidImageSourceID3

        Create a new object of the class itkSinusoidImageSourceID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidImageSourceID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidImageSourceID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidImageSourceID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidImageSourceID3 in _itkSinusoidImageSourcePython:
_itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_swigregister(itkSinusoidImageSourceID3)
itkSinusoidImageSourceID3___New_orig__ = _itkSinusoidImageSourcePython.itkSinusoidImageSourceID3___New_orig__
itkSinusoidImageSourceID3_cast = _itkSinusoidImageSourcePython.itkSinusoidImageSourceID3_cast


def itkSinusoidImageSourceID4_New():
    return itkSinusoidImageSourceID4.New()

class itkSinusoidImageSourceID4(itk.itkParametricImageSourcePython.itkParametricImageSourceID4):
    r"""Proxy of C++ itkSinusoidImageSourceID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_GetFrequency)
    __swig_destroy__ = _itkSinusoidImageSourcePython.delete_itkSinusoidImageSourceID4
    cast = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_cast)

    def New(*args, **kargs):
        """New() -> itkSinusoidImageSourceID4

        Create a new object of the class itkSinusoidImageSourceID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidImageSourceID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidImageSourceID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidImageSourceID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidImageSourceID4 in _itkSinusoidImageSourcePython:
_itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_swigregister(itkSinusoidImageSourceID4)
itkSinusoidImageSourceID4___New_orig__ = _itkSinusoidImageSourcePython.itkSinusoidImageSourceID4___New_orig__
itkSinusoidImageSourceID4_cast = _itkSinusoidImageSourcePython.itkSinusoidImageSourceID4_cast


def itkSinusoidImageSourceIF2_New():
    return itkSinusoidImageSourceIF2.New()

class itkSinusoidImageSourceIF2(itk.itkParametricImageSourcePython.itkParametricImageSourceIF2):
    r"""Proxy of C++ itkSinusoidImageSourceIF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_GetFrequency)
    __swig_destroy__ = _itkSinusoidImageSourcePython.delete_itkSinusoidImageSourceIF2
    cast = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_cast)

    def New(*args, **kargs):
        """New() -> itkSinusoidImageSourceIF2

        Create a new object of the class itkSinusoidImageSourceIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidImageSourceIF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidImageSourceIF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidImageSourceIF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidImageSourceIF2 in _itkSinusoidImageSourcePython:
_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_swigregister(itkSinusoidImageSourceIF2)
itkSinusoidImageSourceIF2___New_orig__ = _itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2___New_orig__
itkSinusoidImageSourceIF2_cast = _itkSinusoidImageSourcePython.itkSinusoidImageSourceIF2_cast


def itkSinusoidImageSourceIF3_New():
    return itkSinusoidImageSourceIF3.New()

class itkSinusoidImageSourceIF3(itk.itkParametricImageSourcePython.itkParametricImageSourceIF3):
    r"""Proxy of C++ itkSinusoidImageSourceIF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_GetFrequency)
    __swig_destroy__ = _itkSinusoidImageSourcePython.delete_itkSinusoidImageSourceIF3
    cast = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_cast)

    def New(*args, **kargs):
        """New() -> itkSinusoidImageSourceIF3

        Create a new object of the class itkSinusoidImageSourceIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidImageSourceIF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidImageSourceIF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidImageSourceIF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidImageSourceIF3 in _itkSinusoidImageSourcePython:
_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_swigregister(itkSinusoidImageSourceIF3)
itkSinusoidImageSourceIF3___New_orig__ = _itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3___New_orig__
itkSinusoidImageSourceIF3_cast = _itkSinusoidImageSourcePython.itkSinusoidImageSourceIF3_cast


def itkSinusoidImageSourceIF4_New():
    return itkSinusoidImageSourceIF4.New()

class itkSinusoidImageSourceIF4(itk.itkParametricImageSourcePython.itkParametricImageSourceIF4):
    r"""Proxy of C++ itkSinusoidImageSourceIF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4___New_orig__)
    Clone = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_Clone)
    SetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_SetPhaseOffset)
    GetPhaseOffset = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_GetPhaseOffset)
    SetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_SetFrequency)
    GetFrequency = _swig_new_instance_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_GetFrequency)
    __swig_destroy__ = _itkSinusoidImageSourcePython.delete_itkSinusoidImageSourceIF4
    cast = _swig_new_static_method(_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_cast)

    def New(*args, **kargs):
        """New() -> itkSinusoidImageSourceIF4

        Create a new object of the class itkSinusoidImageSourceIF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSinusoidImageSourceIF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSinusoidImageSourceIF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSinusoidImageSourceIF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSinusoidImageSourceIF4 in _itkSinusoidImageSourcePython:
_itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_swigregister(itkSinusoidImageSourceIF4)
itkSinusoidImageSourceIF4___New_orig__ = _itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4___New_orig__
itkSinusoidImageSourceIF4_cast = _itkSinusoidImageSourcePython.itkSinusoidImageSourceIF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def sinusoid_image_source(*args,  phase_offset: float=..., frequency: Sequence[float]=..., parameters: Union[Sequence[float], Sequence[float]]=..., use_reference_image: bool=..., size: Sequence[int]=..., spacing: Sequence[float]=..., origin: Sequence[float]=..., direction=..., start_index: Sequence[int]=..., output_parameters_from_image: itkt.ImageBase=..., reference_image: itkt.ImageBase=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for SinusoidImageSource"""
    import itk

    kwarg_typehints = { 'phase_offset':phase_offset,'frequency':frequency,'parameters':parameters,'use_reference_image':use_reference_image,'size':size,'spacing':spacing,'origin':origin,'direction':direction,'start_index':start_index,'output_parameters_from_image':output_parameters_from_image,'reference_image':reference_image }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.SinusoidImageSource.New(*args, **kwargs)
    return instance.__internal_call__()

def sinusoid_image_source_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.PhaseSymmetry.SinusoidImageSource
    sinusoid_image_source.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sinusoid_image_source.__doc__ = filter_object.__doc__




