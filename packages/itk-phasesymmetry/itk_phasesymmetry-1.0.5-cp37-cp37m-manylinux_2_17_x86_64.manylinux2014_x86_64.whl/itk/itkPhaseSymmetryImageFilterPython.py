# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")


from . import _PhaseSymmetryPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPhaseSymmetryImageFilterPython
else:
    import _itkPhaseSymmetryImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPhaseSymmetryImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPhaseSymmetryImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.stdcomplexPython
import itk.ITKCommonBasePython
import itk.itkImagePython
import itk.itkFixedArrayPython
import itk.itkRGBAPixelPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageRegionPython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkArray2DPython

def itkPhaseSymmetryImageFilterID2ID2_New():
    return itkPhaseSymmetryImageFilterID2ID2.New()

class itkPhaseSymmetryImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""Proxy of C++ itkPhaseSymmetryImageFilterID2ID2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_Clone)
    SetWavelengths = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_SetWavelengths)
    SetOrientations = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_SetOrientations)
    SetAngleBandwidth = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_SetAngleBandwidth)
    SetSigma = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_SetSigma)
    SetNoiseThreshold = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_SetNoiseThreshold)
    SetPolarity = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_SetPolarity)
    Initialize = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_Initialize)
    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_ImageDimensionCheck
    
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterID2ID2
    cast = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterID2ID2

        Create a new object of the class itkPhaseSymmetryImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseSymmetryImageFilterID2ID2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseSymmetryImageFilterID2ID2 in _itkPhaseSymmetryImageFilterPython:
_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_swigregister(itkPhaseSymmetryImageFilterID2ID2)
itkPhaseSymmetryImageFilterID2ID2___New_orig__ = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2___New_orig__
itkPhaseSymmetryImageFilterID2ID2_cast = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID2ID2_cast


def itkPhaseSymmetryImageFilterID3ID3_New():
    return itkPhaseSymmetryImageFilterID3ID3.New()

class itkPhaseSymmetryImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""Proxy of C++ itkPhaseSymmetryImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_Clone)
    SetWavelengths = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_SetWavelengths)
    SetOrientations = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_SetOrientations)
    SetAngleBandwidth = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_SetAngleBandwidth)
    SetSigma = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_SetSigma)
    SetNoiseThreshold = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_SetNoiseThreshold)
    SetPolarity = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_SetPolarity)
    Initialize = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_Initialize)
    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_ImageDimensionCheck
    
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterID3ID3
    cast = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterID3ID3

        Create a new object of the class itkPhaseSymmetryImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseSymmetryImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseSymmetryImageFilterID3ID3 in _itkPhaseSymmetryImageFilterPython:
_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_swigregister(itkPhaseSymmetryImageFilterID3ID3)
itkPhaseSymmetryImageFilterID3ID3___New_orig__ = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3___New_orig__
itkPhaseSymmetryImageFilterID3ID3_cast = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID3ID3_cast


def itkPhaseSymmetryImageFilterID4ID4_New():
    return itkPhaseSymmetryImageFilterID4ID4.New()

class itkPhaseSymmetryImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""Proxy of C++ itkPhaseSymmetryImageFilterID4ID4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_Clone)
    SetWavelengths = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_SetWavelengths)
    SetOrientations = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_SetOrientations)
    SetAngleBandwidth = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_SetAngleBandwidth)
    SetSigma = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_SetSigma)
    SetNoiseThreshold = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_SetNoiseThreshold)
    SetPolarity = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_SetPolarity)
    Initialize = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_Initialize)
    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_ImageDimensionCheck
    
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterID4ID4
    cast = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterID4ID4

        Create a new object of the class itkPhaseSymmetryImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseSymmetryImageFilterID4ID4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseSymmetryImageFilterID4ID4 in _itkPhaseSymmetryImageFilterPython:
_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_swigregister(itkPhaseSymmetryImageFilterID4ID4)
itkPhaseSymmetryImageFilterID4ID4___New_orig__ = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4___New_orig__
itkPhaseSymmetryImageFilterID4ID4_cast = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterID4ID4_cast


def itkPhaseSymmetryImageFilterIF2IF2_New():
    return itkPhaseSymmetryImageFilterIF2IF2.New()

class itkPhaseSymmetryImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""Proxy of C++ itkPhaseSymmetryImageFilterIF2IF2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_Clone)
    SetWavelengths = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetWavelengths)
    SetOrientations = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetOrientations)
    SetAngleBandwidth = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetAngleBandwidth)
    SetSigma = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetSigma)
    SetNoiseThreshold = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetNoiseThreshold)
    SetPolarity = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_SetPolarity)
    Initialize = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_Initialize)
    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_ImageDimensionCheck
    
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterIF2IF2
    cast = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterIF2IF2

        Create a new object of the class itkPhaseSymmetryImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseSymmetryImageFilterIF2IF2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseSymmetryImageFilterIF2IF2 in _itkPhaseSymmetryImageFilterPython:
_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_swigregister(itkPhaseSymmetryImageFilterIF2IF2)
itkPhaseSymmetryImageFilterIF2IF2___New_orig__ = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2___New_orig__
itkPhaseSymmetryImageFilterIF2IF2_cast = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF2IF2_cast


def itkPhaseSymmetryImageFilterIF3IF3_New():
    return itkPhaseSymmetryImageFilterIF3IF3.New()

class itkPhaseSymmetryImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""Proxy of C++ itkPhaseSymmetryImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_Clone)
    SetWavelengths = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetWavelengths)
    SetOrientations = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetOrientations)
    SetAngleBandwidth = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetAngleBandwidth)
    SetSigma = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetSigma)
    SetNoiseThreshold = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetNoiseThreshold)
    SetPolarity = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_SetPolarity)
    Initialize = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_Initialize)
    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_ImageDimensionCheck
    
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterIF3IF3
    cast = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterIF3IF3

        Create a new object of the class itkPhaseSymmetryImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseSymmetryImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseSymmetryImageFilterIF3IF3 in _itkPhaseSymmetryImageFilterPython:
_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_swigregister(itkPhaseSymmetryImageFilterIF3IF3)
itkPhaseSymmetryImageFilterIF3IF3___New_orig__ = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3___New_orig__
itkPhaseSymmetryImageFilterIF3IF3_cast = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF3IF3_cast


def itkPhaseSymmetryImageFilterIF4IF4_New():
    return itkPhaseSymmetryImageFilterIF4IF4.New()

class itkPhaseSymmetryImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""Proxy of C++ itkPhaseSymmetryImageFilterIF4IF4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_Clone)
    SetWavelengths = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_SetWavelengths)
    SetOrientations = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_SetOrientations)
    SetAngleBandwidth = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_SetAngleBandwidth)
    SetSigma = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_SetSigma)
    SetNoiseThreshold = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_SetNoiseThreshold)
    SetPolarity = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_SetPolarity)
    Initialize = _swig_new_instance_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_Initialize)
    ImageDimensionCheck = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_ImageDimensionCheck
    
    __swig_destroy__ = _itkPhaseSymmetryImageFilterPython.delete_itkPhaseSymmetryImageFilterIF4IF4
    cast = _swig_new_static_method(_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkPhaseSymmetryImageFilterIF4IF4

        Create a new object of the class itkPhaseSymmetryImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPhaseSymmetryImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPhaseSymmetryImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPhaseSymmetryImageFilterIF4IF4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPhaseSymmetryImageFilterIF4IF4 in _itkPhaseSymmetryImageFilterPython:
_itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_swigregister(itkPhaseSymmetryImageFilterIF4IF4)
itkPhaseSymmetryImageFilterIF4IF4___New_orig__ = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4___New_orig__
itkPhaseSymmetryImageFilterIF4IF4_cast = _itkPhaseSymmetryImageFilterPython.itkPhaseSymmetryImageFilterIF4IF4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def phase_symmetry_image_filter(*args: itkt.ImageLike,  wavelengths=..., orientations=..., angle_bandwidth: float=..., sigma: float=..., noise_threshold: float=..., polarity: int=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for PhaseSymmetryImageFilter"""
    import itk

    kwarg_typehints = { 'wavelengths':wavelengths,'orientations':orientations,'angle_bandwidth':angle_bandwidth,'sigma':sigma,'noise_threshold':noise_threshold,'polarity':polarity }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.PhaseSymmetryImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def phase_symmetry_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.PhaseSymmetry.PhaseSymmetryImageFilter
    phase_symmetry_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    phase_symmetry_image_filter.__doc__ = filter_object.__doc__




