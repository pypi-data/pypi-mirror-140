"""
richcat.modules._ext2alias_dic_generator
----------------------------------------
Dictionary for convert extension to alias.
This file is generated by itself. Every Time you change something on this dictionary, run this script to update it.
"""

from pygments.lexers import get_all_lexers

DIC_LEXER_WC = {
    'isa': 'amdgpu',
    'apl': 'apl',
    'aplf': 'apl',
    'aplo': 'apl',
    'apln': 'apl',
    'aplc': 'apl',
    'apli': 'apl',
    'dyalog': 'apl',
    'abnf': 'abnf',
    'as': 'actionscript',
    'adb': 'ada',
    'ads': 'ada',
    'ada': 'ada',
    'adl': 'adl',
    'adls': 'adl',
    'adlf': 'adl',
    'adlx': 'adl',
    'agda': 'agda',
    'aheui': 'aheui',
    'als': 'alloy',
    'at': 'ambienttalk',
    'run': 'ampl',
    'ng2': 'html+ng2',
    'G': 'antlr-ruby',
    'g': 'gap',
    'applescript': 'applescript',
    'ino': 'arduino',
    'arw': 'arrow',
    'asc': 'asc',
    'pem': 'asc',
    'aj': 'aspectj',
    'asy': 'asymptote',
    'aug': 'augeas',
    'au3': 'autoit',
    'ahk': 'autohotkey',
    'ahkl': 'autohotkey',
    'awk': 'awk',
    'bbc': 'bbcbasic',
    'bc': 'bc',
    'bst': 'bst',
    'bare': 'bare',
    'sh': 'bash',
    'ksh': 'bash',
    'bash': 'bash',
    'ebuild': 'bash',
    'eclass': 'bash',
    'exheres-0': 'bash',
    'exlib': 'bash',
    'zsh': 'bash',
    'sh-session': 'console',
    'shell-session': 'console',
    'bat': 'batch',
    'cmd': 'batch',
    'feature': 'gherkin',
    'befunge': 'befunge',
    'bib': 'bibtex',
    'bb': 'blitzbasic',
    'decls': 'blitzbasic',
    'bmx': 'blitzmax',
    'bnf': 'bnf',
    'boa': 'boa',
    'boo': 'boo',
    'bpl': 'boogie',
    'bf': 'brainfuck',
    'b': 'limbo',
    'bug': 'jags',
    'camkes': 'camkes',
    'idl4': 'camkes',
    'c': 'c',
    'h': 'objective-c',
    'idc': 'c',
    'x[bp]m': 'c',
    'cmake': 'cmake',
    'c-objdump': 'c-objdump',
    'cpsa': 'cpsa',
    'aspx': 'aspx-vb',
    'asax': 'aspx-vb',
    'ascx': 'aspx-vb',
    'ashx': 'aspx-vb',
    'asmx': 'aspx-vb',
    'axd': 'aspx-vb',
    'cs': 'csharp',
    's': 'gas',
    'cadl': 'cadl',
    'cdl': 'capdl',
    'capnp': 'capnp',
    'bas': 'vb.net',
    'cddl': 'cddl',
    'ceylon': 'ceylon',
    'cf': 'cfengine3',
    'chai': 'chaiscript',
    'chpl': 'chapel',
    'ci': 'charmci',
    'tmpl': 'cheetah',
    'spt': 'cheetah',
    'cirru': 'cirru',
    'clay': 'clay',
    'icl': 'clean',
    'dcl': 'clean',
    'clj': 'clojure',
    'cljs': 'clojurescript',
    'cbl': 'cobolfree',
    'CBL': 'cobolfree',
    'cob': 'cobol',
    'COB': 'cobol',
    'cpy': 'cobol',
    'CPY': 'cobol',
    'coffee': 'coffeescript',
    'cfc': 'cfc',
    'cfm': 'cfm',
    'cfml': 'cfm',
    'cl': 'common-lisp',
    'lisp': 'common-lisp',
    'cp': 'cpp',
    'cps': 'componentpascal',
    'v': 'verilog',
    'cpp': 'cpp',
    'hpp': 'cpp',
    'c++': 'cpp',
    'h++': 'cpp',
    'cc': 'cpp',
    'hh': 'objective-c++',
    'cxx': 'cpp',
    'hxx': 'cpp',
    'C': 'cpp',
    'H': 'cpp',
    'CPP': 'cpp',
    'cpp-objdump': 'cpp-objdump',
    'c++-objdump': 'cpp-objdump',
    'cxx-objdump': 'cpp-objdump',
    'crmsh': 'crmsh',
    'pcmk': 'crmsh',
    'croc': 'croc',
    'cry': 'cryptol',
    'cr': 'cr',
    'csd': 'csound-document',
    'orc': 'csound',
    'udo': 'csound',
    'sco': 'csound-score',
    'css': 'css',
    'cu': 'cuda',
    'cuh': 'cuda',
    'cyp': 'cypher',
    'cypher': 'cypher',
    'pyx': 'cython',
    'pxd': 'cython',
    'pxi': 'cython',
    'd': 'd',
    'di': 'd',
    'd-objdump': 'd-objdump',
    'dpatch': 'dpatch',
    'darcspatch': 'dpatch',
    'dart': 'dart',
    'dasm16': 'dasm16',
    'dasm': 'dasm16',
    'pas': 'delphi',
    'dpr': 'delphi',
    'dts': 'devicetree',
    'dtsi': 'devicetree',
    'dg': 'dg',
    'diff': 'diff',
    'patch': 'diff',
    'docker': 'docker',
    'dtd': 'dtd',
    'duel': 'duel',
    'jbst': 'duel',
    'dylan-console': 'dylan-console',
    'dylan': 'dylan',
    'dyl': 'dylan',
    'intr': 'dylan',
    'lid': 'dylan-lid',
    'hdp': 'dylan-lid',
    'ecl': 'prolog',
    'ec': 'ec',
    'eh': 'ec',
    'eg': 'earl-grey',
    'ezt': 'easytrieve',
    'mac': 'maxima',
    'ebnf': 'ebnf',
    'e': 'eiffel',
    'ex': 'elixir',
    'eex': 'elixir',
    'exs': 'elixir',
    'leex': 'elixir',
    'elm': 'elm',
    'elpi': 'elpi',
    'el': 'emacs-lisp',
    'eml': 'email',
    'erl': 'erlang',
    'hrl': 'erlang',
    'es': 'erlang',
    'escript': 'erlang',
    'erl-sh': 'erl',
    'html': 'html',
    'evoque': 'evoque',
    'xml': 'xml',
    'exec': 'execline',
    'n': 'nemerle',
    'fs': 'forth',
    'fsi': 'fsharp',
    'fst': 'fstar',
    'fsti': 'fstar',
    'factor': 'factor',
    'fy': 'fancy',
    'fancypack': 'fancy',
    'fan': 'fan',
    'flx': 'felix',
    'flxh': 'felix',
    'fnl': 'fennel',
    'fish': 'fish',
    'load': 'fish',
    'flo': 'floscript',
    'frt': 'forth',
    'f': 'fortranfixed',
    'F': 'fortranfixed',
    'f03': 'fortran',
    'f90': 'fortran',
    'F03': 'fortran',
    'F90': 'fortran',
    'PRG': 'foxpro',
    'prg': 'foxpro',
    'edp': 'freefem',
    'fut': 'futhark',
    'gd': 'gdscript',
    'gi': 'gap',
    'gap': 'gap',
    'vert': 'glsl',
    'frag': 'glsl',
    'geo': 'glsl',
    'gsql': 'gsql',
    'S': 'splus',
    'gcode': 'gcode',
    'kid': 'genshi',
    'pot': 'pot',
    'po': 'pot',
    'plot': 'gnuplot',
    'plt': 'gnuplot',
    'go': 'go',
    'golo': 'golo',
    'gdc': 'gooddata-cl',
    'gs': 'gosu',
    'gsx': 'gosu',
    'gsp': 'gosu',
    'vark': 'gosu',
    'gst': 'gst',
    'gv': 'graphviz',
    'dot': 'graphviz',
    '[1-9]': 'groff',
    'man': 'groff',
    '1p': 'groff',
    '3pm': 'groff',
    'groovy': 'groovy',
    'gradle': 'groovy',
    'hlsl': 'hlsl',
    'hlsli': 'hlsl',
    'haml': 'haml',
    'handlebars': 'html+handlebars',
    'hbs': 'html+handlebars',
    'hs': 'haskell',
    'hx': 'haxe',
    'hxsl': 'haxe',
    'hsail': 'hsail',
    'htm': 'html',
    'xhtml': 'html',
    'xslt': 'xslt',
    'phtml': 'html+php',
    'hxml': 'haxeml',
    'hy': 'hybris',
    'hyb': 'hybris',
    'pro': 'prolog',
    'icon': 'icon',
    'ICON': 'icon',
    'idr': 'idris',
    'ipf': 'igor',
    'inf': 'ini',
    'i6t': 'i6t',
    'ni': 'inform7',
    'i7x': 'inform7',
    'ini': 'ini',
    'cfg': 'ini',
    'service': 'ini',
    'socket': 'ini',
    'device': 'ini',
    'mount': 'ini',
    'automount': 'ini',
    'swap': 'ini',
    'target': 'ini',
    'path': 'ini',
    'timer': 'ini',
    'slice': 'ini',
    'scope': 'ini',
    'io': 'io',
    'ik': 'ioke',
    'weechatlog': 'irc',
    'thy': 'isabelle',
    'ijs': 'j',
    'jslt': 'jslt',
    'jag': 'jags',
    'j': 'objective-j',
    'java': 'java',
    'js': 'javascript',
    'jsm': 'javascript',
    'mjs': 'javascript',
    'cjs': 'javascript',
    'jcl': 'jcl',
    'jsgf': 'jsgf',
    'jsonld': 'jsonld',
    'json': 'json',
    'jsp': 'jsp',
    'jl': 'julia',
    'juttle': 'juttle',
    'kal': 'kal',
    'kmsg': 'kmsg',
    'dmesg': 'kmsg',
    'kk': 'koka',
    'kki': 'koka',
    'kt': 'kotlin',
    'kts': 'kotlin',
    'kn': 'kuin',
    'lsl': 'lsl',
    'lasso': 'lasso',
    'lasso[89]': 'lasso',
    'lean': 'lean',
    'less': 'less',
    'ly': 'lilypond',
    'liquid': 'liquid',
    'lagda': 'literate-agda',
    'lcry': 'literate-cryptol',
    'lhs': 'literate-haskell',
    'lidr': 'literate-idris',
    'ls': 'livescript',
    'll': 'llvm',
    'mir': 'llvm-mir',
    'x': 'logos',
    'xi': 'logos',
    'xm': 'logos',
    'xmi': 'logos',
    'lgt': 'logtalk',
    'logtalk': 'logtalk',
    'lua': 'lua',
    'wlua': 'lua',
    'moo': 'moocode',
    'mak': 'make',
    'mk': 'make',
    'mao': 'mako',
    'maql': 'maql',
    'md': 'markdown',
    'markdown': 'markdown',
    'mask': 'mask',
    'm': 'octave',
    'mhtml': 'mason',
    'mc': 'mason',
    'mi': 'mason',
    'nb': 'mathematica',
    'cdf': 'mathematica',
    'nbp': 'mathematica',
    'ma': 'mathematica',
    'max': 'maxima',
    'ms': 'miniscript',
    'mo': 'modelica',
    'def': 'singularity',
    'mod': 'modula2',
    'monkey': 'monkey',
    'mt': 'monte',
    'moon': 'moonscript',
    'mos': 'mosel',
    'css.in': 'css+mozpreproc',
    'js.in': 'javascript+mozpreproc',
    'xul.in': 'xul+mozpreproc',
    'mq4': 'mql',
    'mq5': 'mql',
    'mqh': 'mql',
    'msc': 'mscgen',
    'mu': 'mupad',
    'mxml': 'mxml',
    'myt': 'myghty',
    'ncl': 'ncl',
    'nsi': 'nsis',
    'nsh': 'nsis',
    'asm': 'tasm',
    'ASM': 'tasm',
    'objdump-intel': 'objdump-nasm',
    'nc': 'nesc',
    'nt': 'nestedtext',
    'lsp': 'newlisp',
    'nl': 'newlisp',
    'kif': 'newlisp',
    'ns2': 'newspeak',
    'nim': 'nimrod',
    'nimrod': 'nimrod',
    'nit': 'nit',
    'nix': 'nixos',
    'smv': 'nusmv',
    'objdump': 'objdump',
    'mm': 'objective-c++',
    'ml': 'ocaml',
    'mli': 'ocaml',
    'mll': 'ocaml',
    'mly': 'ocaml',
    'odin': 'odin',
    'idl': 'omg-idl',
    'pidl': 'omg-idl',
    'ooc': 'ooc',
    'opa': 'opa',
    'p': 'pawn',
    'cls': 'openedge',
    'pan': 'pan',
    'psi': 'parasail',
    'psl': 'parasail',
    'pwn': 'pawn',
    'inc': 'pov',
    'peg': 'peg',
    'pl': 'prolog',
    'pm': 'perl',
    'nqp': 'perl6',
    'p6': 'perl6',
    '6pl': 'perl6',
    'p6l': 'perl6',
    'pl6': 'perl6',
    '6pm': 'perl6',
    'p6m': 'perl6',
    'pm6': 'perl6',
    't': 'tads3',
    'raku': 'perl6',
    'rakumod': 'perl6',
    'rakutest': 'perl6',
    'rakudoc': 'perl6',
    'perl': 'perl',
    'php': 'php',
    'php[345]': 'php',
    'pig': 'pig',
    'pike': 'pike',
    'pmod': 'pike',
    'pc': 'pkgconfig',
    'ptls': 'pointless',
    'pony': 'pony',
    'ps': 'postscript',
    'eps': 'postscript',
    'pov': 'pov',
    'ps1': 'powershell',
    'psm1': 'powershell',
    'praat': 'praat',
    'proc': 'praat',
    'psc': 'praat',
    'prolog': 'prolog',
    'promql': 'promql',
    'properties': 'properties',
    'proto': 'protobuf',
    'pug': 'pug',
    'jade': 'pug',
    'pp': 'puppet',
    'pypylog': 'pypylog',
    'py2tb': 'py2tb',
    'py': 'python',
    'pyw': 'python',
    'jy': 'python',
    'sage': 'python',
    'sc': 'supercollider',
    'bzl': 'python',
    'tac': 'python',
    'pytb': 'pytb',
    'py3tb': 'pytb',
    'BAS': 'qbasic',
    'qvto': 'qvto',
    'qml': 'qml',
    'qbs': 'qml',
    'Rout': 'rconsole',
    'rnc': 'rng-compact',
    'spec': 'spec',
    'rkt': 'racket',
    'rktd': 'racket',
    'rktl': 'racket',
    'rl': 'ragel-ruby',
    'Rd': 'rd',
    're': 'reasonml',
    'rei': 'reasonml',
    'r': 'rebol',
    'r3': 'rebol',
    'reb': 'rebol',
    'red': 'red',
    'reds': 'red',
    'cw': 'redcode',
    'reg': 'registry',
    'rexx': 'rexx',
    'rex': 'rexx',
    'rx': 'rexx',
    'arexx': 'rexx',
    'rhtml': 'rhtml',
    'ride': 'ride',
    'rita': 'rita',
    'graph': 'roboconf-graph',
    'instances': 'roboconf-instances',
    'robot': 'robotframework',
    'rql': 'rql',
    'rsl': 'rsl',
    'rst': 'restructuredtext',
    'rest': 'restructuredtext',
    'rts': 'trafficscript',
    'rb': 'ruby',
    'rbw': 'ruby',
    'rake': 'ruby',
    'gemspec': 'ruby',
    'rbx': 'ruby',
    'duby': 'ruby',
    'rs': 'rust',
    'rs.in': 'rust',
    'SAS': 'sas',
    'sas': 'sas',
    'R': 'splus',
    'sml': 'sml',
    'sig': 'sml',
    'fun': 'sml',
    'sarl': 'sarl',
    'sass': 'sass',
    'savi': 'savi',
    'scala': 'scala',
    'scaml': 'scaml',
    'scd': 'supercollider',
    'scdoc': 'scdoc',
    'scm': 'scheme',
    'ss': 'scheme',
    'sci': 'scilab',
    'sce': 'scilab',
    'tst': 'scilab',
    'scss': 'scss',
    'sed': 'sed',
    '[gs]sed': 'sed',
    'shex': 'shexc',
    'shen': 'shen',
    'siv': 'sieve',
    'sieve': 'sieve',
    'sil': 'silver',
    'vpr': 'silver',
    'sla': 'slash',
    'slim': 'slim',
    'sl': 'slurm',
    'smali': 'smali',
    'st': 'smalltalk',
    'sgf': 'sgf',
    'tpl': 'smarty',
    'smithy': 'smithy',
    'snobol': 'snobol',
    'sbl': 'snowball',
    'sol': 'solidity',
    'aes': 'sophia',
    'sp': 'sp',
    'rq': 'sparql',
    'sparql': 'sparql',
    'spice': 'spice',
    'sql': 'tsql',
    'sqlite3-console': 'sqlite3',
    'ssp': 'ssp',
    'stan': 'stan',
    'do': 'stata',
    'ado': 'stata',
    'swift': 'swift',
    'swg': 'swig',
    'i': 'swig',
    'sv': 'systemverilog',
    'svh': 'systemverilog',
    'tap': 'tap',
    'tnt': 'tnt',
    'toml': 'toml',
    'tasm': 'tasm',
    'tcl': 'tcl',
    'rvt': 'tcl',
    'tcsh': 'tcsh',
    'csh': 'tcsh',
    'tea': 'tea',
    'teal': 'teal',
    'ttl': 'turtle',
    'tf': 'terraform',
    'tex': 'tex',
    'aux': 'tex',
    'toc': 'tex',
    'txt': 'text',
    'ti': 'ti',
    'thrift': 'thrift',
    'tid': 'tid',
    'todotxt': 'todotxt',
    'treetop': 'treetop',
    'tt': 'treetop',
    'twig': 'html+twig',
    'ts': 'typescript',
    'typoscript': 'typoscript',
    'u': 'urbiscript',
    'u1': 'ucode',
    'u2': 'ucode',
    'icn': 'unicon',
    'usd': 'usd',
    'usda': 'usd',
    'vbs': 'vbscript',
    'VBS': 'vbscript',
    'vcl': 'vcl',
    'rpf': 'vgl',
    'vala': 'vala',
    'vapi': 'vala',
    'vb': 'vb.net',
    'vm': 'velocity',
    'fhtml': 'velocity',
    'vhdl': 'vhdl',
    'vhd': 'vhdl',
    'vim': 'vim',
    'wdiff': 'wdiff',
    'wat': 'wast',
    'wast': 'wast',
    'webidl': 'webidl',
    'whiley': 'whiley',
    'x10': 'x10',
    'xqy': 'xquery',
    'xquery': 'xquery',
    'xq': 'xquery',
    'xql': 'xquery',
    'xqm': 'xquery',
    'xsl': 'xslt',
    'rss': 'xml',
    'xsd': 'xml',
    'wsdl': 'xml',
    'wsf': 'xml',
    'xpl': 'xslt',
    'xtend': 'xtend',
    'xtm': 'extempore',
    'sls': 'yaml+jinja',
    'yaml': 'yaml',
    'yml': 'yaml',
    'yang': 'yang',
    'zeek': 'zeek',
    'bro': 'zeek',
    'zep': 'zephir',
    'zig': 'zig',
    'ans': 'ansys',
}

DIC_LEXER_CONST = {
    '.htaccess': 'apacheconf',
    'apache.conf': 'apacheconf',
    'apache2.conf': 'apacheconf',
    'id_dsa': 'asc',
    'id_ecdsa': 'asc',
    'id_ecdsa_sk': 'asc',
    'id_ed25519': 'asc',
    'id_ed25519_sk': 'asc',
    'id_rsa': 'asc',
    '.bashrc': 'bash',
    'bashrc': 'bash',
    '.bash_*': 'bash',
    'bash_*': 'bash',
    'zshrc': 'bash',
    '.zshrc': 'bash',
    '.kshrc': 'bash',
    'kshrc': 'bash',
    'PKGBUILD': 'bash',
    'CMakeLists.txt': 'cmake',
    'control': 'debcontrol',
    'Dockerfile': 'docker',
    '.editorconfig': 'ini',
    'Pipfile.lock': 'json',
    'Kconfig*': 'kconfig',
    '*Config.in*': 'kconfig',
    'external.in*': 'kconfig',
    'standard-modules.in': 'kconfig',
    'lighttpd.conf': 'lighttpd',
    'Makefile': 'make',
    'makefile': 'make',
    'Makefile.*': 'make',
    'GNUmakefile': 'make',
    'autohandler': 'mason',
    'dhandler': 'mason',
    'meson.build': 'meson',
    'meson_options.txt': 'meson',
    'autodelegate': 'myghty',
    'nginx.conf': 'nginx',
    'pacman.conf': 'pacmanconf',
    'Procfile': 'procfile',
    'SConstruct': 'python',
    'SConscript': 'python',
    'BUCK': 'python',
    'BUILD': 'python',
    'BUILD.bazel': 'python',
    'WORKSPACE': 'python',
    'Rakefile': 'ruby',
    'Gemfile': 'ruby',
    'Vagrantfile': 'ruby',
    '.Rhistory': 'splus',
    '.Rprofile': 'splus',
    '.Renviron': 'splus',
    'Singularity': 'singularity',
    'sources.list': 'debsources',
    'squid.conf': 'squidconf',
    '.SRCINFO': 'srcinfo',
    'Pipfile': 'toml',
    'poetry.lock': 'toml',
    'termcap': 'termcap',
    'termcap.src': 'termcap',
    'terminfo': 'terminfo',
    'terminfo.src': 'terminfo',
    'todo.txt': 'todotxt',
    '.vimrc': 'vim',
    '.exrc': 'vim',
    '.gvimrc': 'vim',
    '_vimrc': 'vim',
    '_exrc': 'vim',
    '_gvimrc': 'vim',
    'vimrc': 'vim',
    'gvimrc': 'vim',
    'xorg.conf': 'xorg.conf',
}

if __name__ == '__main__':

    def generate_lexer_dict():
        """
        The fFunction generate lexer dict


        Returns
        -------
        dic_lexer_wc : dict
            Lexers with wildcard.
            - structure: {extension: alias}
        dic_lexer_const : dict
            Lexers which is constant filename.
            - structure: {filename: alias}

        See Also
        --------
        - pygments.lexers.get_all_lexers
            - https://github.com/pygments/pygments/blob/master/pygments/lexers/__init__.py
        - pygments.lexers._mapping.LEXERS
            - https://github.com/pygments/pygments/blob/master/pygments/lexers/_mapping.py
        """
        # Generate lexer list[name, aliases, filenames, mimetypes]
        lst_lexer = [[lexer[0], lexer[1], filenames, lexer[3]] for lexer in get_all_lexers() for filenames in lexer[2]]
        # Split lexer list into extensions with wildcard and const filename
        lst_lexer_wc = [lexer for lexer in lst_lexer if '*.' in lexer[2]]
        lst_lexer_const = [lexer for lexer in lst_lexer if '*.' not in lexer[2]]
        # Generate lexer dict{ext: alias}
        dic_lexer_wc = dict(zip(
            [lexer[2].replace('*.', '') for lexer in lst_lexer_wc],
            [lexer[1][0] for lexer in lst_lexer_wc]
        ))
        dic_lexer_const = dict(zip(
            [lexer[2] for lexer in lst_lexer_const],
            [lexer[1][0] for lexer in lst_lexer_const]
        ))
        return dic_lexer_wc, dic_lexer_const

    def extract_src():
        """
        The function extract sourcecode from this file

        Returns
        -------
        header : str
            Front part of Sourcecode
        footer : str
            Rear part of Sourcecode

        See Also
        --------
        - pygments.lexers._mapping.LEXERS
            - https://github.com/pygments/pygments/blob/master/pygments/lexers/_mapping.py
        """
        with open(__file__) as fp:
            content = fp.read()
            # replace crnl to nl for Windows.
            content = content.replace("\r\n", "\n")
        header = content[:content.find('DIC_LEXER_WC = {')]
        footer = content[content.find("if __name__ == '__main__':"):]
        return header, footer

    def main():
        # Generate lexer dicts
        dic_lexer_wc, dic_lexer_const = generate_lexer_dict()
        # Extract sourcecode from this file
        header, footer = extract_src()
        # Format dicts for writing
        format_lexer_wc = ['%r: %r' % (k, v) for k, v in dic_lexer_wc.items()]
        format_lexer_const = ['%r: %r' % (k, v) for k, v in dic_lexer_const.items()]

        # Write dict to this file
        with open(__file__, 'w') as fp:
            fp.write(header)
            fp.write('DIC_LEXER_WC = {\n    %s,\n}\n\n' % ',\n    '.join(format_lexer_wc))
            fp.write('DIC_LEXER_CONST = {\n    %s,\n}\n\n' % ',\n    '.join(format_lexer_const))
            fp.write(footer)

    main()
    print('Finish!')
