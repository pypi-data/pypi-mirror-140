{"version":3,"file":"static/js/321.4fabc329.chunk.js","mappings":"gQAsEA,EA1D2D,SAACA,GAC1D,IAkBMC,EAAQ,CACZ,CAAEC,MAAOF,EAAMG,IAAKC,MAAOJ,EAAMG,KACjC,CAAED,MAAOF,EAAMK,IAAKD,MAAOJ,EAAMK,MAGnC,OACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,GAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,SAAvC,WACE,SAACH,EAAA,GAAD,CAAMI,MAAI,EAACC,IAAE,EAAb,UACE,SAACC,EAAA,GAAD,CACEC,aAAc,iBAAM,qBACpBZ,MAAOF,EAAME,MACbC,IAAKH,EAAMG,IACXE,IAAKL,EAAMK,IACXJ,MAAOA,EACPc,SAjCiB,SAACC,EAAcC,GACxCjB,EAAMkB,SAASD,IAiCPE,kBAAkB,YAGtB,SAACZ,EAAA,GAAD,CAAMI,MAAI,EAAV,UACE,SAACS,EAAA,EAAD,CACElB,MAAOF,EAAME,MACbmB,KAAK,QACLN,SArCgB,SAACC,GACzBhB,EAAMkB,SACmB,KAAvBF,EAAMM,OAAOpB,MAAeF,EAAME,MAAQqB,OAAOP,EAAMM,OAAOpB,SAoCxDsB,OAhCS,WACbxB,EAAME,MAAQF,EAAMG,IACtBH,EAAMkB,SAASlB,EAAMG,KACZH,EAAME,MAAQF,EAAMK,KAC7BL,EAAMkB,SAASlB,EAAMK,MA6BfoB,WAAY,CACVC,KAAM,EACNvB,IAAKH,EAAMG,IACXE,IAAKL,EAAMK,IACXsB,KAAM,SACN,kBAAmB,8B,uDCtDjC,SAASC,EAAiBC,EAAOC,EAAgBC,EAAYC,EAAeC,GAC1E,IAAMC,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOJ,WACzE,EAA0BK,EAAAA,UAAe,WACvC,OAAIH,GAASC,EACJH,EAAWF,GAAOQ,QAGvBL,EACKA,EAAcH,GAAOQ,QAKvBP,KAXT,eAAOQ,EAAP,KAAcC,EAAd,KAuCA,OA1BAC,EAAAA,EAAAA,IAAkB,WAChB,IAAIC,GAAS,EAEb,GAAKP,EAAL,CAIA,IAAMQ,EAAYX,EAAWF,GAEvBc,EAAc,WAIdF,GACFF,EAASG,EAAUL,UAOvB,OAHAM,IAEAD,EAAUE,YAAYD,GACf,WACLF,GAAS,EACTC,EAAUG,eAAeF,OAE1B,CAACd,EAAOE,EAAYG,IAChBI,EAIT,IAAMQ,EAAiCV,EAAK,qBAE5C,SAASW,EAAiBlB,EAAOC,EAAgBC,EAAYC,GAC3D,IAAMgB,EAAqBZ,EAAAA,aAAkB,kBAAMN,IAAgB,CAACA,IAC9DmB,EAAoBb,EAAAA,SAAc,WACtC,GAAsB,OAAlBJ,EAAwB,CAC1B,IACEK,EACEL,EAAcH,GADhBQ,QAEF,OAAO,kBAAMA,GAGf,OAAOW,IACN,CAACA,EAAoBnB,EAAOG,IAC/B,EAAiCI,EAAAA,SAAc,WAC7C,GAAmB,OAAfL,EACF,MAAO,CAACiB,EAAoB,kBAAM,eAGpC,IAAME,EAAiBnB,EAAWF,GAClC,MAAO,CAAC,kBAAMqB,EAAeb,SAAS,SAAAc,GAGpC,OADAD,EAAeN,YAAYO,GACpB,WACLD,EAAeL,eAAeM,QAGjC,CAACH,EAAoBjB,EAAYF,IAbpC,eAAOuB,EAAP,KAAoBC,EAApB,KAeA,OADcP,EAA+BO,EAAWD,EAAaH,GAIxD,SAASK,EAAcC,GAA0B,IAAdC,EAAc,uDAAJ,GACpDC,GAAQC,EAAAA,EAAAA,KAKRxB,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOJ,WACzE,GAKI4B,EAAAA,EAAAA,GAAc,CAChBC,KAAM,mBACN5D,MAAOwD,EACPC,MAAAA,IARF,IACE3B,eAAAA,OADF,aAEEC,WAAAA,OAFF,MAEeG,EAAoBC,OAAOJ,WAAa,KAFvD,MAGEC,cAAAA,OAHF,MAGkB,KAHlB,EAIEC,EAJF,EAIEA,MAaF,IAAIJ,EAA8B,oBAAf0B,EAA4BA,EAAWE,GAASF,EACnE1B,EAAQA,EAAMgC,QAAQ,eAAgB,IAEtC,IAAMC,OAAiEC,IAAnCjB,EAA+CC,EAAmBnB,EAChGU,EAAQwB,EAA4BjC,EAAOC,EAAgBC,EAAYC,EAAeC,GAU5F,OAAOK,E,eCrCH0B,EAA2D,SAAChE,GAChE,IAAIiE,EAMJ,OALAA,EAAG,UAAMjE,EAAMkE,KAAZ,mCAA2ClE,EAAMmE,KAAKC,KAAK,MACzC,IAAjBpE,EAAMqE,SAERJ,EAAMA,EAAIK,OAAJ,aAAiBtE,EAAMqE,OAAvB,cAAmCrE,EAAMqE,WAG/C,SAAC/D,EAAA,EAAD,CACEiE,UAAU,MACVC,GAAI,CAAEC,SAAU,GAChBC,IAAI,gBACJC,IAAKV,EACLW,QAAQ,UAKd,EApFiD,SAAC5E,GAChD,IAOI6E,EAPEC,EAAQ9E,EAAM+E,UAAWC,MAAOF,MAChCG,EAAUH,EAAMI,MAAM,GAAGC,KAAI,SAAC9D,GAAD,OAAkB+D,KAAKC,MAAMhE,EAAO,MAGjEoC,GAAQC,EAAAA,EAAAA,KACR4B,EAAKhC,EAAcG,EAAM8B,YAAYC,KAAK,OAC1CC,EAAKnC,EAAcG,EAAM8B,YAAYC,KAAK,OAG9CX,EADES,EACa7B,EAAM8B,YAAYG,OAAOJ,GAC/BG,EACMhC,EAAM8B,YAAYG,OAAOD,GAEzBhC,EAAM8B,YAAYG,OAAOC,GAE1C,IAAMtB,EAASe,KAAKQ,KAAKR,KAAK/E,IAAL,MAAA+E,MAAI,OAAQN,EAAMI,MAAM,EAAG,KAAML,GAC1D,GAAwBgB,EAAAA,EAAAA,UAAmBZ,GAA3C,eAAOd,EAAP,KAAa2B,EAAb,KACA,OACE,UAACxF,EAAA,EAAD,YACE,SAAC0D,EAAD,CAAcE,KAAMlE,EAAMkE,KAAMC,KAAMA,EAAME,OAAQA,IACnDS,EAAMiB,OAAS,GACd,UAACC,EAAA,EAAD,CAAYC,GAAG,eAAeC,cAAY,EAA1C,8CACoCpB,EAAMiB,OAD1C,yBAIA,GAEU,IAAX1B,GACC,UAAC8B,EAAA,EAAD,CAAOC,SAAS,OAAhB,kEACwD/B,EADxD,KAEE,kBAFF,+DAMA,GAEDS,EAAMI,MAAM,GAAGC,KAAI,SAAC9D,EAAcgF,GACjC,OACE,SAAC,EAAD,CAEElG,IAAK,EACLE,IAAKgB,EAAO,EACZnB,MAAOiE,EAAKkC,GACZnF,UAAUoF,EAAAA,EAAAA,IACR,SAACpG,GACC,IAAMqG,EAAUpC,EAAKe,QACrBqB,EAAQF,GAASnG,EACjB4F,EAAQS,KAEV,IACA,CAAEC,QAAS,OAZf,iBACiBH","sources":["components/cut-slider.tsx","../node_modules/@mui/material/useMediaQuery/useMediaQuery.js","components/array-nd.tsx"],"sourcesContent":["import Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Input from \"@mui/material/Input\";\nimport Slider from \"@mui/material/Slider\";\n\ninterface CutSliderProps {\n  min: number;\n  max: number;\n  setValue: any;\n  value: number;\n}\n\nconst CutSlider: React.FunctionComponent<CutSliderProps> = (props) => {\n  const handleSliderChange = (event: Event, newValue: number | number[]) => {\n    props.setValue(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    props.setValue(\n      event.target.value === \"\" ? props.value : Number(event.target.value)\n    );\n  };\n\n  const handleBlur = () => {\n    if (props.value < props.min) {\n      props.setValue(props.min);\n    } else if (props.value > props.max) {\n      props.setValue(props.max);\n    }\n  };\n\n  const marks = [\n    { value: props.min, label: props.min },\n    { value: props.max, label: props.max },\n  ];\n\n  return (\n    <Box>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            getAriaLabel={() => \"Array slice range\"}\n            value={props.value}\n            min={props.min}\n            max={props.max}\n            marks={marks}\n            onChange={handleSliderChange}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            value={props.value}\n            size=\"small\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 1,\n              min: props.min,\n              max: props.max,\n              type: \"number\",\n              \"aria-labelledby\": \"min-input-slider\",\n            }}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CutSlider;\n","import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}","import * as React from \"react\";\n\nimport Alert from \"@mui/material/Alert\";\nimport Box from \"@mui/material/Box\";\nimport CutSlider from \"./cut-slider\";\nimport Typography from \"@mui/material/Typography\";\nimport { components } from \"../openapi_schemas\";\nimport { debounce } from \"ts-debounce\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { useState } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\n\ninterface IProps {\n  segments: string[];\n  link: string;\n  item: any;\n  structure: components[\"schemas\"][\"Structure\"];\n}\n\nconst ArrayND: React.FunctionComponent<IProps> = (props) => {\n  const shape = props.structure!.macro!.shape as number[];\n  const middles = shape.slice(2).map((size: number) => Math.floor(size / 2));\n  // Request an image from the server that is downsampled to be at most\n  // 2X as big as it will be displayed.\n  const theme = useTheme();\n  const sm = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const md = useMediaQuery(theme.breakpoints.down(\"md\"));\n  var maxImageSize: number;\n  if (sm) {\n    maxImageSize = theme.breakpoints.values.sm;\n  } else if (md) {\n    maxImageSize = theme.breakpoints.values.md;\n  } else {\n    maxImageSize = theme.breakpoints.values.lg;\n  }\n  const stride = Math.ceil(Math.max(...shape.slice(0, 2)) / maxImageSize);\n  const [cuts, setCuts] = useState<number[]>(middles);\n  return (\n    <Box>\n      <ImageDisplay link={props.link} cuts={cuts} stride={stride} />\n      {shape.length > 2 ? (\n        <Typography id=\"input-slider\" gutterBottom>\n          Choose a planar cut through this {shape.length}-dimensional array.\n        </Typography>\n      ) : (\n        \"\"\n      )}\n      {stride !== 1 ? (\n        <Alert severity=\"info\">\n          This large array has been downsampled by a factor of {stride}.\n          <br />\n          Use the \"Download\" tab to access a full-resolution image.\n        </Alert>\n      ) : (\n        \"\"\n      )}\n      {shape.slice(2).map((size: number, index: number) => {\n        return (\n          <CutSlider\n            key={`slider-${index}`}\n            min={0}\n            max={size - 1}\n            value={cuts[index]}\n            setValue={debounce(\n              (value) => {\n                const newCuts = cuts.slice();\n                newCuts[index] = value;\n                setCuts(newCuts);\n              },\n              100,\n              { maxWait: 200 }\n            )}\n          />\n        );\n      })}\n    </Box>\n  );\n};\n\ninterface ImageDisplayProps {\n  link: string;\n  cuts: number[];\n  stride: number;\n}\n\nconst ImageDisplay: React.FunctionComponent<ImageDisplayProps> = (props) => {\n  var url: string;\n  url = `${props.link}?format=image/png&slice=${props.cuts.join(\",\")}`;\n  if (props.stride !== 1) {\n    // Downsample the image dimensions.\n    url = url.concat(`,::${props.stride},::${props.stride}`);\n  }\n  return (\n    <Box\n      component=\"img\"\n      sx={{ maxWidth: 1 }}\n      alt=\"Data rendered\"\n      src={url}\n      loading=\"lazy\"\n    />\n  );\n};\n\nexport default ArrayND;\n"],"names":["props","marks","value","min","label","max","Box","Grid","container","spacing","alignItems","item","xs","Slider","getAriaLabel","onChange","event","newValue","setValue","valueLabelDisplay","Input","size","target","Number","onBlur","inputProps","step","type","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","supportMatchMedia","window","React","matches","match","setMatch","useEnhancedEffect","active","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","getServerSnapshot","mediaQueryList","notify","getSnapshot","subscribe","useMediaQuery","queryInput","options","theme","useTheme","getThemeProps","name","replace","useMediaQueryImplementation","undefined","ImageDisplay","url","link","cuts","join","stride","concat","component","sx","maxWidth","alt","src","loading","maxImageSize","shape","structure","macro","middles","slice","map","Math","floor","sm","breakpoints","down","md","values","lg","ceil","useState","setCuts","length","Typography","id","gutterBottom","Alert","severity","index","debounce","newCuts","maxWait"],"sourceRoot":""}