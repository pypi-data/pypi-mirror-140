# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['chocs_middleware', 'chocs_middleware.cache']

package_data = \
{'': ['*']}

install_requires = \
['chocs>=1.5.0,<2.0.0']

setup_kwargs = {
    'name': 'chocs-middleware.cache',
    'version': '1.0.0',
    'description': 'Middleware to simplify caching your resources.',
    'long_description': '# Chocs-cache <br> [![PyPI version](https://badge.fury.io/py/chocs-middleware.cache.svg)](https://pypi.org/project/chocs-middleware.cache/) [![CI](https://github.com/kodemore/chocs-cache/actions/workflows/main.yaml/badge.svg)](https://github.com/kodemore/chocs-cache/actions/workflows/main.yaml) [![Release](https://github.com/kodemore/chocs-cache/actions/workflows/release.yml/badge.svg)](https://github.com/kodemore/chocs-cache/actions/workflows/release.yml) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\nCache middleware for chocs library.\n\n## Features\n\n- Easy integration\n- Support for ETags\n- Support for conditional request headers `if-none-match`, `if-match`\n- Built-in in-memory cache storage for debugging and testing purposes\n- Automatic cache revalidation\n\n## Installation\n\nWith pip,\n```shell\npip install chocs-middleware.cache\n```\nor through poetry\n```shell\npoetry add chocs-middleware.cache\n```\n\n# Usage\n\n## Simple cache\nThe following example shows the simplest usage of cache mechanism with a custom\nin-memory cache storage.\n\n```python\nimport chocs\nfrom chocs import HttpRequest, HttpResponse\nfrom chocs_middleware.cache import ICacheStorage, CacheItem, CacheMiddleware\n\n\nclass MemoryCache(ICacheStorage):\n    """\n    Custom cache storage that uses memory to store the cache items.\n    In production, this should use Redis or other cache databases used by your application.\n    """\n\n    def __init__(self):\n        self._cache = {}\n\n    def get(self, cache_id: str) -> CacheItem:\n        return self._cache[cache_id]\n\n    def set(self, item: CacheItem) -> None:\n        self._cache[item.id] = item\n\n\napp = chocs.Application(CacheMiddleware(MemoryCache()))\n\n\n@app.get("/users/{user_id}", cache_expiry=10)\ndef get_user(request: HttpRequest) -> HttpResponse:\n    """\n    cache_expiry enables caching for the returned response and keeps\n    it alive for 10 seconds. \n    """\n\n    return HttpResponse("Bob Bobber", 200)\n```\n\n## ETag based cache\n\nTo make use of e-tags simply return the e-tag header in the response, like in the example below:\n\n```python\nimport chocs\nfrom chocs import HttpRequest, HttpResponse\nfrom chocs_middleware.cache import CacheMiddleware, InMemoryCacheStorage\n\napp = chocs.Application(CacheMiddleware(InMemoryCacheStorage()))\n\n\n@app.get("/users/{user_id}", cache_expiry=10)\ndef get_user(request: HttpRequest) -> HttpResponse:\n    return HttpResponse("Bob Bobber", headers={\n        "etag": \'"etag-1"\', # your custom etag value\n    })\n```\n\n> Keep in mind e-tag values MUST BE unique per REST endpoint and per content type to avoid cache collisions.\n\n## Using cache vary\n\nTo allow the cache system better understand your intention it is recommended to use the `cache_vary` attribute.\nYou can read more about the `Vary` header [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary)\n\n```python\nimport chocs\nfrom chocs import HttpRequest, HttpResponse\nfrom chocs_middleware.cache import CacheMiddleware, InMemoryCacheStorage\n\n# you can specify cache vary globally when initialising middleware\napp = chocs.Application(CacheMiddleware(InMemoryCacheStorage(), cache_vary=set("accept-language")))\n\n# or you can specify cache vary per endpoint\n@app.get("/users/{user_id}", cache_expiry=10, cache_vary=("accept-language", "x-custom-header"))\ndef get_user(request: HttpRequest) -> HttpResponse:\n    return HttpResponse("Bob Bobber")\n```\n\n## Specifying cache control\n\nYou can also specify the type of cache by setting the `cache_control` attribute to `public` or `private`.\nYou can read more about cache-control [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#types_of_caches)\n\n```python\nimport chocs\nfrom chocs import HttpRequest, HttpResponse\nfrom chocs_middleware.cache import CacheMiddleware, InMemoryCacheStorage\n\napp = chocs.Application(CacheMiddleware(InMemoryCacheStorage()))\n\n# cache control can only be specified in the route definition.\n@app.get("/users/{user_id}", cache_expiry=10, cache_control="private")\ndef get_user(request: HttpRequest) -> HttpResponse:\n    return HttpResponse("Bob Bobber")\n```\n\n## Conditional request support\n\nThis cache system supports conditional requests headers [`if-none-match`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match) \nand [`if-match`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Match) in a limited manner.\nThis means values passed in `if-none-match` and `if-match` headers will be treated as a single value.\n\n## Cache revalidation\n\nThe middleware provides `ICollectableCache` interfaces that you can use to implement your  \ncache re-validation. It might be just a simple mechanism that just deletes the stale cache, but\nthere are no limitations and more powerful systems might be built on the top of the interface.\n\nThe following diagram represents the way how to cache revalidation works in the middleware:\n![Cache Revalidation](./docs/cache_revalidation.png)\n\n\nThe following example shows the simplest implementation of cache re-validation:\n\n```python\nfrom chocs import Application, HttpRequest, HttpResponse\nfrom chocs_middleware.cache import ICollectableCacheStorage, CacheItem, CacheMiddleware\n\n\nclass CacheStorage(ICollectableCacheStorage):\n    def __init__(self):\n        self._storage = {}\n\n    def set(self, item: CacheItem) -> None:\n        self._storage[item.id] = item\n\n    def get(self, item_id: str) -> CacheItem:\n        return self._storage[item_id]\n\n    def collect(self, item: CacheItem) -> None:\n        del self._storage[item.id]\n\napp = Application(CacheMiddleware(CacheStorage))\n\n@app.get("/users/{user_id}", cache_expiry=10)\ndef get_test(req: HttpRequest) -> HttpResponse:\n    user_id = req.path_parameters.get("user_id")\n    return HttpResponse(f"user {user_id}", headers={"etag": f"{user_id}"})\n\n\n@app.patch("/users/{user_id}", cache=True)  # cache attribute enables cache middleware for the endpoint, to collect stale data\ndef get_test(req: HttpRequest) -> HttpResponse:\n    """\n    Once this function generate a successful response and cache exists for the given user CacheStorage.collect is called\n    """\n    return HttpResponse("{user data}")\n```\n',
    'author': 'Dawid Kraczkowski',
    'author_email': 'dawid.kraczkowski@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/kodemore/chocs-cache',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
