{"version":3,"file":"8d6fab2e.js","mappings":";;;AAqBA;AACA;;;AA4BA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AAEA;;AAEA;AAGA;;AAEA;;AAlDA;;;;;;;;;;AAAA;;ACZA;;ACmBA;AACA;;AAEA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACcA;AAMA;AACA;AACA;;;;;AAKA;;AAIA;;AA3BA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+FA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AAKA;AACA;;;AAGA;AAKA;AACA;AACA;;;AAGA;;AAzDA;;;;;AAmEA;AAKA;AACA;AACA;;;AAGA;;;AAKA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;;;AAGA;;AAMA;;AAEA;AACA;;;;AA3JA","sources":["webpack://home-assistant-frontend/./src/components/ha-icon-picker.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-sensor-card-editor.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"lit-vaadin-helpers\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { PolymerChangedEvent } from \"../polymer-types\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon\";\n\ntype IconItem = {\n  icon: string;\n  keywords: string[];\n};\nlet iconItems: IconItem[] = [];\n\n// eslint-disable-next-line lit/prefer-static-styles\nconst rowRenderer: ComboBoxLitRenderer<IconItem> = (item) => html`<mwc-list-item\n  graphic=\"avatar\"\n>\n  <ha-icon .icon=${item.icon} slot=\"graphic\"></ha-icon>\n  ${item.icon}\n</mwc-list-item>`;\n\n@customElement(\"ha-icon-picker\")\nexport class HaIconPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public fallbackPath?: string;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public invalid = false;\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) private comboBox!: HaComboBox;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        item-value-path=\"icon\"\n        item-label-path=\"icon\"\n        .value=${this._value}\n        allow-custom-value\n        .filteredItems=${iconItems}\n        .label=${this.label}\n        .disabled=${this.disabled}\n        .placeholder=${this.placeholder}\n        .errorMessage=${this.errorMessage}\n        .invalid=${this.invalid}\n        .renderer=${rowRenderer}\n        icon\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n        ${this._value || this.placeholder\n          ? html`\n              <ha-icon .icon=${this._value || this.placeholder} slot=\"icon\">\n              </ha-icon>\n            `\n          : this.fallbackPath\n          ? html`<ha-svg-icon\n              .path=${this.fallbackPath}\n              slot=\"icon\"\n            ></ha-svg-icon>`\n          : \"\"}\n      </ha-combo-box>\n    `;\n  }\n\n  private async _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n    if (this._opened && !iconItems.length) {\n      const iconList = await import(\"../../build/mdi/iconList.json\");\n\n      iconItems = iconList.default.map((icon) => ({\n        icon: `mdi:${icon.name}`,\n        keywords: icon.keywords,\n      }));\n\n      (this.comboBox as any).filteredItems = iconItems;\n\n      Object.keys(customIcons).forEach((iconSet) => {\n        this._loadCustomIconItems(iconSet);\n      });\n    }\n  }\n\n  private async _loadCustomIconItems(iconsetPrefix: string) {\n    try {\n      const getIconList = customIcons[iconsetPrefix].getIconList;\n      if (typeof getIconList !== \"function\") {\n        return;\n      }\n      const iconList = await getIconList();\n      const customIconItems = iconList.map((icon) => ({\n        icon: `${iconsetPrefix}:${icon.name}`,\n        keywords: icon.keywords ?? [],\n      }));\n      iconItems.push(...customIconItems);\n      (this.comboBox as any).filteredItems = iconItems;\n    } catch (e) {\n      // eslint-disable-next-line\n      console.warn(`Unable to load icon list for ${iconsetPrefix} iconset`);\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    ev.stopPropagation();\n    this._setValue(ev.detail.value);\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    fireEvent(\n      this,\n      \"value-changed\",\n      { value: this._value },\n      {\n        bubbles: false,\n        composed: false,\n      }\n    );\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    const characterCount = filterString.length;\n    if (characterCount >= 2) {\n      const filteredItems: IconItem[] = [];\n      const filteredItemsByKeywords: IconItem[] = [];\n\n      iconItems.forEach((item) => {\n        if (item.icon.includes(filterString)) {\n          filteredItems.push(item);\n          return;\n        }\n        if (item.keywords.some((t) => t.includes(filterString))) {\n          filteredItemsByKeywords.push(item);\n        }\n      });\n\n      filteredItems.push(...filteredItemsByKeywords);\n\n      if (filteredItems.length > 0) {\n        (this.comboBox as any).filteredItems = filteredItems;\n      } else {\n        (this.comboBox as any).filteredItems = [\n          { icon: filterString, keywords: [] },\n        ];\n      }\n    } else {\n      (this.comboBox as any).filteredItems = iconItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  static get styles() {\n    return css`\n      ha-icon,\n      ha-svg-icon {\n        color: var(--primary-text-color);\n        position: relative;\n        bottom: 2px;\n      }\n      *[slot=\"prefix\"] {\n        margin-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-picker\": HaIconPicker;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  static override styles = [styles];\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport \"../../../components/ha-select\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-select\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        .value=${this.value}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        <mwc-list-item value=\"remove\"\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.no_theme\"\n          )}</mwc-list-item\n        >\n        ${Object.keys(this.hass!.themes.themes)\n          .sort()\n          .map(\n            (theme) =>\n              html`<mwc-list-item .value=${theme}>${theme}</mwc-list-item>`\n          )}\n      </ha-select>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value === \"remove\" ? undefined : ev.target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  assert,\n  assign,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-select\";\nimport \"../../../../components/ha-switch\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { SensorCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    graph: optional(union([literal(\"line\"), literal(\"none\")])),\n    unit: optional(string()),\n    detail: optional(number()),\n    theme: optional(string()),\n    hours_to_show: optional(number()),\n  })\n);\n\nconst includeDomains = [\"counter\", \"input_number\", \"number\", \"sensor\"];\n\n@customElement(\"hui-sensor-card-editor\")\nexport class HuiSensorCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: SensorCardConfig;\n\n  public setConfig(config: SensorCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _icon(): string {\n    return this._config!.icon || \"\";\n  }\n\n  get _graph(): string {\n    return this._config!.graph || \"none\";\n  }\n\n  get _unit(): string {\n    return this._config!.unit || \"\";\n  }\n\n  get _detail(): number {\n    return this._config!.detail ?? 1;\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _hours_to_show(): number | string {\n    return this._config!.hours_to_show || \"24\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const graphs = [\"line\", \"none\"];\n\n    const entityState = this.hass.states[this._entity];\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          .includeDomains=${includeDomains}\n          @change=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.name\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <ha-icon-picker\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._icon}\n            .placeholder=${this._icon || entityState?.attributes.icon}\n            .fallbackPath=${!this._icon &&\n            !entityState?.attributes.icon &&\n            entityState\n              ? domainIcon(computeDomain(entityState.entity_id), entityState)\n              : undefined}\n            .configValue=${\"icon\"}\n            @value-changed=${this._valueChanged}\n          ></ha-icon-picker>\n          <ha-select\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.sensor.graph_type\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .configValue=${\"graph\"}\n            @selected=${this._valueChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n            .value=${this._graph}\n          >\n            ${graphs.map(\n              (graph) =>\n                html`<mwc-list-item .value=${graph}>${graph}</mwc-list-item>`\n            )}\n          </ha-select>\n        </div>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.unit\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._unit}\n            .configValue=${\"unit\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <ha-formfield\n            label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.sensor.show_more_detail\"\n            )}\n          >\n            <ha-switch\n              .checked=${this._detail === 2}\n              .configValue=${\"detail\"}\n              @change=${this._change}\n            ></ha-switch>\n          </ha-formfield>\n        </div>\n        <div class=\"side-by-side\">\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          ></hui-theme-select-editor>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.hours_to_show\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._hours_to_show}\n            min=\"1\"\n            .configValue=${\"hours_to_show\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n      </div>\n    `;\n  }\n\n  private _change(ev: Event) {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const value = (ev.target! as EditorTarget).checked ? 2 : 1;\n\n    if (this._detail === value) {\n      return;\n    }\n\n    this._config = {\n      ...this._config,\n      detail: value,\n    };\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (\n        target.value === \"\" ||\n        (target.type === \"number\" && isNaN(Number(target.value)))\n      ) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        let value: any = target.value;\n        if (target.type === \"number\") {\n          value = Number(value);\n        }\n        this._config = { ...this._config, [target.configValue!]: value };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-sensor-card-editor\": HuiSensorCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}