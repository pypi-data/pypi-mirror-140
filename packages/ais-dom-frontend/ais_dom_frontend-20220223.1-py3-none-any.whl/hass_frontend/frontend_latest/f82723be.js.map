{"version":3,"file":"f82723be.js","mappings":";;AAiCA;AACA;;AAEA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACqFA;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;AAKA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;AACA;AACA;;;AA/HA","sources":["webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-light-card-editor.ts"],"sourcesContent":["import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, object, optional, string, assign } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport { ActionConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LightCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-action-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    name: optional(string()),\n    entity: optional(string()),\n    theme: optional(string()),\n    icon: optional(string()),\n    hold_action: optional(actionConfigStruct),\n    double_tap_action: optional(actionConfigStruct),\n  })\n);\n\nconst includeDomains = [\"light\"];\n\n@customElement(\"hui-light-card-editor\")\nexport class HuiLightCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: LightCardConfig;\n\n  public setConfig(config: LightCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _icon(): string {\n    return this._config!.icon || \"\";\n  }\n\n  get _hold_action(): ActionConfig {\n    return this._config!.hold_action || { action: \"more-info\" };\n  }\n\n  get _double_tap_action(): ActionConfig | undefined {\n    return this._config!.double_tap_action;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const actions = [\n      \"more-info\",\n      \"toggle\",\n      \"navigate\",\n      \"url\",\n      \"call-service\",\n      \"none\",\n    ];\n\n    const entityState = this.hass.states[this._entity];\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          .includeDomains=${includeDomains}\n          @value-changed=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.name\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._name}\n            .configValue=${\"name\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <ha-icon-picker\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._icon}\n            .placeholder=${this._icon || entityState?.attributes.icon}\n            .fallbackPath=${!this._icon &&\n            !entityState?.attributes.icon &&\n            entityState\n              ? domainIcon(computeDomain(entityState.entity_id), entityState)\n              : undefined}\n            .configValue=${\"icon\"}\n            @value-changed=${this._valueChanged}\n          ></ha-icon-picker>\n        </div>\n\n        <hui-theme-select-editor\n          .hass=${this.hass}\n          .value=${this._theme}\n          .configValue=${\"theme\"}\n          @value-changed=${this._valueChanged}\n        ></hui-theme-select-editor>\n\n        <hui-action-editor\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.hold_action\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .config=${this._hold_action}\n          .actions=${actions}\n          .configValue=${\"hold_action\"}\n          @value-changed=${this._valueChanged}\n        ></hui-action-editor>\n\n        <hui-action-editor\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.double_tap_action\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .config=${this._double_tap_action}\n          .actions=${actions}\n          .configValue=${\"double_tap_action\"}\n          @value-changed=${this._valueChanged}\n        ></hui-action-editor>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.detail.value;\n\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (target.configValue) {\n      if (value !== false && !value) {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-light-card-editor\": HuiLightCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}