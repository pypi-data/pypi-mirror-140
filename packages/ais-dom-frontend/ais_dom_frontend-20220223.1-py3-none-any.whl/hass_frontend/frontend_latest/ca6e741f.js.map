{"version":3,"file":"ca6e741f.js","mappings":";AA8BA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;;;AAzBA;;;;;;;;;;AAlBA;;;;ACFA;;;;ACAA;;ACQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkGA;AAKA;AACA;AACA;;;;AAIA;AAKA;AACA;AACA;;;AAGA;;AAEA;AAGA;;;;;AAQA;AAKA;;AAEA;AACA;;;;;;;AAOA;;AAEA;;;;;AAKA;;AAEA;;;;;AAKA;;AAEA;;;;;AAKA;;AAEA;;;;;;;;AAQA;;;AAGA;;;;;AAKA;;;AAGA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;;;AA3GA;;;;AA5CA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-statistics-picker.ts","webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-statistics-graph-card-editor.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { PolymerChangedEvent } from \"../../polymer-types\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${this._currentStatistics.map(\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .value=${statisticId}\n              .statisticTypes=${this.statisticTypes}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: PolymerChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 200px;\n        display: block;\n      }\n      ha-statistic-picker {\n        display: block;\n        width: 100%;\n        margin-top: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n","import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  static override styles = [styles];\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  assign,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport \"../../../../components/ha-checkbox\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-radio\";\nimport type { HaRadio } from \"../../../../components/ha-radio\";\nimport \"../../../../components/ha-select\";\nimport { StatisticType } from \"../../../../data/history\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StatisticsGraphCardConfig } from \"../../cards/types\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst statTypeStruct = union([\n  literal(\"sum\"),\n  literal(\"min\"),\n  literal(\"max\"),\n  literal(\"mean\"),\n]);\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entities: array(entitiesConfigStruct),\n    title: optional(string()),\n    days_to_show: optional(number()),\n    period: optional(\n      union([\n        literal(\"5minute\"),\n        literal(\"hour\"),\n        literal(\"day\"),\n        literal(\"month\"),\n      ])\n    ),\n    chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n    stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n  })\n);\n\nconst periods = [\"5minute\", \"hour\", \"day\", \"month\"];\n\n@customElement(\"hui-statistics-graph-card-editor\")\nexport class HuiStatisticsGraphCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  @state() private _configEntities?: string[];\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities, false).map((cfg) => cfg.entity)\n      : [];\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _days_to_show(): number {\n    return this._config!.days_to_show || 30;\n  }\n\n  get _period(): string {\n    return this._config!.period || \"hour\";\n  }\n\n  get _chart_type(): StatisticsGraphCardConfig[\"chart_type\"] {\n    return this._config!.chart_type || \"line\";\n  }\n\n  get _stat_types(): StatisticType[] {\n    return this._config!.stat_types\n      ? Array.isArray(this._config!.stat_types)\n        ? this._config!.stat_types\n        : [this._config!.stat_types]\n      : [\"mean\", \"min\", \"max\", \"sum\"];\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <ha-select\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.statistics-graph.period\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .configValue=${\"period\"}\n            @selected=${this._periodSelected}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n            .value=${this._period}\n          >\n            ${periods.map(\n              (period) =>\n                html`<mwc-list-item .value=${period}>\n                  ${this.hass!.localize(\n                    `ui.panel.lovelace.editor.card.statistics-graph.periods.${period}`\n                  )}\n                </mwc-list-item>`\n            )}\n          </ha-select>\n          <paper-input\n            type=\"number\"\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.days_to_show\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._days_to_show}\n            min=\"1\"\n            .configValue=${\"days_to_show\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n        <p>Show stat types:</p>\n        <div class=\"side-by-side\">\n          <ha-formfield label=\"Sum\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"sum\")}\n              name=\"sum\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n          <ha-formfield label=\"Mean\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"mean\")}\n              name=\"mean\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n          <ha-formfield label=\"Min\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"min\")}\n              name=\"min\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n          <ha-formfield label=\"Max\">\n            <ha-checkbox\n              .checked=${this._stat_types.includes(\"max\")}\n              name=\"max\"\n              @change=${this._statTypesChanged}\n            ></ha-checkbox>\n          </ha-formfield>\n        </div>\n        <div class=\"side-by-side\">\n          <p>Chart type:</p>\n          <ha-formfield label=\"Line\">\n            <ha-radio\n              .checked=${this._chart_type === \"line\"}\n              value=\"line\"\n              name=\"chart_type\"\n              @change=${this._chartTypeChanged}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield label=\"Bar\">\n            <ha-radio\n              .checked=${this._chart_type === \"bar\"}\n              value=\"bar\"\n              name=\"chart_type\"\n              @change=${this._chartTypeChanged}\n            ></ha-radio>\n          </ha-formfield>\n        </div>\n        <ha-statistics-picker\n          .hass=${this.hass}\n          .pickStatisticLabel=${`Add a statistic`}\n          .pickedStatisticLabel=${`Statistic`}\n          .value=${this._configEntities}\n          .configValue=${\"entities\"}\n          @value-changed=${this._valueChanged}\n        ></ha-statistics-picker>\n      </div>\n    `;\n  }\n\n  private _chartTypeChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    fireEvent(this, \"config-changed\", {\n      config: { ...this._config!, chart_type: input.value },\n    });\n  }\n\n  private _statTypesChanged(ev) {\n    const name = ev.currentTarget.name;\n    const checked = ev.currentTarget.checked;\n    if (checked) {\n      fireEvent(this, \"config-changed\", {\n        config: { ...this._config!, stat_types: [...this._stat_types, name] },\n      });\n      return;\n    }\n    const statTypes = [...this._stat_types];\n    fireEvent(this, \"config-changed\", {\n      config: {\n        ...this._config!,\n        stat_types: statTypes.filter((stat) => stat !== name),\n      },\n    });\n  }\n\n  private _periodSelected(ev) {\n    const newPeriod = ev.target.value\n      .period as StatisticsGraphCardConfig[\"period\"];\n    if (newPeriod === this._period) {\n      return;\n    }\n    fireEvent(this, \"config-changed\", {\n      config: { ...this._config!, period: newPeriod },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n\n    const newValue = ev.detail?.value || target.value;\n\n    if (this[`_${target.configValue}`] === newValue) {\n      return;\n    }\n\n    if (newValue === \"\") {\n      this._config = { ...this._config };\n      delete this._config[target.configValue!];\n    } else {\n      let value: any = newValue;\n      if (target.type === \"number\") {\n        value = Number(value);\n      }\n      this._config = {\n        ...this._config,\n        [target.configValue!]: value,\n      };\n    }\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        ha-statistics-picker {\n          width: 100%;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card-editor\": HuiStatisticsGraphCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}