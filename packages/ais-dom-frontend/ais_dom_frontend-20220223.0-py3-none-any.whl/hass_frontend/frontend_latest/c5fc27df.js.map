{"version":3,"file":"c5fc27df.js","mappings":";;;;AA2CA;;;;AAQA;;;AAKA;AACA;AACA;AACA;;;AAGA;AAEA;AAGA;AAEA;AAGA;AACA;;;;;;;AASA;;;;;;AAMA;;;AAKA;AACA;;;AAhFA;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/config/cloud/dialog-manage-cloudhook/dialog-manage-cloudhook.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { WebhookDialogParams } from \"./show-dialog-manage-cloudhook\";\n\nconst inputLabel = \"Public URL â€“ Click to copy to clipboard\";\n\nexport class DialogManageCloudhook extends LitElement {\n  protected hass?: HomeAssistant;\n\n  @state() private _params?: WebhookDialogParams;\n\n  public showDialog(params: WebhookDialogParams) {\n    this._params = params;\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._params) {\n      return html``;\n    }\n    const { webhook, cloudhook } = this._params;\n    const docsUrl =\n      webhook.domain === \"automation\"\n        ? documentationUrl(\n            this.hass!,\n            \"/docs/automation/trigger/#webhook-trigger\"\n          )\n        : documentationUrl(this.hass!, `/integrations/${webhook.domain}/`);\n    return html`\n      <ha-dialog\n        open\n        .heading=${this.hass!.localize(\n          \"ui.panel.config.cloud.dialog_cloudhook.webhook_for\",\n          \"name\",\n          webhook.name\n        )}\n      >\n        <div>\n          <p>\n            ${this.hass!.localize(\n              \"ui.panel.config.cloud.dialog_cloudhook.available_at\"\n            )}\n          </p>\n          <paper-input\n            label=${inputLabel}\n            value=${cloudhook.cloudhook_url}\n            @click=${this._copyClipboard}\n            @blur=${this._restoreLabel}\n          ></paper-input>\n          <p>\n            ${cloudhook.managed\n              ? html`\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.dialog_cloudhook.managed_by_integration\"\n                  )}\n                `\n              : html`\n                  ${this.hass!.localize(\n                    \"ui.panel.config.cloud.dialog_cloudhook.info_disable_webhook\"\n                  )}\n                  <button class=\"link\" @click=${this._disableWebhook}>\n                    ${this.hass!.localize(\n                      \"ui.panel.config.cloud.dialog_cloudhook.link_disable_webhook\"\n                    )}</button\n                  >.\n                `}\n          </p>\n        </div>\n\n        <a\n          href=${docsUrl}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          slot=\"secondaryAction\"\n        >\n          <mwc-button>\n            ${this.hass!.localize(\n              \"ui.panel.config.cloud.dialog_cloudhook.view_documentation\"\n            )}\n          </mwc-button>\n        </a>\n        <mwc-button @click=${this.closeDialog} slot=\"primaryAction\">\n          ${this.hass!.localize(\"ui.panel.config.cloud.dialog_cloudhook.close\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private get _paperInput(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\"paper-input\")!;\n  }\n\n  private async _disableWebhook() {\n    showConfirmationDialog(this, {\n      text: this.hass!.localize(\n        \"ui.panel.config.cloud.dialog_cloudhook.confirm_disable\"\n      ),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirmText: this.hass!.localize(\"ui.common.disable\"),\n      confirm: () => {\n        this._params!.disableHook();\n        this.closeDialog();\n      },\n    });\n  }\n\n  private _copyClipboard(ev: FocusEvent) {\n    // paper-input -> iron-input -> input\n    const paperInput = ev.currentTarget as PaperInputElement;\n    const input = (paperInput.inputElement as any)\n      .inputElement as HTMLInputElement;\n    input.setSelectionRange(0, input.value.length);\n    try {\n      document.execCommand(\"copy\");\n      paperInput.label = this.hass!.localize(\n        \"ui.panel.config.cloud.dialog_cloudhook.copied_to_clipboard\"\n      );\n    } catch (err: any) {\n      // Copying failed. Oh no\n    }\n  }\n\n  private _restoreLabel() {\n    this._paperInput.label = inputLabel;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-dialog {\n          width: 650px;\n        }\n        paper-input {\n          margin-top: -8px;\n        }\n        button.link {\n          color: var(--primary-color);\n        }\n        a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-manage-cloudhook\": DialogManageCloudhook;\n  }\n}\n\ncustomElements.define(\"dialog-manage-cloudhook\", DialogManageCloudhook);\n"],"names":[],"sourceRoot":""}