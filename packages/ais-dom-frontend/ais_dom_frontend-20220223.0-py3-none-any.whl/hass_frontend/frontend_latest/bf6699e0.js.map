{"version":3,"file":"bf6699e0.js","mappings":";;AAuDA;AACA;AACA;AACA;AAIA;AACA;;;AAGA;AACA;;;AAjBA;;;;AC5CA;;ACQA;;ACmBA;AACA;;AAEA;;AA9BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACcA;AAMA;AACA;AACA;;;;;AAKA;;AAIA;;AA3BA;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+FA;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AAKA;AACA;AACA;;;;;AAKA;AAGA;;;AAGA;AACA;AAGA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AAEA;AACA;;;;AAIA;AAGA;;;AAGA;AACA;AAGA;AACA;;;;;AA1FA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-entity-attribute-picker.ts","webpack://home-assistant-frontend/./src/components/ha-radio.ts","webpack://home-assistant-frontend/./src/components/ha-select.ts","webpack://home-assistant-frontend/./src/components/ha-textfield.ts","webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-theme-select-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-weather-forecast-card-editor.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { formatAttributeName } from \"../../data/entity_attributes\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\n@customElement(\"ha-entity-attribute-picker\")\nclass HaEntityAttributePicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId?: string;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-value\" })\n  public allowCustomValue;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ type: Boolean }) private _opened = false;\n\n  @query(\"ha-combo-box\", true) private _comboBox!: HaComboBox;\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_opened\") && this._opened) {\n      const state = this.entityId ? this.hass.states[this.entityId] : undefined;\n      (this._comboBox as any).items = state\n        ? Object.keys(state.attributes).map((key) => ({\n            value: key,\n            label: formatAttributeName(key),\n          }))\n        : [];\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .value=${this.value || \"\"}\n        .autofocus=${this.autofocus}\n        .label=${this.label ??\n        this.hass.localize(\n          \"ui.components.entity.entity-attribute-picker.attribute\"\n        )}\n        .disabled=${this.disabled || !this.entityId}\n        .allowCustomValue=${this.allowCustomValue}\n        item-value-path=\"value\"\n        item-label-path=\"label\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this.value = ev.detail.value;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-attribute-picker\": HaEntityAttributePicker;\n  }\n}\n","import { RadioBase } from \"@material/mwc-radio/mwc-radio-base\";\nimport { styles } from \"@material/mwc-radio/mwc-radio.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-radio\")\nexport class HaRadio extends RadioBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-radio\": HaRadio;\n  }\n}\n","import { SelectBase } from \"@material/mwc-select/mwc-select-base\";\nimport { styles } from \"@material/mwc-select/mwc-select.css\";\nimport { html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { debounce } from \"../common/util/debounce\";\nimport { nextRender } from \"../common/util/render-status\";\n\n@customElement(\"ha-select\")\nexport class HaSelect extends SelectBase {\n  // @ts-ignore\n  @property({ type: Boolean }) public icon?: boolean;\n\n  protected override renderLeadingIcon() {\n    if (!this.icon) {\n      return nothing;\n    }\n\n    return html`<span class=\"mdc-select__icon\"\n      ><slot name=\"icon\"></slot\n    ></span>`;\n  }\n\n  static override styles = [styles];\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"translations-updated\", this._translationsUpdated);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\n      \"translations-updated\",\n      this._translationsUpdated\n    );\n  }\n\n  private _translationsUpdated = debounce(async () => {\n    await nextRender();\n    this.layoutOptions();\n  }, 500);\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-select\": HaSelect;\n  }\n}\n","import { TextFieldBase } from \"@material/mwc-textfield/mwc-textfield-base\";\nimport { styles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { TemplateResult, html, PropertyValues, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textfield\")\nexport class HaTextField extends TextFieldBase {\n  @property({ type: Boolean }) public invalid?: boolean;\n\n  @property({ attribute: \"error-message\" }) public errorMessage?: string;\n\n  override updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      (changedProperties.has(\"invalid\") &&\n        (this.invalid || changedProperties.get(\"invalid\") !== undefined)) ||\n      changedProperties.has(\"errorMessage\")\n    ) {\n      this.setCustomValidity(\n        this.invalid ? this.errorMessage || \"Invalid\" : \"\"\n      );\n      this.reportValidity();\n    }\n  }\n\n  protected override renderIcon(\n    _icon: string,\n    isTrailingIcon = false\n  ): TemplateResult {\n    const type = isTrailingIcon ? \"trailing\" : \"leading\";\n\n    return html`\n      <span\n        class=\"mdc-text-field__icon mdc-text-field__icon--${type}\"\n        tabindex=${isTrailingIcon ? 1 : -1}\n      >\n        <slot name=\"${type}Icon\"></slot>\n      </span>\n    `;\n  }\n\n  static override styles = [\n    styles,\n    css`\n      .mdc-text-field__input {\n        width: var(--ha-textfield-input-width, 100%);\n      }\n      .mdc-text-field:not(.mdc-text-field--with-leading-icon) {\n        padding: var(--text-field-padding, 0px 16px);\n      }\n      .mdc-text-field__affix--suffix {\n        padding-left: var(--text-field-suffix-padding-left, 12px);\n        padding-right: var(--text-field-suffix-padding-right, 0px);\n      }\n\n      input {\n        text-align: var(--text-field-text-align);\n      }\n\n      /* Chrome, Safari, Edge, Opera */\n      :host([no-spinner]) input::-webkit-outer-spin-button,\n      :host([no-spinner]) input::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n        margin: 0;\n      }\n\n      /* Firefox */\n      :host([no-spinner]) input[type=\"number\"] {\n        -moz-appearance: textfield;\n      }\n\n      .mdc-text-field__ripple {\n        overflow: hidden;\n      }\n\n      .mdc-text-field {\n        overflow: var(--text-field-overflow);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textfield\": HaTextField;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport \"../../../components/ha-select\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"hui-theme-select-editor\")\nexport class HuiThemeSelectEditor extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-select\n        .label=${this.label ||\n        `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`}\n        .value=${this.value}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        <mwc-list-item value=\"remove\"\n          >${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.generic.no_theme\"\n          )}</mwc-list-item\n        >\n        ${Object.keys(this.hass!.themes.themes)\n          .sort()\n          .map(\n            (theme) =>\n              html`<mwc-list-item .value=${theme}>${theme}</mwc-list-item>`\n          )}\n      </ha-select>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    if (!this.hass || ev.target.value === \"\") {\n      return;\n    }\n    this.value = ev.target.value === \"remove\" ? undefined : ev.target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-theme-select-editor\": HuiThemeSelectEditor;\n  }\n}\n","import { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, boolean, object, optional, string, assign } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/entity/ha-entity-attribute-picker\";\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-radio\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { WeatherForecastCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { UNAVAILABLE } from \"../../../../data/entity\";\nimport { WeatherEntity } from \"../../../../data/weather\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    theme: optional(string()),\n    show_current: optional(boolean()),\n    show_forecast: optional(boolean()),\n    secondary_info_attribute: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    double_tap_action: optional(actionConfigStruct),\n  })\n);\n\nconst includeDomains = [\"weather\"];\n\n@customElement(\"hui-weather-forecast-card-editor\")\nexport class HuiWeatherForecastCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: WeatherForecastCardConfig;\n\n  public setConfig(config: WeatherForecastCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n\n    if (\n      /* cannot show forecast in case it is unavailable on the entity */\n      (config.show_forecast === true && this._has_forecast === false) ||\n      /* cannot hide both weather and forecast, need one of them */\n      (config.show_current === false && config.show_forecast === false)\n    ) {\n      /* reset to sane default, show weather, but hide forecast */\n      fireEvent(this, \"config-changed\", {\n        config: { ...config, show_current: true, show_forecast: false },\n      });\n    }\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  get _show_current(): boolean {\n    return this._config!.show_current ?? true;\n  }\n\n  get _show_forecast(): boolean {\n    return this._config!.show_forecast ?? this._has_forecast === true;\n  }\n\n  get _secondary_info_attribute(): string {\n    return this._config!.secondary_info_attribute || \"\";\n  }\n\n  get _has_forecast(): boolean | undefined {\n    if (this.hass && this._config) {\n      const stateObj = this.hass.states[this._config.entity] as WeatherEntity;\n      if (stateObj && stateObj.state !== UNAVAILABLE) {\n        return !!stateObj.attributes.forecast?.length;\n      }\n    }\n    return undefined;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.required\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          .includeDomains=${includeDomains}\n          @change=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.name\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._name}\n            .configValue=${\"name\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          ></hui-theme-select-editor>\n          <ha-entity-attribute-picker\n            .hass=${this.hass}\n            .entityId=${this._entity}\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.secondary_info_attribute\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._secondary_info_attribute}\n            .configValue=${\"secondary_info_attribute\"}\n            @value-changed=${this._valueChanged}\n          ></ha-entity-attribute-picker>\n        </div>\n        <div class=\"side-by-side\">\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.weather-forecast.show_both\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-radio\n              .disabled=${this._has_forecast === false}\n              .checked=${this._has_forecast === true &&\n              this._show_current &&\n              this._show_forecast}\n              .configValue=${\"show_both\"}\n              @change=${this._valueChanged}\n            ></ha-radio\n          ></ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.weather-forecast.show_only_current\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-radio\n              .disabled=${this._has_forecast === false}\n              .checked=${this._has_forecast === false ||\n              (this._show_current && !this._show_forecast)}\n              .configValue=${\"show_current\"}\n              @change=${this._valueChanged}\n            ></ha-radio\n          ></ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.weather-forecast.show_only_forecast\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-radio\n              .disabled=${this._has_forecast === false}\n              .checked=${this._has_forecast === true &&\n              !this._show_current &&\n              this._show_forecast}\n              .configValue=${\"show_forecast\"}\n              @change=${this._valueChanged}\n            ></ha-radio\n          ></ha-formfield>\n        </div>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.currentTarget! as EditorTarget;\n\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.configValue.startsWith(\"show_\")) {\n        this._config = { ...this._config };\n        if (target.configValue === \"show_both\") {\n          /* delete since true is default */\n          delete this._config.show_current;\n          delete this._config.show_forecast;\n        } else if (target.configValue === \"show_current\") {\n          delete this._config.show_current;\n          this._config.show_forecast = false;\n        } else if (target.configValue === \"show_forecast\") {\n          delete this._config.show_forecast;\n          this._config.show_current = false;\n        }\n      } else if (target.value === \"\") {\n        this._config = { ...this._config };\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]:\n            target.checked !== undefined ? target.checked : target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-forecast-card-editor\": HuiWeatherForecastCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}