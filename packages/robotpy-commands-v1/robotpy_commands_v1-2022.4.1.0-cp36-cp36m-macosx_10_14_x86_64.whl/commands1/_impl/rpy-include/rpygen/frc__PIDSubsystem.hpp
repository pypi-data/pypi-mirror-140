
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc/commands/PIDSubsystem.h>

#include <wpi/sendable/SendableBuilder.h>
#include <frc/commands/Command.h>
#include <frc/commands/CommandGroup.h>



#include <rpygen/frc__Subsystem.hpp>
#include <rpygen/frc__PIDOutput.hpp>
#include <rpygen/frc__PIDSource.hpp>

namespace rpygen {

using namespace frc;


template <typename CfgBase>
using PyTrampolineCfgBase_frc__PIDSubsystem =
    PyTrampolineCfg_frc__Subsystem<
    PyTrampolineCfg_frc__PIDOutput<
    PyTrampolineCfg_frc__PIDSource<
CfgBase
>>>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PIDSubsystem :
    PyTrampolineCfgBase_frc__PIDSubsystem< CfgBase>
{
    using Base = frc::PIDSubsystem;

    using override_base_PIDWrite_d = frc::PIDSubsystem;
    using override_base_PIDGet_v = frc::PIDSubsystem;
    using override_base_SetAbsoluteTolerance_d = frc::PIDSubsystem;
    using override_base_SetPercentTolerance_d = frc::PIDSubsystem;
    using override_base_KOnTarget_v = frc::PIDSubsystem;
    using override_base_ReturnPIDInput_v = frc::PIDSubsystem;
    using override_base_UsePIDOutput_d = frc::PIDSubsystem;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__PIDSubsystem =
    PyTrampoline_frc__Subsystem<
    PyTrampoline_frc__PIDOutput<
    PyTrampoline_frc__PIDSource<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PIDSubsystem : PyTrampolineBase_frc__PIDSubsystem<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__PIDSubsystem<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__PIDSubsystem;



#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_PIDWrite_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "PIDWrite", output);
        return CxxCallBase::PIDWrite(output);
    }
#endif

#ifndef RPYGEN_DISABLE_PIDGet_v
    double PIDGet() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_PIDGet_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "PIDGet", );
        return CxxCallBase::PIDGet();
    }
#endif

#ifndef RPYGEN_DISABLE_SetAbsoluteTolerance_d
    void SetAbsoluteTolerance(double absValue) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetAbsoluteTolerance_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setAbsoluteTolerance", absValue);
        return CxxCallBase::SetAbsoluteTolerance(absValue);
    }
#endif

#ifndef RPYGEN_DISABLE_SetPercentTolerance_d
    void SetPercentTolerance(double percent) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPercentTolerance_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setPercentTolerance", percent);
        return CxxCallBase::SetPercentTolerance(percent);
    }
#endif

#ifndef RPYGEN_DISABLE_KOnTarget_v
    bool OnTarget() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KOnTarget_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "onTarget", );
        return CxxCallBase::OnTarget();
    }
#endif

#ifndef RPYGEN_DISABLE_ReturnPIDInput_v
    double ReturnPIDInput() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(PIDSubsystem, PYBIND11_TYPE(double), LookupBase,
            "returnPIDInput", ReturnPIDInput, );
    }
#endif

#ifndef RPYGEN_DISABLE_UsePIDOutput_d
    void UsePIDOutput(double output) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(PIDSubsystem, PYBIND11_TYPE(void), LookupBase,
            "usePIDOutput", UsePIDOutput, output);
    }
#endif


#ifndef RPYBLD_DISABLE_GetPIDController_v
  #ifndef RPYBLD_UDISABLE_frc__PIDSubsystem_GetPIDController
    using frc::PIDSubsystem::GetPIDController;
    #define RPYBLD_UDISABLE_frc__PIDSubsystem_GetPIDController
  #endif
#endif


};

}; // namespace rpygen
