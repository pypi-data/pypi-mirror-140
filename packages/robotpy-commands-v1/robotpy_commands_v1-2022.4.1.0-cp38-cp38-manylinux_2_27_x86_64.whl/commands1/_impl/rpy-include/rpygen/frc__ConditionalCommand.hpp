
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc/commands/ConditionalCommand.h>

#include <wpi/sendable/SendableBuilder.h>
#include <frc/commands/Command.h>
#include <frc/commands/CommandGroup.h>



#include <rpygen/frc__Command.hpp>

namespace rpygen {

using namespace frc;


template <typename CfgBase>
using PyTrampolineCfgBase_frc__ConditionalCommand =
    PyTrampolineCfg_frc__Command<
CfgBase
>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__ConditionalCommand :
    PyTrampolineCfgBase_frc__ConditionalCommand< CfgBase>
{
    using Base = frc::ConditionalCommand;

    using override_base_Condition_v = frc::ConditionalCommand;
    using override_base__Initialize_v = frc::ConditionalCommand;
    using override_base__Cancel_v = frc::ConditionalCommand;
    using override_base_IsFinished_v = frc::ConditionalCommand;
    using override_base__Interrupted_v = frc::ConditionalCommand;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__ConditionalCommand =
    PyTrampoline_frc__Command<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__ConditionalCommand : PyTrampolineBase_frc__ConditionalCommand<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__ConditionalCommand<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__ConditionalCommand;



#ifndef RPYGEN_DISABLE_Condition_v
    bool Condition() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(ConditionalCommand, PYBIND11_TYPE(bool), LookupBase,
            "_condition", Condition, );
    }
#endif

#ifndef RPYGEN_DISABLE__Initialize_v
    void _Initialize() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base__Initialize_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_initialize", );
        return CxxCallBase::_Initialize();
    }
#endif

#ifndef RPYGEN_DISABLE__Cancel_v
    void _Cancel() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base__Cancel_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_cancel", );
        return CxxCallBase::_Cancel();
    }
#endif

#ifndef RPYGEN_DISABLE_IsFinished_v
    bool IsFinished() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_IsFinished_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "isFinished", );
        return CxxCallBase::IsFinished();
    }
#endif

#ifndef RPYGEN_DISABLE__Interrupted_v
    void _Interrupted() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base__Interrupted_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_interrupted", );
        return CxxCallBase::_Interrupted();
    }
#endif




};

}; // namespace rpygen
