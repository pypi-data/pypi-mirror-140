
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc/commands/PIDCommand.h>

#include <wpi/sendable/SendableBuilder.h>
#include <frc/commands/Command.h>
#include <frc/commands/CommandGroup.h>



#include <rpygen/frc__Command.hpp>
#include <rpygen/frc__PIDOutput.hpp>
#include <rpygen/frc__PIDSource.hpp>

namespace rpygen {

using namespace frc;


template <typename CfgBase>
using PyTrampolineCfgBase_frc__PIDCommand =
    PyTrampolineCfg_frc__Command<
    PyTrampolineCfg_frc__PIDOutput<
    PyTrampolineCfg_frc__PIDSource<
CfgBase
>>>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PIDCommand :
    PyTrampolineCfgBase_frc__PIDCommand< CfgBase>
{
    using Base = frc::PIDCommand;

    using override_base_PIDWrite_d = frc::PIDCommand;
    using override_base_PIDGet_v = frc::PIDCommand;
    using override_base_InitSendable_RTSendableBuilder = frc::PIDCommand;
    using override_base__Initialize_v = frc::PIDCommand;
    using override_base__Interrupted_v = frc::PIDCommand;
    using override_base__End_v = frc::PIDCommand;
    using override_base_ReturnPIDInput_v = frc::PIDCommand;
    using override_base_UsePIDOutput_d = frc::PIDCommand;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__PIDCommand =
    PyTrampoline_frc__Command<
    PyTrampoline_frc__PIDOutput<
    PyTrampoline_frc__PIDSource<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PIDCommand : PyTrampolineBase_frc__PIDCommand<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__PIDCommand<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__PIDCommand;



#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_PIDWrite_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "PIDWrite", output);
        return CxxCallBase::PIDWrite(output);
    }
#endif

#ifndef RPYGEN_DISABLE_PIDGet_v
    double PIDGet() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_PIDGet_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "PIDGet", );
        return CxxCallBase::PIDGet();
    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "initSendable", builder);
        return CxxCallBase::InitSendable(builder);
    }
#endif

#ifndef RPYGEN_DISABLE__Initialize_v
    void _Initialize() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base__Initialize_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_initialize", );
        return CxxCallBase::_Initialize();
    }
#endif

#ifndef RPYGEN_DISABLE__Interrupted_v
    void _Interrupted() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base__Interrupted_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_interrupted", );
        return CxxCallBase::_Interrupted();
    }
#endif

#ifndef RPYGEN_DISABLE__End_v
    void _End() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base__End_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_end", );
        return CxxCallBase::_End();
    }
#endif

#ifndef RPYGEN_DISABLE_ReturnPIDInput_v
    double ReturnPIDInput() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(PIDCommand, PYBIND11_TYPE(double), LookupBase,
            "returnPIDInput", ReturnPIDInput, );
    }
#endif

#ifndef RPYGEN_DISABLE_UsePIDOutput_d
    void UsePIDOutput(double output) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(PIDCommand, PYBIND11_TYPE(void), LookupBase,
            "usePIDOutput", UsePIDOutput, output);
    }
#endif


#ifndef RPYBLD_DISABLE_KGetPIDController_v
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_GetPIDController
    using frc::PIDCommand::GetPIDController;
    #define RPYBLD_UDISABLE_frc__PIDCommand_GetPIDController
  #endif
#endif
#ifndef RPYBLD_DISABLE_SetSetpoint_d
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_SetSetpoint
    using frc::PIDCommand::SetSetpoint;
    #define RPYBLD_UDISABLE_frc__PIDCommand_SetSetpoint
  #endif
#endif
#ifndef RPYBLD_DISABLE_KGetSetpoint_v
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_GetSetpoint
    using frc::PIDCommand::GetSetpoint;
    #define RPYBLD_UDISABLE_frc__PIDCommand_GetSetpoint
  #endif
#endif
#ifndef RPYBLD_DISABLE_GetPosition_v
  #ifndef RPYBLD_UDISABLE_frc__PIDCommand_GetPosition
    using frc::PIDCommand::GetPosition;
    #define RPYBLD_UDISABLE_frc__PIDCommand_GetPosition
  #endif
#endif


};

}; // namespace rpygen
