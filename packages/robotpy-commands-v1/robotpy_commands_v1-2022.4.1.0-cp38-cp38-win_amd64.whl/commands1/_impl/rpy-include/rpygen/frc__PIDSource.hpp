
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc\PIDSource.h>





namespace rpygen {

using namespace frc;



template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PIDSource :
    CfgBase
{
    using Base = frc::PIDSource;

    using override_base_SetPIDSourceType_TPIDSourceType = frc::PIDSource;
    using override_base_KGetPIDSourceType_v = frc::PIDSource;
    using override_base_PIDGet_v = frc::PIDSource;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PIDSource : PyTrampolineBase, virtual py::trampoline_self_life_support {
    using PyTrampolineBase::PyTrampolineBase;



#ifndef RPYGEN_DISABLE_SetPIDSourceType_TPIDSourceType
    void SetPIDSourceType(frc::PIDSourceType pidSource) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPIDSourceType_TPIDSourceType;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setPIDSourceType", pidSource);
        return CxxCallBase::SetPIDSourceType(pidSource);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetPIDSourceType_v
    PIDSourceType GetPIDSourceType() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPIDSourceType_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(PIDSourceType), LookupBase,
            "getPIDSourceType", );
        return CxxCallBase::GetPIDSourceType();
    }
#endif

#ifndef RPYGEN_DISABLE_PIDGet_v
    double PIDGet() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        RPYBUILD_OVERRIDE_PURE_NAME(PIDSource, PYBIND11_TYPE(double), LookupBase,
            "pidGet", PIDGet, );
    }
#endif



    using frc::PIDSource::m_pidSource;

};

}; // namespace rpygen
