
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc\PIDBase.h>

#include <wpi/sendable/SendableBuilder.h>



#include <rpygen/frc__PIDInterface.hpp>
#include <rpygen/frc__PIDOutput.hpp>
#include <rpygen/wpi__Sendable.hpp>

namespace rpygen {

using namespace frc;


template <typename CfgBase>
using PyTrampolineCfgBase_frc__PIDBase =
    PyTrampolineCfg_frc__PIDInterface<
    PyTrampolineCfg_frc__PIDOutput<
    PyTrampolineCfg_wpi__Sendable<
CfgBase
>>>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PIDBase :
    PyTrampolineCfgBase_frc__PIDBase< CfgBase>
{
    using Base = frc::PIDBase;

    using override_base_KGet_v = frc::PIDBase;
    using override_base_SetContinuous_b = frc::PIDBase;
    using override_base_SetInputRange_d_d = frc::PIDBase;
    using override_base_SetOutputRange_d_d = frc::PIDBase;
    using override_base_SetPID_d_d_d = frc::PIDBase;
    using override_base_SetPID_d_d_d_d = frc::PIDBase;
    using override_base_KGetP_v = frc::PIDBase;
    using override_base_KGetI_v = frc::PIDBase;
    using override_base_KGetD_v = frc::PIDBase;
    using override_base_KGetF_v = frc::PIDBase;
    using override_base_SetSetpoint_d = frc::PIDBase;
    using override_base_KGetSetpoint_v = frc::PIDBase;
    using override_base_KGetError_v = frc::PIDBase;
    using override_base_KGetAvgError_v = frc::PIDBase;
    using override_base_SetPIDSourceType_TPIDSourceType = frc::PIDBase;
    using override_base_KGetPIDSourceType_v = frc::PIDBase;
    using override_base_SetTolerance_d = frc::PIDBase;
    using override_base_SetAbsoluteTolerance_d = frc::PIDBase;
    using override_base_SetPercentTolerance_d = frc::PIDBase;
    using override_base_SetToleranceBuffer_i = frc::PIDBase;
    using override_base_KOnTarget_v = frc::PIDBase;
    using override_base_Reset_v = frc::PIDBase;
    using override_base_PIDWrite_d = frc::PIDBase;
    using override_base_InitSendable_RTSendableBuilder = frc::PIDBase;
    using override_base_Calculate_v = frc::PIDBase;
    using override_base_CalculateFeedForward_v = frc::PIDBase;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__PIDBase =
    PyTrampoline_frc__PIDInterface<
    PyTrampoline_frc__PIDOutput<
    PyTrampoline_wpi__Sendable<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PIDBase : PyTrampolineBase_frc__PIDBase<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__PIDBase<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__PIDBase;



#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "get", );
        return CxxCallBase::Get();
    }
#endif

#ifndef RPYGEN_DISABLE_SetContinuous_b
    void SetContinuous(bool continuous) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetContinuous_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setContinuous", continuous);
        return CxxCallBase::SetContinuous(continuous);
    }
#endif

#ifndef RPYGEN_DISABLE_SetInputRange_d_d
    void SetInputRange(double minimumInput, double maximumInput) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetInputRange_d_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setInputRange", minimumInput, maximumInput);
        return CxxCallBase::SetInputRange(minimumInput, maximumInput);
    }
#endif

#ifndef RPYGEN_DISABLE_SetOutputRange_d_d
    void SetOutputRange(double minimumOutput, double maximumOutput) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetOutputRange_d_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setOutputRange", minimumOutput, maximumOutput);
        return CxxCallBase::SetOutputRange(minimumOutput, maximumOutput);
    }
#endif

#ifndef RPYGEN_DISABLE_SetPID_d_d_d
    void SetPID(double p, double i, double d) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPID_d_d_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setPID", p, i, d);
        return CxxCallBase::SetPID(p, i, d);
    }
#endif

#ifndef RPYGEN_DISABLE_SetPID_d_d_d_d
    void SetPID(double p, double i, double d, double f) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPID_d_d_d_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setPID", p, i, d, f);
        return CxxCallBase::SetPID(p, i, d, f);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetP_v
    double GetP() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetP_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getP", );
        return CxxCallBase::GetP();
    }
#endif

#ifndef RPYGEN_DISABLE_KGetI_v
    double GetI() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetI_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getI", );
        return CxxCallBase::GetI();
    }
#endif

#ifndef RPYGEN_DISABLE_KGetD_v
    double GetD() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetD_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getD", );
        return CxxCallBase::GetD();
    }
#endif

#ifndef RPYGEN_DISABLE_KGetF_v
    double GetF() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetF_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getF", );
        return CxxCallBase::GetF();
    }
#endif

#ifndef RPYGEN_DISABLE_SetSetpoint_d
    void SetSetpoint(double setpoint) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetSetpoint_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setSetpoint", setpoint);
        return CxxCallBase::SetSetpoint(setpoint);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetSetpoint_v
    double GetSetpoint() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetSetpoint_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getSetpoint", );
        return CxxCallBase::GetSetpoint();
    }
#endif

#ifndef RPYGEN_DISABLE_KGetError_v
    double GetError() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetError_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getError", );
        return CxxCallBase::GetError();
    }
#endif

#ifndef RPYGEN_DISABLE_KGetAvgError_v
    double GetAvgError() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetAvgError_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "getAvgError", );
        return CxxCallBase::GetAvgError();
    }
#endif

#ifndef RPYGEN_DISABLE_SetPIDSourceType_TPIDSourceType
    void SetPIDSourceType(PIDSourceType pidSource) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPIDSourceType_TPIDSourceType;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setPIDSourceType", pidSource);
        return CxxCallBase::SetPIDSourceType(pidSource);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetPIDSourceType_v
    PIDSourceType GetPIDSourceType() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetPIDSourceType_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(PIDSourceType), LookupBase,
            "getPIDSourceType", );
        return CxxCallBase::GetPIDSourceType();
    }
#endif

#ifndef RPYGEN_DISABLE_SetTolerance_d
    void SetTolerance(double percent) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetTolerance_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setTolerance", percent);
        return CxxCallBase::SetTolerance(percent);
    }
#endif

#ifndef RPYGEN_DISABLE_SetAbsoluteTolerance_d
    void SetAbsoluteTolerance(double absTolerance) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetAbsoluteTolerance_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setAbsoluteTolerance", absTolerance);
        return CxxCallBase::SetAbsoluteTolerance(absTolerance);
    }
#endif

#ifndef RPYGEN_DISABLE_SetPercentTolerance_d
    void SetPercentTolerance(double percent) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetPercentTolerance_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setPercentTolerance", percent);
        return CxxCallBase::SetPercentTolerance(percent);
    }
#endif

#ifndef RPYGEN_DISABLE_SetToleranceBuffer_i
    void SetToleranceBuffer(int bufLength) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetToleranceBuffer_i;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setToleranceBuffer", bufLength);
        return CxxCallBase::SetToleranceBuffer(bufLength);
    }
#endif

#ifndef RPYGEN_DISABLE_KOnTarget_v
    bool OnTarget() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KOnTarget_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "onTarget", );
        return CxxCallBase::OnTarget();
    }
#endif

#ifndef RPYGEN_DISABLE_Reset_v
    void Reset() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_Reset_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "reset", );
        return CxxCallBase::Reset();
    }
#endif

#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_PIDWrite_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "pidWrite", output);
        return CxxCallBase::PIDWrite(output);
    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "initSendable", builder);
        return CxxCallBase::InitSendable(builder);
    }
#endif

#ifndef RPYGEN_DISABLE_Calculate_v
    void Calculate() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_Calculate_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_calculate", );
        return CxxCallBase::Calculate();
    }
#endif

#ifndef RPYGEN_DISABLE_CalculateFeedForward_v
    double CalculateFeedForward() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_CalculateFeedForward_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "_calculateFeedForward", );
        return CxxCallBase::CalculateFeedForward();
    }
#endif


#ifndef RPYBLD_DISABLE_KGetContinuousError_d
  #ifndef RPYBLD_UDISABLE_frc__PIDBase_GetContinuousError
    using frc::PIDBase::GetContinuousError;
    #define RPYBLD_UDISABLE_frc__PIDBase_GetContinuousError
  #endif
#endif

    using frc::PIDBase::m_enabled;
    using frc::PIDBase::m_thisMutex;
    using frc::PIDBase::m_pidWriteMutex;
    using frc::PIDBase::m_pidInput;
    using frc::PIDBase::m_pidOutput;
    using frc::PIDBase::m_setpointTimer;

};

}; // namespace rpygen
