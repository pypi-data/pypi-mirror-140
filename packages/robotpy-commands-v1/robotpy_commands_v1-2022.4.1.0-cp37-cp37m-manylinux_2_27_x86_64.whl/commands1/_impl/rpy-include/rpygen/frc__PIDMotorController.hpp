
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>


#include <frc/pidwrappers/PIDMotorController.h>




#include <rpygen/frc__PIDOutput.hpp>
#include <rpygen/frc__MotorController.hpp>
#include <rpygen/wpi__Sendable.hpp>

namespace rpygen {

using namespace frc;


template <typename CfgBase>
using PyTrampolineCfgBase_frc__PIDMotorController =
    PyTrampolineCfg_frc__PIDOutput<
    PyTrampolineCfg_frc__MotorController<
    PyTrampolineCfg_wpi__Sendable<
CfgBase
>>>;

template <typename CfgBase = EmptyTrampolineCfg>
struct PyTrampolineCfg_frc__PIDMotorController :
    PyTrampolineCfgBase_frc__PIDMotorController< CfgBase>
{
    using Base = frc::PIDMotorController;

    using override_base_Set_d = frc::PIDMotorController;
    using override_base_KGet_v = frc::PIDMotorController;
    using override_base_SetInverted_b = frc::PIDMotorController;
    using override_base_KGetInverted_v = frc::PIDMotorController;
    using override_base_Disable_v = frc::PIDMotorController;
    using override_base_StopMotor_v = frc::PIDMotorController;
    using override_base_PIDWrite_d = frc::PIDMotorController;
    using override_base_InitSendable_RTSendableBuilder = frc::PIDMotorController;
};


template <typename PyTrampolineBase, typename PyTrampolineCfg>
using PyTrampolineBase_frc__PIDMotorController =
    PyTrampoline_frc__PIDOutput<
    PyTrampoline_frc__MotorController<
    PyTrampoline_wpi__Sendable<
        PyTrampolineBase
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
        
        , PyTrampolineCfg
    >
;

template <typename PyTrampolineBase, typename PyTrampolineCfg>
struct PyTrampoline_frc__PIDMotorController : PyTrampolineBase_frc__PIDMotorController<PyTrampolineBase, PyTrampolineCfg> {
    using PyTrampolineBase_frc__PIDMotorController<PyTrampolineBase, PyTrampolineCfg>::PyTrampolineBase_frc__PIDMotorController;



#ifndef RPYGEN_DISABLE_Set_d
    void Set(double value) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_Set_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "set", value);
        return CxxCallBase::Set(value);
    }
#endif

#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGet_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(double), LookupBase,
            "get", );
        return CxxCallBase::Get();
    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_SetInverted_b;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "setInverted", isInverted);
        return CxxCallBase::SetInverted(isInverted);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_KGetInverted_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(bool), LookupBase,
            "getInverted", );
        return CxxCallBase::GetInverted();
    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_Disable_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "disable", );
        return CxxCallBase::Disable();
    }
#endif

#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_StopMotor_v;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "stopMotor", );
        return CxxCallBase::StopMotor();
    }
#endif

#ifndef RPYGEN_DISABLE_PIDWrite_d
    void PIDWrite(double output) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_PIDWrite_d;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "PIDWrite", output);
        return CxxCallBase::PIDWrite(output);
    }
#endif

#ifndef RPYGEN_DISABLE_InitSendable_RTSendableBuilder
    void InitSendable(wpi::SendableBuilder& builder) override {
        using LookupBase = typename PyTrampolineCfg::Base;
        using CxxCallBase = typename PyTrampolineCfg::override_base_InitSendable_RTSendableBuilder;
        PYBIND11_OVERRIDE_IMPL(PYBIND11_TYPE(void), LookupBase,
            "_initSendable", builder);
        return CxxCallBase::InitSendable(builder);
    }
#endif




};

}; // namespace rpygen
